local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float scoutDistance;
    FSeek(p + 4);  float scoutDistanceOutside;
    FSeek(p + 8);  float zoomDistance;
    FSeek(p + 16); vector3 zoomOffset;
    FSeek(p + 32); vector3 zoomAngle;
    FSeek(p + 48); float zoomFov;

    FSeek(p + 64);
} MiniBossCommonConfig;

typedef byte sint8;

enum<sint8> BarrageType
{
    TYPE_LASER = 0,
    TYPE_BALL = 1,
    TYPE_BALL_L = 2,
    TYPE_BALL_LL = 3,
    TYPE_AIR_DROP = 4,
};

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  BarrageType type;
    FSeek(p + 8);  cstring damageTag;
    FSeek(p + 24); float startSpeed;
    FSeek(p + 28); float decelePower;
    FSeek(p + 32); float minSpeed;
    FSeek(p + 36); float lifeTime;
    FSeek(p + 40); float waitTime;
    FSeek(p + 44); float lineTime;
    FSeek(p + 48); float scale;
    FSeek(p + 52); float hitVelocity;
    FSeek(p + 56); float parriedSpeed;
    FSeek(p + 60); sint32 parriedDamage;
    FSeek(p + 64); float parriedStaggerValue;
    FSeek(p + 68); float parriedStunValue;
    FSeek(p + 72); cstring hitEffName;

    FSeek(p + 88);
} MiniBossChagerBarrageParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  sint32 muzzleNum;
    FSeek(p + 12); float yOffset;
    FSeek(p + 16); float zOffset;
    FSeek(p + 20); float heightLength;
    FSeek(p + 24); float rotSpeed;
    FSeek(p + 28); float shakeSpeed;
    FSeek(p + 32); float intervalTime;
    FSeek(p + 36); float activeTime;
    FSeek(p + 40); float endWaitTime;

    FSeek(p + 44);
} MiniBossChagerSimpleRotateBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startWaitTime;
    FSeek(p + 4);  float yOffset;
    FSeek(p + 8);  float zOffset;
    FSeek(p + 12); float moveSpeed;
    FSeek(p + 16); float followDeg;
    FSeek(p + 20); sint32 shotNum;
    FSeek(p + 24); float intervalTime;
    FSeek(p + 28); float lifeTime;
    FSeek(p + 32); float endWaitTime;

    FSeek(p + 36);
} MiniBossChagerFollowLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startWaitTime;
    FSeek(p + 4);  sint32 muzzleNum;
    FSeek(p + 8);  float yOffset;
    FSeek(p + 12); float zOffset;
    FSeek(p + 16); float rotSpeed;
    FSeek(p + 20); float moveSpeed;
    FSeek(p + 24); float activeTime;
    FSeek(p + 28); float endWaitTime;

    FSeek(p + 32);
} MiniBossChagerVortexLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startWaitTime;
    FSeek(p + 4);  float moveSpeed;
    FSeek(p + 8);  float setDeg;
    FSeek(p + 12); float lifeTime;
    FSeek(p + 16); float endWaitTime;

    FSeek(p + 20);
} MiniBossChagerCrossLaser;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float yOffset;
    FSeek(p + 8);  float zOffset;
    FSeek(p + 12); bool isFollowPlayer;
    FSeek(p + 16); float startWaitTime;
    FSeek(p + 20); float shotIntarval;
    FSeek(p + 24); float maxAngle;
    FSeek(p + 28); float rotateSpeed;
    FSeek(p + 32); float rotateAngle;
    FSeek(p + 36); float endWaitTime;

    FSeek(p + 40);
} MiniBossChagerCrossBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startWaitTime;
    FSeek(p + 4);  float yOffset;
    FSeek(p + 8);  float scale;
    FSeek(p + 12); float lifeTime;
    FSeek(p + 16); float endWaitTime;

    FSeek(p + 20);
} MiniBossChagerMassLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  sint32 muzzleNum;
    FSeek(p + 12); sint32 verticalNum;
    FSeek(p + 16); float radius;
    FSeek(p + 20); float spaceRate;
    FSeek(p + 24); float verticalWaitTime;
    FSeek(p + 28); float endWaitTime;

    FSeek(p + 32);
} MiniBossChagerVerticalRoundBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  sint32 muzzleNum;
    FSeek(p + 12); float radius;
    FSeek(p + 16); float height;
    FSeek(p + 20); float scale;
    FSeek(p + 24); sint32 sideNum;
    FSeek(p + 28); sint32 attackNum;
    FSeek(p + 32); float intervalTime;
    FSeek(p + 36); float nextDeg;
    FSeek(p + 40); float shotWaitTime;
    FSeek(p + 44); float endWaitTime;

    FSeek(p + 48);
} MiniBossPyramidRoundBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  float yOffset;
    FSeek(p + 12); float scale;
    FSeek(p + 16); float step;
    FSeek(p + 20); sint32 allNum;
    FSeek(p + 24); float upRate;
    FSeek(p + 28); float downRate;
    FSeek(p + 32); float frontRate;
    FSeek(p + 36); float shotWaitTimeMin;
    FSeek(p + 40); float shotWaitTimeMax;
    FSeek(p + 44); float endWaitTime;

    FSeek(p + 48);
} MiniBossPlaneUpDownBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  float yOffset;
    FSeek(p + 12); float edgeLength;
    FSeek(p + 16); float activeTime;
    FSeek(p + 20); float intervalTime;
    FSeek(p + 24); float endWaitTime;

    FSeek(p + 28);
} MiniBossTriangleBatteryBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  float yOffset;
    FSeek(p + 12); float scale;
    FSeek(p + 16); float lengthMin;
    FSeek(p + 20); float lengthMax;
    FSeek(p + 24); float intervalTime;
    FSeek(p + 28); float shotWaitTime;
    FSeek(p + 32); float activeTime;
    FSeek(p + 36); float endWaitTime;

    FSeek(p + 40);
} MiniBossPlayerFallBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float startWaitTime;
    FSeek(p + 8);  float yOffset;
    FSeek(p + 12); float zOffset;
    FSeek(p + 16); float scale;
    FSeek(p + 20); sint32 muzzleNum;
    FSeek(p + 24); float bulletRad;
    FSeek(p + 28); float intervalTime;
    FSeek(p + 32); float activeTime;
    FSeek(p + 36); float endWaitTime;

    FSeek(p + 40);
} MiniBossGatlingRevolverBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float yOffset;
    FSeek(p + 8);  float zOffset;
    FSeek(p + 12); bool isFollowPlayer;
    FSeek(p + 16); float shotIntarval;
    FSeek(p + 20); float maxAngle;
    FSeek(p + 24); float rotateSpeed;
    FSeek(p + 28); float rotateAngle;
    FSeek(p + 32); float barrageAngleDiff;
    FSeek(p + 36); float startWaitTime;
    FSeek(p + 40); float endWaitTime;

    FSeek(p + 44);
} MiniBossWinderBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float yOffset;
    FSeek(p + 8);  float zOffset;
    FSeek(p + 12); bool isFollowPlayer;
    FSeek(p + 16); float shotIntarval;
    FSeek(p + 20); float maxAngle;
    FSeek(p + 24); float yAngleOffset;
    FSeek(p + 28); float shotTime;
    FSeek(p + 32); float addSpeedMax;
    FSeek(p + 36); float startWaitTime;
    FSeek(p + 40); float endWaitTime;

    FSeek(p + 44);
} MiniBossShotgunBullet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 barrageIndex;
    FSeek(p + 4);  float yOffset;
    FSeek(p + 8);  float zOffset;
    FSeek(p + 12); float upRotOffset;
    FSeek(p + 16); float yAngleOffset;
    FSeek(p + 20); float maxAngle;
    FSeek(p + 24); float shotTime;
    FSeek(p + 28); float addSpeedMax;
    FSeek(p + 32); float lineTime;
    FSeek(p + 36); float fallPower;
    FSeek(p + 40); float startWaitTime;
    FSeek(p + 44); float endWaitTime;

    FSeek(p + 48);
} MiniBossChagerAirDrop;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 bulletDamage;
    FSeek(p + 4);  float bulletStaggerPoint;
    FSeek(p + 8);  float bulletSpeed;
    FSeek(p + 12); float bulletFallSpeed;
    FSeek(p + 16); float bulletCyloopSpeed;
    FSeek(p + 20); float bulletGroundTime;
    FSeek(p + 24); float bulletFallTime;
    FSeek(p + 28); float yOffset;
    FSeek(p + 32); float zOffset;
    FSeek(p + 36); float upRotOffset;
    FSeek(p + 40); float yAngleOffset;
    FSeek(p + 44); float maxAngle;
    FSeek(p + 48); float shotTime;
    FSeek(p + 52); float startWaitTime;
    FSeek(p + 56); float endWaitTime;

    FSeek(p + 60);
} MiniBossChagerGroundObj;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float startWaitTime;
    FSeek(p + 4);   float yOffset;
    FSeek(p + 8);   float scale;
    FSeek(p + 12);  sint32 muzzleNum;
    FSeek(p + 16);  vector3 muzzlePosOffset[10]<optimize=false>;
    FSeek(p + 176); float muzzleRotOffset[10]<optimize=false>;
    FSeek(p + 216); float muzzleTimeOffset[10]<optimize=false>;
    FSeek(p + 256); float muzzleLaserStartOffset[10]<optimize=false>;
    FSeek(p + 296); sint32 laserNum;
    FSeek(p + 300); sint32 attackNum;
    FSeek(p + 304); float laserRandomRange;
    FSeek(p + 308); float laserTime;
    FSeek(p + 312); float laserEndTime;
    FSeek(p + 316); float laserNextTime;
    FSeek(p + 320); float endWaitTime;

    FSeek(p + 336);
} MiniBossChagerDiffuseLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float startWaitTime;
    FSeek(p + 4);   sint32 muzzleNum;
    FSeek(p + 16);  vector3 muzzlePosOffset[10]<optimize=false>;
    FSeek(p + 176); float muzzleRotOffsetX[10]<optimize=false>;
    FSeek(p + 216); float muzzleRotOffsetY[10]<optimize=false>;
    FSeek(p + 256); float muzzleTimeOffset[10]<optimize=false>;
    FSeek(p + 296); float muzzleLaserStartOffset[10]<optimize=false>;
    FSeek(p + 336); float laserShotTimeMin;
    FSeek(p + 340); float laserShotTimeMax;
    FSeek(p + 344); sint32 laserNum;
    FSeek(p + 348); float laserRange;
    FSeek(p + 352); float laserEndTime;
    FSeek(p + 356); float laserSpeed;
    FSeek(p + 360); float laserRandomRangeMin;
    FSeek(p + 364); float laserRandomRangeMax;
    FSeek(p + 368); float laserHomingTime;
    FSeek(p + 372); float endWaitTime;

    FSeek(p + 384);
} MiniBossChagerChaseShot;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float hitDistance;
    FSeek(p + 4);  float durationBind;
    FSeek(p + 8);  float distanceStartBlackOut;
    FSeek(p + 12); float timeEaseBlackOut;
    FSeek(p + 16); float timeDelayEndtBlackOut;
    FSeek(p + 32); vector3 tangentFrom;
    FSeek(p + 48); vector3 tangentTo;

    FSeek(p + 64);
} MiniBossChargerCatchParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    MiniBossCommonConfig commonConfig;
    FSeek(p + 64);   MiniBossChagerBarrageParam barrage[16]<optimize=false>;
    FSeek(p + 1472); MiniBossChagerSimpleRotateBullet simpleRotateBullet[3]<optimize=false>;
    FSeek(p + 1604); MiniBossChagerFollowLaser followLaser[3]<optimize=false>;
    FSeek(p + 1712); MiniBossChagerVortexLaser vortexLaser[3]<optimize=false>;
    FSeek(p + 1808); MiniBossChagerCrossLaser crossLaser[3]<optimize=false>;
    FSeek(p + 1868); MiniBossChagerCrossBullet crossBullet[3]<optimize=false>;
    FSeek(p + 1988); MiniBossChagerMassLaser massLaser[3]<optimize=false>;
    FSeek(p + 2048); MiniBossChagerVerticalRoundBullet verticalRoundBullet[3]<optimize=false>;
    FSeek(p + 2144); MiniBossPyramidRoundBullet pyramidRoundBullet[3]<optimize=false>;
    FSeek(p + 2288); MiniBossPlaneUpDownBullet planeUpDownBullet[3]<optimize=false>;
    FSeek(p + 2432); MiniBossTriangleBatteryBullet triangleBatteryBullet[3]<optimize=false>;
    FSeek(p + 2516); MiniBossPlayerFallBullet playerFallBullet[3]<optimize=false>;
    FSeek(p + 2636); MiniBossGatlingRevolverBullet gatlingRevolverBullet[3]<optimize=false>;
    FSeek(p + 2756); MiniBossWinderBullet winderBullet[3]<optimize=false>;
    FSeek(p + 2888); MiniBossShotgunBullet shotgunBullet[3]<optimize=false>;
    FSeek(p + 3020); MiniBossChagerAirDrop airDrop[3]<optimize=false>;
    FSeek(p + 3164); MiniBossChagerGroundObj groundObj[3]<optimize=false>;
    FSeek(p + 3344); MiniBossChagerDiffuseLaser diffuseLaser[3]<optimize=false>;
    FSeek(p + 4352); MiniBossChagerChaseShot chaseShot[3]<optimize=false>;
    FSeek(p + 5504); MiniBossChargerCatchParam atkCatch;

    FSeek(p + 5568);
} MiniBossChargerCommonParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint;
    FSeek(p + 4);  float maxStunPoint[3]<optimize=false>;
    FSeek(p + 16); float stunDecreaseStartTime;
    FSeek(p + 20); float stunDecreaseSpeed;
    FSeek(p + 24); float maxStaggerPoint[3]<optimize=false>;
    FSeek(p + 36); float staggerDecreaseStartTime;
    FSeek(p + 40); float staggerDecreaseSpeed;
    FSeek(p + 44); float attackRate;
    FSeek(p + 48); uint16 expItemNum;
    FSeek(p + 50); uint16 exp;

    FSeek(p + 52);
} MiniBossLevelCommonConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 level;
    FSeek(p + 4);  MiniBossLevelCommonConfig commonConfig;
    FSeek(p + 56); float stunTime;

    FSeek(p + 60);
} MiniBossChargerLevelParam;

enum<sint32> AttackType
{
    AttackTypeInvalid = 0,
    AttackSimpleRotateBullet = 1,
    AttackFollowLaser = 2,
    AttackVortexLaser = 3,
    AttackCrossLaser = 4,
    AttackCrossBullet = 5,
    AttackMassLaser = 6,
    AttackVerticalRoundBullet = 7,
    AttackPyramidRoundBullet = 8,
    AttackPlaneUpDownBullet = 9,
    AttackTriangleBatteryBullet = 10,
    AttackPlayerFallBullet = 11,
    AttackGatlingRevolverBullet = 12,
    AttackWinderBullet = 13,
    AttackShotgunBullet = 14,
    AttackAirDropBullet = 15,
    AttackChaseShotObject = 16,
    AttackDiffuseLaser = 17,
    AttackChaseShot = 18,
    AttackTypeNum = 19,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 rateHp;
    FSeek(p + 8); cstring grindSetName;

    FSeek(p + 24);
} MiniBossChargerHPRateParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   sint32 level;
    FSeek(p + 4);   float rate;
    FSeek(p + 8);   float chanceTime;
    FSeek(p + 12);  float chanceTimeMoveSpeed;
    FSeek(p + 16);  float chanceTimeDecSpeed;
    FSeek(p + 20);  float chanceTimeSpeedMin;
    FSeek(p + 24);  float damageTime;
    FSeek(p + 28);  float chanceTimeAddSpeed;
    FSeek(p + 32);  AttackType attackTable[10]<optimize=false>;
    FSeek(p + 72);  sint32 attackIndexTable[10]<optimize=false>;
    FSeek(p + 112); MiniBossChargerHPRateParam hpRateParams[3]<optimize=false>;

    FSeek(p + 184);
} MiniBossChargerLevelBand;

enum<sint32> MiniBossChargerLevel1_AttackType
{
    MiniBossChargerLevel1_AttackType_AttackTypeInvalid = 0,
    MiniBossChargerLevel1_AttackType_AttackSimpleRotateBullet = 1,
    MiniBossChargerLevel1_AttackType_AttackFollowLaser = 2,
    MiniBossChargerLevel1_AttackType_AttackVortexLaser = 3,
    MiniBossChargerLevel1_AttackType_AttackCrossLaser = 4,
    MiniBossChargerLevel1_AttackType_AttackCrossBullet = 5,
    MiniBossChargerLevel1_AttackType_AttackMassLaser = 6,
    MiniBossChargerLevel1_AttackType_AttackVerticalRoundBullet = 7,
    MiniBossChargerLevel1_AttackType_AttackPyramidRoundBullet = 8,
    MiniBossChargerLevel1_AttackType_AttackPlaneUpDownBullet = 9,
    MiniBossChargerLevel1_AttackType_AttackTriangleBatteryBullet = 10,
    MiniBossChargerLevel1_AttackType_AttackPlayerFallBullet = 11,
    MiniBossChargerLevel1_AttackType_AttackGatlingRevolverBullet = 12,
    MiniBossChargerLevel1_AttackType_AttackWinderBullet = 13,
    MiniBossChargerLevel1_AttackType_AttackShotgunBullet = 14,
    MiniBossChargerLevel1_AttackType_AttackAirDropBullet = 15,
    MiniBossChargerLevel1_AttackType_AttackChaseShotObject = 16,
    MiniBossChargerLevel1_AttackType_AttackDiffuseLaser = 17,
    MiniBossChargerLevel1_AttackType_AttackChaseShot = 18,
    MiniBossChargerLevel1_AttackType_AttackTypeNum = 19,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float range;
    FSeek(p + 4);  MiniBossChargerLevel1_AttackType attackTable[2]<optimize=false>;
    FSeek(p + 12); sint32 attackIndexTable[2]<optimize=false>;

    FSeek(p + 20);
} MiniBossChargerLevel1;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    MiniBossChargerCommonParam commonParam;
    FSeek(p + 5568); MiniBossChargerLevelParam levelParams[5]<optimize=false>;
    FSeek(p + 5872); MiniBossChargerLevelBand levelBands[5]<optimize=false>;
    FSeek(p + 6792); MiniBossChargerLevel1 level1Params[2]<optimize=false>;

    FSeek(p + 6832);
} MiniBossChargerConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
MiniBossChargerConfig miniBossChargerConfig;
