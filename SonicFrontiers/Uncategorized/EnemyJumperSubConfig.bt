local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float killWaitTime<comment="Killされるまでの待ち時間">;
    FSeek(p + 4);  float colliderRadius<comment="本体円柱コリジョン半径">;
    FSeek(p + 8);  float colliderHeight<comment="本体円柱コリジョン高さ">;
    FSeek(p + 12); float damageColliderRadiusOffset<comment="ダメージコリジョンの半径オフセット">;
    FSeek(p + 16); float eyesightDistance<comment="視野距離">;

    FSeek(p + 20);
} EnemyJumperSubCommonParam;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint<comment="体力">;
    FSeek(p + 4);  float attackRate<comment="攻撃倍率">;
    FSeek(p + 8);  uint16 expItemNum<comment="経験値アイテムドロップ数">;
    FSeek(p + 10); uint16 exp<comment="合計経験値">;

    FSeek(p + 12);
} EnemyJumperSubCommonLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;
    FSeek(p + 4); EnemyJumperSubCommonLevelParam common<comment="共通設定">;

    FSeek(p + 16);
} EnemyJumperSubLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;

    FSeek(p + 4);
} EnemyJumperSubLevelBand;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   EnemyJumperSubCommonParam commonParam<comment="共通パラメータ">;
    FSeek(p + 20);  EnemyJumperSubLevelParam levelParams[5]<comment="レベル線形補間パラメータ",optimize=false>;
    FSeek(p + 100); EnemyJumperSubLevelBand levelBand[5]<comment="レベル帯別パラメータ",optimize=false>;

    FSeek(p + 120);
} EnemyJumperSubConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyJumperSubConfig enemyJumperSubConfig;
