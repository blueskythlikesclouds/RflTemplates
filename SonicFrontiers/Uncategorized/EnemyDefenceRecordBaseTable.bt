typedef ubyte uint8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 no;

    FSeek(p + 1);
} Record;

typedef struct {
    long pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(64 + str.pointer);
    return "(null)";
}

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Record base;
    FSeek(p + 8);  cstring name;
    FSeek(p + 24); float baseRate;
    FSeek(p + 28); float slashRate;
    FSeek(p + 32); float quickRate;
    FSeek(p + 36); float stunRate;
    FSeek(p + 40); float staggerRate;

    FSeek(p + 48);
} EnemyDefenceRecord;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); EnemyDefenceRecord data[64]<optimize=false>;

    FSeek(p + 3072);
} EnemyDefenceRecordBaseTable;

LittleEndian();

FSeek(64);
EnemyDefenceRecordBaseTable data;
