local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float suckedTime<comment="リング回収までの時間">;
    FSeek(p + 4);  float launchAngle<comment="噴出角度">;
    FSeek(p + 8);  float launchMaxSpeed<comment="噴出最高速度">;
    FSeek(p + 12); float launchMinSpeed<comment="噴出最低速度">;
    FSeek(p + 16); float randomRangeMin<comment="出現地点の幅(最小)">;
    FSeek(p + 20); float randomRangeMax<comment="出現地点の幅(最大)">;
    FSeek(p + 24); float lifeTime<comment="消えるまでの時間(負数でデフォルト)">;

    FSeek(p + 28);
} RingParameter;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 m_maxNumPieces<comment="破片最大生成数. 負の値で最大">;
    FSeek(p + 4);  float gravity<comment="重力加速度">;
    FSeek(p + 8);  float lifeTime<comment="生存時間">;
    FSeek(p + 12); float force<comment="拡散力">;

    FSeek(p + 16);
} DebrisParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  RingParameter ringParam<comment="ドロップリング">;
    FSeek(p + 28); float rigidColliderRadius<comment="剛体コリジョン半径">;
    FSeek(p + 32); float damageColliderRadius<comment="ダメージコリジョン半径">;
    FSeek(p + 36); float battleDistance<comment="戦闘開始距離">;
    FSeek(p + 40); float cyloopHeight<comment="サイループが有効な高さ">;
    FSeek(p + 44); float rotateSpeed<comment="ターゲットを向くときの回転速度">;
    FSeek(p + 48); bool useUniqueDebrisSetting<comment="固有の破片設定を使用するか">;
    FSeek(p + 52); DebrisParameter debris<comment="専用破片設定">;

    FSeek(p + 68);
} EnemyTwisterCommonConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint<comment="体力">;
    FSeek(p + 4);  float attackRate<comment="攻撃倍率">;
    FSeek(p + 8);  uint16 expItemNum<comment="経験値アイテムドロップ数">;
    FSeek(p + 10); uint16 exp<comment="合計経験値">;

    FSeek(p + 12);
} TwisterCommonLevelConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;
    FSeek(p + 4); TwisterCommonLevelConfig common<comment="共通設定">;

    FSeek(p + 16);
} EnemyTwisterLevelConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  EnemyTwisterCommonConfig commonParams<comment="共通パラメータ">;
    FSeek(p + 68); EnemyTwisterLevelConfig levelParams[5]<comment="レベル線形補間パラメータ",optimize=false>;

    FSeek(p + 148);
} EnemyTwisterConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyTwisterConfig enemyTwisterConfig;
