local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef ubyte uint8;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 unlockPoint<comment="スキル解放に必要なポイント">;
    FSeek(p + 1); uint8 addUnlockPoint<comment="スキルレベルに応じた必要ポイント上昇量">;
    FSeek(p + 2); bool present<comment="プレゼントスキルか">;

    FSeek(p + 3);
} SkillParam;

typedef byte sint8;

enum<sint8> Value
{
    Cyloop = 0,
    Smash = 1,
    QuickCyloop = 2,
    AcceleLevel = 3,
    ChargeAttack = 4,
    RecoverySmash = 5,
    AirTrick = 6,
    SonicBoom = 7,
    Crasher = 8,
    LoopKick = 9,
    SpinSlash = 10,
    StompingAttack = 11,
    HomingShot = 12,
    CrossSlash = 13,
    AutoCombo = 14,
    Dummy0 = 15,
    Dummy1 = 16,
    Dummy2 = 17,
    Dummy3 = 18,
    Dummy4 = 19,
    Num = 20,
    NumUsed = 15,
    Invalid = -1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool down<comment="↓">;
    FSeek(p + 1); bool left<comment="←">;
    FSeek(p + 2); bool right<comment="→">;

    FSeek(p + 3);
} SkillLinkSetting;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool enable<comment="有効">;
    FSeek(p + 1); Value skill<comment="スキル">;
    FSeek(p + 2); SkillLinkSetting link<comment="リンク">;

    FSeek(p + 5);
} SkillNodeParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   SkillNodeParam nodeParams[30]<comment="ノード",optimize=false>;
    FSeek(p + 150); sint8 startIndex<comment="開始インデックス">;

    FSeek(p + 151);
} SkillTreeParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  SkillParam skillParams[20]<comment="スキルパラメータ",optimize=false>;
    FSeek(p + 60); SkillTreeParam treeParams<comment="スキルツリー/ソニック">;

    FSeek(p + 211);
} GameSkillParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
GameSkillParameter gameSkillParameter;
