local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef int32 sint32;

enum<sint32> RenderTargetSize
{
    RTSIZE_FULL_SCALE = 0,
    RTSIZE_HALF_SCALE = 1,
    RTSIZE_QUARTER_SCALE = 2,
    RTSIZE_COUNT = 3,
    RTSIZE_INVALID = 3,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="DOFを有効">;
    FSeek(p + 1);  bool useFocusLookAt<comment="LookAt位置でピント">;
    FSeek(p + 4);  float foregroundBokehMaxDepth<comment="前ボケ最大深度(近)">;
    FSeek(p + 8);  float foregroundBokehStartDepth<comment="前ボケ最小深度">;
    FSeek(p + 12); float backgroundBokehStartDepth<comment="後ボケ最小深度">;
    FSeek(p + 16); float backgroundBokehMaxDepth<comment="後ボケ最大深度(遠)">;
    FSeek(p + 20); bool enableCircleDOF<comment="錯乱円を使うか">;
    FSeek(p + 24); float cocMaxRadius<comment="錯乱円の最大半径">;
    FSeek(p + 28); float bokehRadiusScale<comment="ボケの錯乱円のスケール">;
    FSeek(p + 32); sint32 bokehSampleCount<comment="ボケのサンプル数">;
    FSeek(p + 36); float skyFocusDistance<comment="天球のピント距離[0.0だとボケる]">;
    FSeek(p + 40); float bokehBias<comment="MAXボケの比率[0.0だとボケない]">;
    FSeek(p + 44); bool drawFocalPlane<comment="ピントが合う位置の表示">;
    FSeek(p + 48); RenderTargetSize rtScale<comment="解像度スケール">;
    FSeek(p + 52); bool enableSWA<comment="enableSWA">;
    FSeek(p + 56); float swaFocus<comment="swaFocus">;
    FSeek(p + 60); float swaFocusRange<comment="swaFocusRange">;
    FSeek(p + 64); float swaNear<comment="swaNear">;
    FSeek(p + 68); float swaFar<comment="swaFar">;
    FSeek(p + 72); bool enableEnhancedForeBokeh<comment="前ボケを強調する">;
    FSeek(p + 76); float foreBokehScale<comment="前ボケスケール">;
    FSeek(p + 80); float foreBokehMaxLuminance<comment="前ボケ強調時の最大輝度">;

    FSeek(p + 84);
} FxDOFParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 camerapos<comment="カメラの位置">;
    FSeek(p + 16); float lineAlpha<comment="ワイヤーフレームの透明度">;
    FSeek(p + 20); float noiseScale<comment="ゆらぎノイズのスケール">;
    FSeek(p + 24); float noiseSpeed<comment="ゆらぎノイズの変化速度">;
    FSeek(p + 28); float moveWidth<comment="頂点の移動スケール">;
    FSeek(p + 32); FxDOFParameter dofparam<comment="DoFパラメーター">;

    FSeek(p + 128);
} UIWireframeParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
UIWireframeParameter uIWireframeParameter;
