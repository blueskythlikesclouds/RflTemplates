local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float rotateSpeedMin<comment="最少旋回速度">;
    FSeek(p + 4);  float rotateSpeedMax<comment="最大旋回速度">;
    FSeek(p + 8);  float speedMin<comment="旋回速度が最大になる最少速度">;
    FSeek(p + 12); float speedMax<comment="旋回速度が最少になる最大速度.">;
    FSeek(p + 16); float changeTimeIdlePatrolMin<comment="待機/パトロール切り替え最低時間">;
    FSeek(p + 20); float changeTimeIdlePatrolMax<comment="待機/パトロール切り替え最大時間">;
    FSeek(p + 24); float lockonDistance<comment="ロックオン成立距離">;
    FSeek(p + 28); float unlockDistance<comment="ロックオン解除距離">;
    FSeek(p + 32); float distance<comment="カメラ距離">;
    FSeek(p + 36); float minElevation<comment="仰角最小値">;
    FSeek(p + 40); float maxElevation<comment="仰角最大値">;
    FSeek(p + 44); float panningSuspensionK<comment="パンニング遅延のバネ定数(負値でデフォルト値)">;
    FSeek(p + 48); float interiorPanningSuspensionK<comment="近距離パンニング遅延のバネ定数(負値でデフォルト値)">;

    FSeek(p + 52);
} EnemyJumperPatrolConfig;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float distance<comment="カメラ距離">;
    FSeek(p + 4);  float lockOnMinDistance<comment="ロックオン最小有効距離">;
    FSeek(p + 16); vector3 playerOffset<comment="プレイヤーオフセット">;

    FSeek(p + 32);
} EnemyJumperAutoLockonParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float killWaitTime<comment="Killされるまでの待ち時間">;
    FSeek(p + 4);  float colliderRadius<comment="本体円柱コリジョン半径">;
    FSeek(p + 8);  float colliderHeight<comment="本体円柱コリジョン高さ">;
    FSeek(p + 12); float headRadius<comment="本体円柱コリジョン半径">;
    FSeek(p + 16); float headHeight<comment="本体円柱コリジョン高さ">;
    FSeek(p + 20); float damageColliderRadiusOffset<comment="ダメージコリジョンの半径オフセット">;
    FSeek(p + 24); float eyesightDistance<comment="視野距離">;
    FSeek(p + 28); float maxSpeed<comment="最大速度">;
    FSeek(p + 32); float checkBarrierDistance<comment="崖や障害物を検知する距離">;
    FSeek(p + 36); EnemyJumperPatrolConfig patrolConfig<comment="パトロール設定">;
    FSeek(p + 96); EnemyJumperAutoLockonParam lockonCamera<comment="ストンプ後のカメラ">;

    FSeek(p + 128);
} EnemyJumperCommonParam;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint<comment="体力">;
    FSeek(p + 4);  float attackRate<comment="攻撃倍率">;
    FSeek(p + 8);  uint16 expItemNum<comment="経験値アイテムドロップ数">;
    FSeek(p + 10); uint16 exp<comment="合計経験値">;

    FSeek(p + 12);
} EnemyJumperCommonLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;
    FSeek(p + 4); EnemyJumperCommonLevelParam common<comment="共通設定">;

    FSeek(p + 16);
} EnemyJumperLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;

    FSeek(p + 4);
} EnemyJumperLevelBand;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float height<comment="高さ">;
    FSeek(p + 4);  float radius<comment="半径">;
    FSeek(p + 16); vector3 offset<comment="オフセット">;
    FSeek(p + 32); vector3 scale<comment="スケール">;

    FSeek(p + 48);
} CharacterControllerCollision;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float rotateSpeedMin<comment="最少旋回速度">;
    FSeek(p + 4);  float rotateSpeedMax<comment="最大旋回速度">;
    FSeek(p + 8);  float speedMin<comment="旋回速度が最大になる最少速度">;
    FSeek(p + 12); float speedMax<comment="旋回速度が最少になる最大速度.">;

    FSeek(p + 16);
} MovementParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float velocity<comment="初期速度">;
    FSeek(p + 4); float targetCursorMaxDistance<comment="ターゲットカーソルの最大表示距離">;

    FSeek(p + 8);
} SpringPlayer;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float stompingRange<comment="ストンピング有効距離">;
    FSeek(p + 4);  float stompingTotalNum<comment="ストンピング最大回数">;
    FSeek(p + 8);  float interpalTimeFinal<comment="最終攻撃後のインターパル時間">;
    FSeek(p + 12); float range<comment="射程距離">;
    FSeek(p + 16); float riseDistance<comment="ストンピング上昇高度">;
    FSeek(p + 20); float riseTime<comment="ストンピング上昇時間">;
    FSeek(p + 24); float upLoopTime<comment="上昇アニメーション再生時間">;
    FSeek(p + 28); float chaseSpeed<comment="追跡速度">;
    FSeek(p + 32); float speed<comment="踏みつけ速度">;
    FSeek(p + 36); float groundImpactRadius<comment="衝撃波半径">;
    FSeek(p + 40); SpringPlayer springPlayer<comment="プレイヤー跳ね飛ばし">;

    FSeek(p + 48);
} BattleParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   EnemyJumperCommonParam commonParam<comment="共通パラメータ">;
    FSeek(p + 128); EnemyJumperLevelParam levelParams[5]<comment="レベル線形補間パラメータ",optimize=false>;
    FSeek(p + 208); EnemyJumperLevelBand levelBand[5]<comment="レベル帯別パラメータ",optimize=false>;
    FSeek(p + 240); CharacterControllerCollision characterControllerCollision<comment="CharacterControllerコリジョン">;
    FSeek(p + 288); MovementParam movement<comment="移動関連">;
    FSeek(p + 304); BattleParam battleParam<comment="バトル関連">;

    FSeek(p + 352);
} EnemyJumperConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyJumperConfig enemyJumperConfig;
