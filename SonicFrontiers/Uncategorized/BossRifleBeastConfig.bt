local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    ubyte guid[16];
} csetobjectid;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        csetobjectid data[size]<optimize=false>;
        FSeek(p);
    }
} array_csetobjectid;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  array_csetobjectid initPositions<comment="戦闘開始座標・中心座標">;
    FSeek(p + 32); cstring heightTargetNodeName<comment="高さの基準となるノード名[未設定時はオブジェクトの原点]">;
    FSeek(p + 48); float heightMoveSpeed<comment="高さを調整する速度">;
    FSeek(p + 52); float bossToPlayerDistanceMin<comment="プレイヤーとボスの相対距離[最小]">;
    FSeek(p + 56); float bossToPlayerDistanceMax<comment="プレイヤーとボスの相対距離[最大]">;
    FSeek(p + 60); float offsetHeightMin<comment="高さ調整[相対距離最小時]">;
    FSeek(p + 64); float offsetHeightMax<comment="高さ調整[相対距離最大時]">;
    FSeek(p + 68); float areaDistanceMin<comment="ボス移動範囲[最小]">;
    FSeek(p + 72); float areaDistanceMax<comment="ボス移動範囲[最大]">;
    FSeek(p + 76); float playerSpawnDistance<comment="プレイヤー初期出現位置">;
    FSeek(p + 80); float playerRespawnDistance<comment="プレイヤー再出現位置">;
    FSeek(p + 84); float playerRespawnDistance2<comment="プレイヤー再出現位置2">;

    FSeek(p + 88);
} PlayerMoveableRangeParam;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool isUse<comment="使用フラグ">;
    FSeek(p + 1); bool isUsePillar<comment="柱オブジェクト使用フラグ">;
    FSeek(p + 4); float phaseChangeHpRatio<comment="フェーズ切替発生残HP[%]">;

    FSeek(p + 8);
} BossPhaseParam;

typedef byte sint8;

enum<sint8> EaseType
{
    ET_Sin = 0,
    ET_Cubic = 1,
    ET_Quadratic = 2,
};

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float easeTime<comment="補間時間">;
    FSeek(p + 4);  EaseType easeType<comment="補間タイプ">;
    FSeek(p + 8);  cstring mainLookAtNodeName<comment="注視するノード名[未設定時.はオブジェクトの原点]">;
    FSeek(p + 32); vector3 mainLookOffsetPos<comment="注視位置調整">;
    FSeek(p + 48); cstring subLookAtNodeName<comment="サブとして注視するノード名[未設定時はオブジェクトの原点]">;
    FSeek(p + 64); vector3 subLookOffsetPos<comment="サブ注視位置調整">;
    FSeek(p + 80); float distance<comment="距離">;
    FSeek(p + 96); vector3 playerOffsetPos<comment="プレイヤー位置調整">;

    FSeek(p + 112);
} BossLockOnCameraParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   uint32 healthPoint<comment="体力値">;
    FSeek(p + 4);   float stunTime<comment="スタン時間">;
    FSeek(p + 8);   float maxStunPoint[3]<comment="スタン値",optimize=false>;
    FSeek(p + 20);  float maxStaggerPoint[5]<comment="怯み値",optimize=false>;
    FSeek(p + 40);  uint16 exp<comment="経験値">;
    FSeek(p + 48);  PlayerMoveableRangeParam moveRangeParam<comment="範囲設定">;
    FSeek(p + 136); PlayerMoveableRangeParam cyloopDamageMoveRangeParam<comment="サイループ時の範囲設定">;
    FSeek(p + 224); BossPhaseParam phaseParams[8]<comment="バトルフェーズ設定",optimize=false>;
    FSeek(p + 288); BossLockOnCameraParam cameraParam<comment="カメラ設定">;
    FSeek(p + 400); bool isDebugDraw<comment="デバック表示">;
    FSeek(p + 404); uint32 debugDrawPhaseIndex<comment="デバック表示するフェーズ番号">;

    FSeek(p + 416);
} BossStatusConfig;

enum<sint8> GimmickType
{
    GT_A = 0,
    GT_B = 1,
    GT_C = 2,
    GT_D = 3,
    GT_E = 4,
    NUM_GIMMICK_TYPE = 5,
};

enum<sint8> AttackType
{
    AT_A = 0,
    AT_B = 1,
    AT_C = 2,
    AT_D = 3,
    AT_E = 4,
    NUM_ATTACK_TYPE = 5,
};

enum<sint8> BossPillarParam_GimmickType
{
    BossPillarParam_GimmickType_GT_A = 0,
    BossPillarParam_GimmickType_GT_B = 1,
    BossPillarParam_GimmickType_GT_C = 2,
    BossPillarParam_GimmickType_GT_D = 3,
    BossPillarParam_GimmickType_GT_E = 4,
    BossPillarParam_GimmickType_NUM_GIMMICK_TYPE = 5,
};

enum<sint8> BossPillarParam_AttackType
{
    BossPillarParam_AttackType_AT_A = 0,
    BossPillarParam_AttackType_AT_B = 1,
    BossPillarParam_AttackType_AT_C = 2,
    BossPillarParam_AttackType_AT_D = 3,
    BossPillarParam_AttackType_AT_E = 4,
    BossPillarParam_AttackType_NUM_ATTACK_TYPE = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool isUse<comment="使用フラグ">;
    FSeek(p + 4);  float gimmickPhaseTime<comment="ギミック時間位相">;
    FSeek(p + 8);  float attackPhaseTime<comment="アタック時間位相">;
    FSeek(p + 12); bool isUnique<comment="個別指定フラグ[一括指定内容より優先]">;
    FSeek(p + 13); BossPillarParam_GimmickType gimmickType<comment="ギミックタイプ[個別指定時用]">;
    FSeek(p + 16); float gimmickIntervalTime<comment="ギミック再使用待機時間[個別指定時用]">;
    FSeek(p + 20); BossPillarParam_AttackType attackType<comment="アタックタイプ[個別指定時用]">;
    FSeek(p + 24); float attackIntervalTime<comment="アタック再使用待機時間[個別指定時用]">;

    FSeek(p + 28);
} BossPillarParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   GimmickType gimmickTypeAll<comment="ギミックタイプ[一括指定]">;
    FSeek(p + 4);   float gimmickIntervalTimeAll<comment="ギミック再使用待機時間[一括指定]">;
    FSeek(p + 8);   AttackType attackTypeAll<comment="アタックタイプ[一括指定]">;
    FSeek(p + 12);  float attackIntervalTimeAll<comment="アタック再使用待機時間[一括指定]">;
    FSeek(p + 16);  BossPillarParam pillars[32]<comment="個別設定",optimize=false>;
    FSeek(p + 912); cstring spawnPositionName<comment="柱を生成するスケルトンのノード名">;
    FSeek(p + 928); uint32 pillarHealthPoint<comment="柱の体力値">;
    FSeek(p + 932); uint32 pillarBreakDamage<comment="柱破壊時ボス本体ダメージ値">;
    FSeek(p + 936); float pillarBreakStun<comment="柱破壊時ボス本体スタン値">;
    FSeek(p + 940); bool isDebugDraw<comment="デバック表示">;
    FSeek(p + 944); uint32 DebugDrawType<comment="デバック表示切り替え">;

    FSeek(p + 952);
} BossPillarConfig;

typedef int16 sint16;

enum<sint8> CollisionType
{
    CT_SPHERE = 0,
    CT_CAPSULE = 1,
    CT_CYLINDER = 2,
    CT_BOX = 3,
    NUM_COLLISION_TYPE = 4,
};

enum<sint8> ColliderActiveType
{
    Always = 0,
    OnContactActive = 1,
    OnContactInactive = 2,
    OnMotionActive = 3,
    OnMotionInactive = 4,
    Manual = 5,
    NUM_COLLIDER_ACTIVE_TYPE = 6,
};

enum<sint16> ColliderProperty
{
    CpNone = 0,
    CpBattleUse = 1,
    CpBattleUnuse = 2,
    CpRestPoint = 3,
    CpHomingTarget = 4,
    CpPerceive = 5,
    CpDamage = 6,
    CpAttack = 7,
    CpContactActive = 8,
    CpContactInactive = 9,
    CpMotionActive = 10,
    CpMotionInactive = 11,
    CpManual = 12,
    CpUpperSide = 13,
    CpLowerSide = 14,
    CpFrontSide = 15,
    CpBackSide = 16,
    CpLeftSide = 17,
    CpRightSide = 18,
    CpPointA = 19,
    CpPointB = 20,
    CpPointC = 21,
    CpPointD = 22,
    CpCyloopDownUnuse = 23,
    CpDummyDamage = 24,
    CpCable = 25,
    CpTackleHand = 26,
    NUM_COLLIDER_PROPERTY = 27,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  ColliderActiveType type<comment="起動タイプ">;
    FSeek(p + 2);  ColliderProperty propertys[4]<comment="属性",optimize=false>;
    FSeek(p + 16); cstring text<comment="テキスト(接触やモーション中の切り替え時に使用)">;

    FSeek(p + 32);
} BossColliderStatus;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool isUse<comment="使用フラグ">;
    FSeek(p + 2);   sint16 priority<comment="優先度">;
    FSeek(p + 4);   CollisionType type<comment="形状">;
    FSeek(p + 8);   cstring attachNodeName<comment="ノード名">;
    FSeek(p + 24);  cstring name<comment="コリジョン名">;
    FSeek(p + 40);  BossColliderStatus status<comment="コリジョン設定">;
    FSeek(p + 80);  vector3 size<comment="サイズ">;
    FSeek(p + 96);  vector3 offset<comment="位置オフセット">;
    FSeek(p + 112); vector3 rotation<comment="回転">;

    FSeek(p + 128);
} BossPerceiveCollisionParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    BossPerceiveCollisionParam perceiveCollisions[64]<comment="コリジョン",optimize=false>;
    FSeek(p + 8192); bool isDebugDraw<comment="デバック表示">;

    FSeek(p + 8208);
} BossPerceivePartsWithCollisionConfig;

enum<sint8> PointType
{
    PT_HOMINGPOINT = 0,
    PT_HEROSAGE = 1,
    PT_MINIONGENERATOR = 2,
    PT_TRIGGER = 3,
    PT_ANCHOR = 4,
    PT_DAMAGEPOINT = 5,
    PT_STICK = 6,
    PT_DAMAGEEFFECT = 7,
    PT_DASHCIRCLE = 8,
    NUM_POINT_TYPE = 9,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  BossColliderStatus status<comment="コリジョン設定">;
    FSeek(p + 32); float distance<comment="有効距離">;
    FSeek(p + 36); float nextSearchDistance<comment="連続ホーミング可能距離">;

    FSeek(p + 40);
} BossHomingPointParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 num<comment="生成個数">;
    FSeek(p + 4);  float interval<comment="生成間隔">;
    FSeek(p + 8);  float liveTime<comment="生存時間">;
    FSeek(p + 12); float waitTime<comment="待ち時間">;

    FSeek(p + 16);
} BossMinionParam;

enum<sint8> Shape
{
    SHAPE_BOX = 0,
    SHAPE_SPHERE = 1,
    SHAPE_CYLINDER = 2,
    SHAPE_CAPSULE = 3,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Shape ShapeType<comment="形状">;
    FSeek(p + 4);  float CollisionWidth<comment="width">;
    FSeek(p + 8);  float CollisionHeight<comment="height">;
    FSeek(p + 12); float CollisionDepth<comment="depth">;

    FSeek(p + 16);
} BossTrigerParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float phaseTime<comment="時間位相">;

    FSeek(p + 4);
} BossStickParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool isCyloopDownUnuse<comment="サイループによるダウン時は未使用">;
    FSeek(p + 8); cstring text<comment="コリジョン名(識別に使用)">;

    FSeek(p + 24);
} BossDamagePointParam;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 focusGeometryIndex<comment="フォーカス部位指定[ジオメトリ番号]">;
    FSeek(p + 4);  sint32 focusTriangleIndex<comment="フォーカスポリゴン指定[トライアングル番号]">;
    FSeek(p + 8);  float sizeScale<comment="サイズスケール">;
    FSeek(p + 12); float impulseSpeed<comment="打ち出し速度">;
    FSeek(p + 16); float ocTime<comment="操作不能時間">;
    FSeek(p + 20); float slowRateBoss<comment="ボススロー比率">;
    FSeek(p + 24); float slowRatePlayer<comment="プレイヤースロー比率">;
    FSeek(p + 28); float slowTime<comment="スロー時間">;
    FSeek(p + 32); float slowEaseInTime<comment="スロー補間開始時間">;
    FSeek(p + 36); float slowEaseOutTime<comment="スロー補間終了時間">;

    FSeek(p + 40);
} BossDashCirclPointParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool isUse<comment="使用フラグ">;
    FSeek(p + 4);   uint32 geometryIndex<comment="部位指定[ジオメトリ番号]">;
    FSeek(p + 8);   uint32 triangleIndex<comment="ポリゴン指定[トライアングル番号]">;
    FSeek(p + 12);  PointType type<comment="種別">;
    FSeek(p + 16);  BossHomingPointParam homingPoint<comment="ホーミング可能ポイント設定">;
    FSeek(p + 56);  BossMinionParam minionParam<comment="ミニオン設定">;
    FSeek(p + 72);  BossTrigerParam trigger<comment="トリガー設定">;
    FSeek(p + 88);  BossStickParam stickParam<comment="障害物設定">;
    FSeek(p + 96);  BossDamagePointParam damagePoint<comment="攻撃ポイント設定">;
    FSeek(p + 120); BossDashCirclPointParam dashCirclPoint<comment="ダッシュサークルポイント設定">;
    FSeek(p + 160); sint32 linkNums[5]<comment="リンクするメッシュフレーム番号",optimize=false>;
    FSeek(p + 192); vector3 offsetPos<comment="位置調整">;
    FSeek(p + 208); vector3 offsetRot<comment="回転調整">;

    FSeek(p + 224);
} BossMeshFrameParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     BossMeshFrameParam meshShapeKeyFrames[256]<comment="メッシュフレーム",optimize=false>;
    FSeek(p + 57344); bool isDebugDraw<comment="デバック表示">;
    FSeek(p + 57345); bool isDebugDrawPoint<comment="各種ポイントのデバック表示">;
    FSeek(p + 57346); bool isDebugDrawMesh<comment="メッシュコリジョンのデバック表示">;
    FSeek(p + 57347); bool isDebugDrawMeshIndivid<comment="メッシュ番号デバック表示">;
    FSeek(p + 57348); float debugDrawMeshTriangleDistance<comment="メッシュ番号表示距離">;
    FSeek(p + 57352); uint32 debugDrawMeshTriangleNum<comment="メッシュ番号表示上限">;

    FSeek(p + 57360);
} BossMeshFrameConfig;

enum<sint8> BossAttackCollisionParam_AttackType
{
    AT_NONE = 0,
    AT_BLOWOFF = 1,
    AT_SLAMDOWNWARD = 2,
    AT_KILLING = 3,
    AT_NOTPARRY = 4,
    AT_NOTDAMAGE = 5,
    AT_NOTDAMAGETRIGGER = 6,
    BossAttackCollisionParam_AttackType_NUM_ATTACK_TYPE = 7,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool isUse<comment="使用フラグ">;
    FSeek(p + 8);  cstring attachNodeName<comment="ノード名">;
    FSeek(p + 24); float damageVelocityRaito<comment="移動量ベクトル係数">;
    FSeek(p + 28); BossAttackCollisionParam_AttackType types[4]<comment="攻撃設定",optimize=false>;
    FSeek(p + 32); BossColliderStatus status<comment="コリジョン設定">;
    FSeek(p + 64); float size<comment="サイズ">;
    FSeek(p + 80); vector3 offset<comment="位置オフセット">;
    FSeek(p + 96); cstring parryCounterTargetCollisionName<comment="カウンター対象のコリジョン名[スパソニ用ホーミングコリジョン]">;

    FSeek(p + 112);
} BossAttackCollisionParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    BossAttackCollisionParam attackCollisions[64]<comment="コリジョン",optimize=false>;
    FSeek(p + 7168); bool isDebugDraw<comment="デバック表示">;

    FSeek(p + 7184);
} BossAttackCollisionConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool isUse<comment="使用フラグ">;
    FSeek(p + 8);  cstring attachNodeName<comment="ノード名">;
    FSeek(p + 24); cstring name<comment="コリジョン名">;
    FSeek(p + 40); float size<comment="サイズ">;
    FSeek(p + 48); vector3 offset<comment="位置オフセット">;
    FSeek(p + 64); vector3 rotation<comment="回転">;
    FSeek(p + 80); bool isParryActive<comment="パリィ成功時のみ有効">;
    FSeek(p + 84); float cyloopRadius<comment="サイループ半径[パリィ成功時]">;
    FSeek(p + 88); bool onlyRigidBody<comment="剛体のみ">;

    FSeek(p + 96);
} BossBattlePhaseCollisionParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    BossBattlePhaseCollisionParam battleCollisions[16]<comment="コリジョン",optimize=false>;
    FSeek(p + 1536); bool isDebugDraw<comment="デバック表示">;

    FSeek(p + 1552);
} BossBattlePhaseCollisionConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 ringNumQuickCyloopUp<comment="枚数(Qサイループ上り)">;
    FSeek(p + 4);  uint32 ringNumQuickCyloopDown<comment="枚数(Qサイループ下り)">;
    FSeek(p + 8);  uint32 ringNumSonicSpecial<comment="枚数(ソニック必殺技)">;
    FSeek(p + 12); float ringSpawnDistance<comment="発生距離">;
    FSeek(p + 16); float ringSuckedVelocity<comment="発生時のランダム初速">;

    FSeek(p + 20);
} BossDropRingConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     BossStatusConfig status<comment="ステータス">;
    FSeek(p + 416);   BossPillarConfig pillar<comment="柱オブジェクト配置設定">;
    FSeek(p + 1376);  BossPerceivePartsWithCollisionConfig perceivPartsWithCollision<comment="プレイヤー検知設定">;
    FSeek(p + 9584);  BossMeshFrameConfig meshShapeKeyFrame<comment="メッシュフレーム設定">;
    FSeek(p + 66944); BossAttackCollisionConfig attackCollision<comment="攻撃設定">;
    FSeek(p + 74128); BossBattlePhaseCollisionConfig battleCollision<comment="スパソニ戦用ホーミングポイント設定">;
    FSeek(p + 75680); BossDropRingConfig dropRing<comment="リング放出">;

    FSeek(p + 75712);
} BossBaseConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float coolTime<comment="再使用時間">;
    FSeek(p + 4);  float initCoolTime<comment="初回使用制限時間">;
    FSeek(p + 8);  float cableDamege<comment="ケーブル接続時のダメージ倍率">;
    FSeek(p + 12); float cableRecoveryTime<comment="ケーブル接続時の回復するまでの時間">;
    FSeek(p + 16); float cableRecovering<comment="ケーブル接続時の回復量">;
    FSeek(p + 20); uint16 cableLowestHp<comment="ケーブル接続時の最低HP">;
    FSeek(p + 24); float changePatternHP<comment="攻撃パターン変更HP">;
    FSeek(p + 28); float changeHP<comment="フェイズ変更HP">;

    FSeek(p + 32);
} BossRifleBeastPhaseAttackActionParam;

enum<sint8> AtackType
{
    AT_HIMING00 = 0,
    AT_HIMING01 = 1,
    AT_HIMING02 = 2,
    AT_HIMING03 = 3,
    AT_HIMING04 = 4,
    AT_HIMING05 = 5,
    AT_HIMING06 = 6,
    AT_HIMING07 = 7,
    AT_HIMING08 = 8,
    AT_HIMING09 = 9,
    AT_CROW_L = 10,
    AT_CROW_R = 11,
    AT_TACKLE = 12,
    NUM_ACTION_TYPE = 13,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  AtackType attackPattern[10]<comment="攻撃の組み合わせ番号",optimize=false>;
    FSeek(p + 12); sint32 attackNum<comment="攻撃の数">;
    FSeek(p + 16); bool isUse<comment="抽選に使用するか">;

    FSeek(p + 20);
} BossRifleBeastBattleAttackPattern;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float angleX<comment="突き刺さり角度[X軸]">;
    FSeek(p + 4);  float angleY<comment="突き刺さり角度[Y軸]">;
    FSeek(p + 8);  float angleZ<comment="突き刺さり角度[Z軸]">;
    FSeek(p + 16); vector3 endPosition<comment="突き刺さり位置[ボス基準]">;
    FSeek(p + 32); vector3 collOffset<comment="ホーミングコリジョンオフセット突き刺さり前[銃基準]">;
    FSeek(p + 48); vector3 collEndOffset<comment="ホーミングコリジョンオフセット突き刺さり後[銃基準]">;
    FSeek(p + 64); float collSize<comment="ホーミングコリジョン半径">;

    FSeek(p + 80);
} BossRifleBeastBattleDownRifle;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float waitTime<comment="ダウンしている時間">;
    FSeek(p + 4);  uint16 lowerHP<comment="それ以下にならないHP">;
    FSeek(p + 8);  float fase4DownTime<comment="フェイズ4でのダウン時間">;
    FSeek(p + 12); bool isPlayerFixHeight<comment="プレイヤー高度固定を有効化">;
    FSeek(p + 16); float playerHeight<comment="プレイヤー高度">;
    FSeek(p + 32); BossRifleBeastBattleDownRifle rifle<comment="銃単体設定">;

    FSeek(p + 112);
} BossRifleBeastBattleDownState;

enum<sint8> ArmType
{
    AL = 0,
    BL = 1,
    C = 2,
    BR = 3,
    AR = 4,
    ArmType_NUM_ACTION_TYPE = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float waitTime<comment="次の弾を撃つまでの待機時間 連続発射の場合は使用不可">;
    FSeek(p + 4);  ArmType armNum<comment="発射する腕">;
    FSeek(p + 5);  bool isContinuousFire<comment="次の弾を連続で発射するか">;
    FSeek(p + 8);  float plusSpeed<comment="プラスする弾の速度">;
    FSeek(p + 12); bool useSpecialCamera<comment="パリィ時に特別なカメラを使用するか">;
    FSeek(p + 13); bool useUpMotion<comment="モーションの再生速度を上げるか">;

    FSeek(p + 16);
} BossRifleBeastBattleAttackHomingLaserBase;

enum<sint8> CameraType
{
    CameraPatern0 = 0,
    CameraPatern1 = 1,
    CameraPatern2 = 2,
    CameraPatern3 = 3,
    CameraPatern4 = 4,
    CameraType_NUM_ACTION_TYPE = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   BossRifleBeastBattleAttackHomingLaserBase patterns[20]<comment="弾の挙動",optimize=false>;
    FSeek(p + 320); sint32 laserNum<comment="発射する弾の数">;
    FSeek(p + 324); CameraType cameraPatern<comment="カメラの指定">;
    FSeek(p + 328); float endCamera<comment="カメラ終了時間">;
    FSeek(p + 332); float delayCamera<comment="カメラ先行開始時間">;

    FSeek(p + 336);
} BossRifleBeastBattleAttackHomingLaserPattern;

enum<sint8> BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType
{
    BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType_CameraPatern0 = 0,
    BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType_CameraPatern1 = 1,
    BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType_CameraPatern2 = 2,
    BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType_CameraPatern3 = 3,
    BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType_CameraPatern4 = 4,
    BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType_NUM_ACTION_TYPE = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   BossRifleBeastBattleAttackHomingLaserBase patterns[20]<comment="弾の挙動",optimize=false>;
    FSeek(p + 320); uint16 Num<comment="繰り返し回数">;
    FSeek(p + 324); sint32 laserNum<comment="発射する弾の数">;
    FSeek(p + 328); float endTime<comment="最後の弾当たった後イベントに入るまでの待機時間">;
    FSeek(p + 332); BossRifleBeastBattleFirstAttackHomingLaserPattern_CameraType cameraPatern<comment="カメラの指定">;
    FSeek(p + 336); float endCamera<comment="カメラ終了時間">;
    FSeek(p + 340); float delayCamera<comment="カメラ先行開始時間">;

    FSeek(p + 344);
} BossRifleBeastBattleFirstAttackHomingLaserPattern;

enum<sint8> BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType
{
    BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType_CameraPatern0 = 0,
    BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType_CameraPatern1 = 1,
    BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType_CameraPatern2 = 2,
    BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType_CameraPatern3 = 3,
    BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType_CameraPatern4 = 4,
    BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType_NUM_ACTION_TYPE = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   BossRifleBeastBattleAttackHomingLaserBase patterns[8]<comment="弾の挙動",optimize=false>;
    FSeek(p + 128); uint16 Num<comment="繰り返し回数">;
    FSeek(p + 132); sint32 laserNum<comment="発射する弾の数">;
    FSeek(p + 136); BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern_CameraType cameraPatern<comment="カメラの指定">;
    FSeek(p + 140); float endCamera<comment="カメラ終了時間">;
    FSeek(p + 144); float delayCamera<comment="カメラ先行開始時間">;

    FSeek(p + 148);
} BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float angleSide<comment="左右の発射角度">;
    FSeek(p + 4);  float angleFront<comment="前後の発射角度">;
    FSeek(p + 8);  float upLine<comment="山なり具合">;
    FSeek(p + 12); float linePos<comment="山になる位置">;

    FSeek(p + 16);
} BossRifleBeastBattleArmSetting;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float radius<comment="弾の当たり判定の大きさ">;
    FSeek(p + 4);   float speed<comment="弾の速度">;
    FSeek(p + 8);   sint32 EasyDamage<comment="イージーでの弾を食らった時のダメージ.">;
    FSeek(p + 12);  sint32 NormalDamage<comment="ノーマルでの弾を食らった時のダメージ.">;
    FSeek(p + 16);  sint32 HardDamage<comment="ハードでの弾を食らった時のダメージ.">;
    FSeek(p + 20);  sint32 VeryHardDamage<comment="ベリーハードでの弾を食らった時のダメージ.">;
    FSeek(p + 24);  sint32 EnemyDamage<comment="敵へのダメージの値.">;
    FSeek(p + 28);  float velocity<comment="初速">;
    FSeek(p + 32);  float velocityKeepTime<comment="吹き飛ばし持続時間">;
    FSeek(p + 36);  float controlTime<comment="操作不能時間">;
    FSeek(p + 40);  sint32 spritBomb<comment="元気玉被弾時にセットするリング枚数">;
    FSeek(p + 44);  float homingRatio<comment="ホーミング性能 最大[100]">;
    FSeek(p + 48);  BossRifleBeastBattleArmSetting armSet[5]<comment="腕毎のホーミングレーザー設定",optimize=false>;
    FSeek(p + 128); float motionSeed<comment="モーションの再生速度">;

    FSeek(p + 132);
} BossRifleBeastBattleAttackHomingLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); BossRifleBeastBattleArmSetting armSet[5]<comment="腕毎のホーミングレーザー設定",optimize=false>;

    FSeek(p + 80);
} BossRifleBeastBattleCyloopAttackHomingLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 camLookAtOffset<comment="カメラ注視点オフセット(ボス原点)">;
    FSeek(p + 16); vector3 camEyeOffset<comment="カメラ位置オフセット(ボス原点)">;
    FSeek(p + 32); float camFovy<comment="カメラ画角">;
    FSeek(p + 36); float camEaseInTime<comment="カメラ開始補間時間">;
    FSeek(p + 40); float camEaseOutTime<comment="カメラ終了補間時間">;

    FSeek(p + 48);
} RifleBeastClawCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float useDistanceMin<comment="距離[最小]">;
    FSeek(p + 4);  float useDistanceMax<comment="距離[最大]">;
    FSeek(p + 8);  float useHeightMin<comment="高度[最小]">;
    FSeek(p + 12); float useHeightMax<comment="高度[最大]">;
    FSeek(p + 16); float useAngleMin<comment="角度[最小]">;
    FSeek(p + 20); float useAngleMax<comment="角度[最大]">;
    FSeek(p + 24); float useAbsAngleOver<comment="正面からの最小角度">;
    FSeek(p + 28); float useAreaOver<comment="中央からの距離[0は無効]">;

    FSeek(p + 32);
} RifleBeastClawRange;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float QTEStunTime<comment="QTE後のパリーの時間">;
    FSeek(p + 4);   BossRifleBeastBattleAttackHomingLaserPattern laserPattern<comment="ホーミングレーザーパターン">;
    FSeek(p + 340); float FirstShot<comment="最初のレーザーを撃つまでの待機時間">;
    FSeek(p + 344); float IntervalShot<comment="再度ホーミングレーザーを撃つまでの待機時間">;
    FSeek(p + 352); vector3 QTEPlayerPos<comment="QTE成功時のプレイヤーの位置">;

    FSeek(p + 368);
} RifleBeastClawQTE;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   RifleBeastClawCamera camera[2]<comment="カメラ設定",optimize=false>;
    FSeek(p + 96);  RifleBeastClawRange range<comment="攻撃範囲設定">;
    FSeek(p + 128); float waitTime<comment="パリィ成功後ひるみ時間">;
    FSeek(p + 132); float damageWaitTime<comment="パリィ失敗時の次の攻撃までの待機時間">;
    FSeek(p + 144); vector3 playerPos[2]<comment="攻撃時プレイヤー固定位置[ボス基準]",optimize=false>;
    FSeek(p + 176); float stateWaitTime<comment="パリィ成功時のステート移動の待機時間">;
    FSeek(p + 180); bool useSlow<comment="パリィしたときスローにするか">;
    FSeek(p + 192); RifleBeastClawQTE QTEParam<comment="QTE後のパラメーター">;

    FSeek(p + 560);
} BossRifleBeastBattleAttackClaw;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 camLookAtOffset<comment="カメラ注視点オフセット(スパソニ原点)">;
    FSeek(p + 16); vector3 camEyeOffset<comment="カメラ位置オフセット(スパソニ原点)">;
    FSeek(p + 32); float camFovy<comment="カメラ画角">;
    FSeek(p + 36); float camEaseInTime<comment="カメラ開始補間時間">;
    FSeek(p + 40); float camEaseOutTime<comment="カメラ終了補間時間">;

    FSeek(p + 48);
} RifleBeastTackleCamera;

typedef ubyte uint8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enabled<comment="カメラ振動を有効にするか">;
    FSeek(p + 4);  float waitTime<comment="カメラ振動待機時間">;
    FSeek(p + 8);  float magnitude<comment="振動の大きさ">;
    FSeek(p + 12); float shakeTime<comment="振動時間">;
    FSeek(p + 16); float attnRatio<comment="振動の減衰率[残り時間に応じて小さくなる割合]">;
    FSeek(p + 20); uint8 freq<comment="周波数[1秒間に何回振動するか]">;

    FSeek(p + 24);
} BossRifleBeastBattleCyloopCameraShake;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring nodeName<comment="注視するノード名[未設定時はオブジェクトの原点]">;
    FSeek(p + 16); float fovyDeg<comment="画角">;
    FSeek(p + 20); float rollDeg<comment="姿勢">;
    FSeek(p + 32); vector3 targetOffset<comment="注視点位置オフセット[ノード位置基準]">;
    FSeek(p + 48); vector3 cameraOffset<comment="カメラ位置オフセット[プレイヤー位置基準]">;
    FSeek(p + 64); float playTime<comment="カメラ維持時間">;
    FSeek(p + 68); float easeInTime<comment="開始時補間時間">;
    FSeek(p + 72); float easeOutTime<comment="終了時補間時間">;

    FSeek(p + 80);
} BossRifleBeastBattleTackleCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float scale<comment="スロー倍率">;
    FSeek(p + 4);  float time<comment="スロー時間">;
    FSeek(p + 8);  float easeOutTime<comment="スロー終了補間時間">;
    FSeek(p + 12); float delayTime<comment="遅延時間">;
    FSeek(p + 16); bool cameraSlow<comment="カメラもスローに含める？">;

    FSeek(p + 20);
} BossRifleBeastParrySlowParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   RifleBeastTackleCamera barrierCamera<comment="バリアダメージ用カメラ設定">;
    FSeek(p + 48);  RifleBeastTackleCamera behindCamera<comment="うしろ周り用カメラ設定">;
    FSeek(p + 96);  float cameraDirection<comment="敵からどれだけ離れた位置にカメラを置くか（仕様変更前と同じカメラ再現のための物）[最大100]">;
    FSeek(p + 100); float cameraHight<comment="地上からのカメラの高さ">;
    FSeek(p + 104); sint32 easyBarrierHP<comment="イージーでのバリアのHP">;
    FSeek(p + 108); sint32 normalBarrierHP<comment="ノーマルでのバリアのHP">;
    FSeek(p + 112); sint32 hardBarrierHP<comment="ハードでのバリアのHP">;
    FSeek(p + 116); sint32 veryHardBarrierHP<comment="ベリーハードでのバリアのHP">;
    FSeek(p + 120); sint32 tackleDamage<comment="タックルのダメージ">;
    FSeek(p + 124); float parryDistance<comment="パリィ後のプレイヤーの距離">;
    FSeek(p + 128); float waitTime<comment="パリィ成功後ひるみ時間">;
    FSeek(p + 132); float damageWaitTime<comment="パリィ失敗時の次の攻撃までの待機時間">;
    FSeek(p + 144); vector3 tackleColliderOffset<comment="コライダーのオフセット[ボス原点]">;
    FSeek(p + 160); vector3 tackleColliderSize<comment="コライダーの大きさ">;
    FSeek(p + 176); BossRifleBeastBattleCyloopCameraShake cameraShake<comment="バリア攻撃時のカメラ振動">;
    FSeek(p + 200); sint32 drummingNum[10]<comment="体当たり時のドラミング回数",optimize=false>;
    FSeek(p + 240); vector3 playerPos<comment="開始時のプレイヤーワープ位置[ボス原点]">;
    FSeek(p + 256); float drummingTime<comment="ドラミングの継続時間">;
    FSeek(p + 260); float playerHoldTime<comment="プレイヤーの操作不能時間">;
    FSeek(p + 272); BossRifleBeastBattleTackleCamera playerCamera<comment="肩越しカメラ">;
    FSeek(p + 352); BossRifleBeastBattleTackleCamera playerCamera2<comment="肩越しカメラ2">;
    FSeek(p + 432); vector3 BehindPos<comment="回り込む位置「ボス原点」">;
    FSeek(p + 448); BossRifleBeastParrySlowParam behindSetting<comment="回り込み時のスロー設定">;
    FSeek(p + 468); float behindHoldTime<comment="回り込み後のホールド時間">;

    FSeek(p + 480);
} BossRifleBeastBattleTackle;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float distance<comment="距離">;
    FSeek(p + 4);  float elevation<comment="角度">;
    FSeek(p + 8);  float playerHeight<comment="高さ調整">;
    FSeek(p + 12); float easeInTime<comment="補間時間[開始時]">;
    FSeek(p + 16); float easeOutTime<comment="補間時間[終了時]">;
    FSeek(p + 20); float changeParamDistanceMin<comment="各パラメータ加算距離[最小]">;
    FSeek(p + 24); float changeParamDistanceMax<comment="各パラメータ加算距離[最大]">;
    FSeek(p + 28); float addDistance<comment="加算距離">;
    FSeek(p + 32); float addElevation<comment="加算角度">;
    FSeek(p + 36); float addPlayerHeight<comment="加算高さ調整">;

    FSeek(p + 40);
} BossRifleBeastBattleZoomCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   BossRifleBeastBattleZoomCamera normalCamera[6]<comment="各種設定[通常時]",optimize=false>;
    FSeek(p + 240); BossRifleBeastBattleZoomCamera homingCamera[5]<comment="各種設定[ホーミングレーザー時]",optimize=false>;

    FSeek(p + 440);
} BossRifleBeastBattleCameraParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float ClosedAreaRadius<comment="戦闘エリアの大きさ">;
    FSeek(p + 4);  float ClosedAreaHeght<comment="戦闘エリア制限のコライダーの高さ">;
    FSeek(p + 8);  float SmashDamageRatio<comment="ソニック新必殺技与ダメ(最大HP比)">;
    FSeek(p + 12); float InitPlayerHeight<comment="イベント後のソニックの高さ">;
    FSeek(p + 16); float RotationStartAngle<comment="小回転開始角度">;
    FSeek(p + 20); float RotationStartAngleMiddle<comment="中回転開始角度">;
    FSeek(p + 24); float RotationStartAngleLarge<comment="大回転開始角度">;
    FSeek(p + 28); float RotationWaitTime<comment="回転待機時間">;
    FSeek(p + 32); float RotationAngle<comment="回転待機時間中でも一定角度で回転する角度">;
    FSeek(p + 36); sint32 FirstMiniHP<comment="スパソニ1の時のボスの最小HP">;
    FSeek(p + 40); float FirstDamageRate<comment="スパソニ1の時のボスのダメージ倍率">;

    FSeek(p + 44);
} BossRifleBeastBattleState;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring nodeName<comment="注視するノード名[未設定時はオブジェクトの原点]">;
    FSeek(p + 16); float fovyDeg<comment="画角">;
    FSeek(p + 20); float rollDeg<comment="姿勢">;
    FSeek(p + 32); vector3 targetOffset<comment="注視点位置オフセット[ノード位置基準]">;
    FSeek(p + 48); vector3 cameraOffset<comment="カメラ位置オフセット[ノード位置基準]">;
    FSeek(p + 64); float delayTime<comment="開始時遅延">;
    FSeek(p + 68); float playTime<comment="カメラ維持時間">;
    FSeek(p + 72); float easeInTime<comment="開始時補間時間">;
    FSeek(p + 76); float easeOutTime<comment="終了時補間時間">;

    FSeek(p + 80);
} BossRifleBeastBattleCyloopFocusFrameCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 targetOffset<comment="注視点位置オフセット[ボス基準]">;
    FSeek(p + 16); vector3 cameraOffset<comment="カメラ位置オフセット[ボス基準]">;
    FSeek(p + 32); float fovyDeg<comment="画角">;
    FSeek(p + 36); float rollDeg<comment="姿勢">;
    FSeek(p + 40); float easeInTime<comment="開始補間時間">;
    FSeek(p + 44); float easeOutTime<comment="終了補間時間">;

    FSeek(p + 48);
} BossRifleBeastBattleCyloopCameraFixedCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   BossRifleBeastBattleCyloopFocusFrameCamera cameraFocus<comment="開始演出カメラ">;
    FSeek(p + 80);  BossRifleBeastBattleCyloopCameraFixedCamera cameraFixed<comment="プレス時固定カメラ">;
    FSeek(p + 128); BossRifleBeastBattleCyloopCameraShake cameraShakePress<comment="プレス時カメラ振動">;

    FSeek(p + 160);
} BossRifleBeastBattleCyloopCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 camLookAtOffset<comment="カメラ注視点オフセット(ソニック原点)">;
    FSeek(p + 16); vector3 camEyeOffset<comment="カメラ位置オフセット(ソニック原点)">;
    FSeek(p + 32); float camFovy<comment="カメラ画角">;
    FSeek(p + 36); float camEaseInTime<comment="カメラ開始補間時間">;
    FSeek(p + 40); float camEaseOutTime<comment="カメラ終了補間時間">;

    FSeek(p + 48);
} BossRifleBeastBattleCyloopLaserCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 toptOffset<comment="上エフェクトのオフセット[ボス基準]">;
    FSeek(p + 16); vector3 bottomOffset<comment="下エフェクトのオフセット[ボス基準]">;

    FSeek(p + 32);
} BossRifleBeastBattleCyloopEffectPos;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float restraintTime<comment="拘束時間">;
    FSeek(p + 4);   float pressDamageRatio<comment="プレス時与ダメ[最大HP比]">;
    FSeek(p + 8);   float playerHeight<comment="プレイヤー高度">;
    FSeek(p + 12);  float beginPressDelay<comment="プレス開始遅延">;
    FSeek(p + 16);  float blowAwayCameraTime<comment="カウンター攻撃吹き飛び時カメラ維持時間">;
    FSeek(p + 20);  sint32 counterDamage<comment="カウンター攻撃開始ダメージ値">;
    FSeek(p + 32);  vector3 warpOffset<comment="開始時プレイヤーワープ位置[ボス基準]">;
    FSeek(p + 48);  bool isUsePressVibration<comment="プレス時コントローラー振動を使用するか">;
    FSeek(p + 56);  cstring pressVibrationName<comment="プレス時コントローラ振動名">;
    FSeek(p + 80);  vector3 pressPlayerPos<comment="プレス時プレイヤー位置[ボス基準]">;
    FSeek(p + 96);  BossRifleBeastBattleCyloopCamera camera<comment="カメラ">;
    FSeek(p + 256); float StartBlowTime<comment="カウンター開始時に吹き飛ばすカメラの持続時間">;
    FSeek(p + 260); float LaserRadius<comment="レーザーの当たり判定の太さ">;
    FSeek(p + 264); float LaserHight<comment="レーザーの当たり判定の長さ">;
    FSeek(p + 268); float keepCameraTime<comment="吹き飛ばしカメラの持続時間">;
    FSeek(p + 272); vector3 cunterWarpOffset<comment="カウンター時のプレイヤーワープ位置[ボス基準]">;
    FSeek(p + 288); BossRifleBeastBattleCyloopLaserCamera laserCamera<comment="カウンター用カメラ">;
    FSeek(p + 336); BossRifleBeastBattleCyloopEffectPos EffectPos<comment="エフェクトの場所">;
    FSeek(p + 368); float waitTime<comment="カウンター成功時の待機時間">;
    FSeek(p + 372); BossRifleBeastParrySlowParam slowSetting<comment="押しつぶしスロー設定">;
    FSeek(p + 392); float effectSize<comment="ブラーエフェクトのカメラからの距離">;

    FSeek(p + 400);
} BossRifleBeastBattleCyloop;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float blowAwayTime<comment="レーザー吹き飛び時カメラ維持時間">;
    FSeek(p + 16);  BossRifleBeastBattleCyloopFocusFrameCamera blowUpCamera<comment="打ち上げ時カメラ">;
    FSeek(p + 96);  BossRifleBeastBattleCyloopCameraFixedCamera cameraFixed<comment="プレス時固定カメラ">;
    FSeek(p + 144); BossRifleBeastBattleCyloopCameraShake cameraShakePress<comment="プレス時カメラ振動">;
    FSeek(p + 176); BossRifleBeastBattleCyloopFocusFrameCamera landingCamera<comment="落下時カメラ">;
    FSeek(p + 256); BossRifleBeastBattleCyloopCameraShake cameraShakeLanding<comment="落下時カメラ振動">;

    FSeek(p + 288);
} BossRifleBeastBattleCyloopBlowOffCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float changeDelay<comment="レーザー開始遅延[プレイヤー上昇完了後から]">;
    FSeek(p + 4);  float speed<comment="弾の速度">;
    FSeek(p + 8);  float blowOffPower<comment="吹き飛ばし力">;
    FSeek(p + 12); float blowOffUpRate<comment="吹き飛ばし力[上方に飛ぶ比率]">;
    FSeek(p + 16); float controlTime<comment="操作不能時間">;
    FSeek(p + 20); float slowScale<comment="接触時スロー演出速度倍率">;
    FSeek(p + 24); float slowTime<comment="接触時スロー演出時間">;
    FSeek(p + 28); float slowEaseOutTime<comment="接触時スロー演出補間時間">;
    FSeek(p + 32); BossRifleBeastBattleAttackHomingLaserPattern laserPattern<comment="ホーミングレーザーパターン">;

    FSeek(p + 368);
} BossRifleBeastBattleCyloopBlowOffLaser;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float restraintTime<comment="拘束時間[プレイヤー移動完了後から]">;
    FSeek(p + 4);   float pressDamageRatio<comment="プレス時与ダメ[最大HP比]">;
    FSeek(p + 8);   float playerHeight<comment="プレイヤー高度">;
    FSeek(p + 12);  float floatHeight<comment="浮上高度">;
    FSeek(p + 16);  float floatHeightChangeDelay<comment="浮上開始遅延">;
    FSeek(p + 20);  float floatHeightChangeTime<comment="浮上高度変化時間">;
    FSeek(p + 24);  float playerMoveTime<comment="浮上時プレイヤー移動時間">;
    FSeek(p + 28);  float playerCurveDistance<comment="浮上時プレイヤー移動時カーブ度合">;
    FSeek(p + 32);  vector3 playerPosFixedOffset<comment="浮上時プレイヤー移動後座標[ボス基準]">;
    FSeek(p + 48);  vector3 pressPlayerPos<comment="プレス時プレイヤー位置[ボス基準]">;
    FSeek(p + 64);  bool isUsePressVibration<comment="プレス時コントローラー振動を使用するか">;
    FSeek(p + 72);  cstring pressVibrationName<comment="プレス時コントローラ振動名">;
    FSeek(p + 88);  bool isUseLandingVibration<comment="落下時コントローラー振動を使用するか">;
    FSeek(p + 96);  cstring landingVibrationName<comment="落下時コントローラ振動名">;
    FSeek(p + 112); vector3 landingPlayerOffSet<comment="落下後ワープ位置オフセット[ボス基準]">;
    FSeek(p + 128); BossRifleBeastBattleCyloopBlowOffCamera camera<comment="カメラ">;
    FSeek(p + 416); BossRifleBeastBattleCyloopBlowOffLaser laser<comment="ホーミングレーザー">;
    FSeek(p + 784); BossRifleBeastBattleCyloopEffectPos EffectPos<comment="エフェクトの場所">;
    FSeek(p + 816); BossRifleBeastParrySlowParam slowSetting<comment="押しつぶしスロー設定">;

    FSeek(p + 848);
} BossRifleBeastBattleCyloopBlowOff;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    BossRifleBeastBattleCyloop cyloop<comment="サイループ効果1回目">;
    FSeek(p + 400);  BossRifleBeastBattleCyloopBlowOff blowOff<comment="サイループ効果2回目">;
    FSeek(p + 1248); float cyloopDamageRate<comment="サイループ効果中のダメージレート">;
    FSeek(p + 1252); float waitTime<comment="カウンター後の攻撃待機時間">;

    FSeek(p + 1264);
} BossRifleBeastBattleCyloopState;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  BossRifleBeastParrySlowParam homingLaserParrySlow<comment="連続発射ホーミングレーザーパリィ時">;
    FSeek(p + 20); BossRifleBeastParrySlowParam homingLaserLastParrySlow<comment="連続発射最後のホーミングレーザーパリィ時">;
    FSeek(p + 40); BossRifleBeastParrySlowParam homingLaserOneShotParrySlow<comment="一斉発射ホーミングレーザーパリィ時">;

    FSeek(p + 60);
} BossRifleBeastParryParam;

enum<uint8> DebugCameraDrawTypeCyloop
{
    Cyloop1Start = 0,
    Cyloop1Press = 1,
    Cyloop2BlowUp = 2,
    Cyloop2Press = 3,
    Cyloop2Landing = 4,
};

enum<uint8> DebugPlayerWarpPosTypeCyloop
{
    Cyloop1PlayerStart = 0,
    Cyloop1PlayerPress = 1,
    Cyloop2PlayerBlowUp = 2,
    Cyloop2PlayerPress = 3,
    Cyloop2PlayerLanding = 4,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool startFase4<comment="Fase4から始める">;
    FSeek(p + 1); bool skipMove<comment="ムービーをスキップできるようにする">;
    FSeek(p + 2); bool isDebugDrawCamera<comment="サイループ効果カメラデバッグ表示を有効化">;
    FSeek(p + 3); DebugCameraDrawTypeCyloop debugDrawTypeCyloop<comment="デバッグ表示するサイループ効果関連カメラ">;
    FSeek(p + 4); bool isDebugDrawPlayerWarpPosCyloop<comment="サイループ効果プレイヤー位置表示を有効化">;
    FSeek(p + 5); DebugPlayerWarpPosTypeCyloop debugDrawTypePlayerWarpPosCyloop<comment="サイループ効果プレイヤー位置表示を有効化">;

    FSeek(p + 6);
} BossRifleBeastDebugCommand;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    BossRifleBeastPhaseAttackActionParam actionParams[2]<comment="アクション設定",optimize=false>;
    FSeek(p + 64);   BossRifleBeastBattleAttackPattern attackPattern[12]<comment="攻撃の組み合わせ設定:ライフル受け渡し前",optimize=false>;
    FSeek(p + 304);  BossRifleBeastBattleAttackPattern attackPatternAfter[12]<comment="攻撃の組み合わせ設定:ライフル受け渡し後",optimize=false>;
    FSeek(p + 544);  BossRifleBeastBattleDownState downState<comment="ダウン時の設定">;
    FSeek(p + 656);  BossRifleBeastBattleAttackHomingLaserPattern attackHomingLaserPattern[10]<comment="ホーミングレーザーパターン設定",optimize=false>;
    FSeek(p + 4016); BossRifleBeastBattleFirstAttackHomingLaserPattern firstAttackHomingLaserPattern<comment="スパソニ2変身前ホーミングレーザーパターン設定">;
    FSeek(p + 4360); BossRifleBeastBattleSonic2FirstAttackHomingLaserPattern Sonic2firstAttackHomingLaserPattern<comment="スパソニ2変身直後のホーミングレーザーパターン設定">;
    FSeek(p + 4508); BossRifleBeastBattleAttackHomingLaser attackHomingLaser<comment="ホーミングレーザー基本設定">;
    FSeek(p + 4640); BossRifleBeastBattleCyloopAttackHomingLaser cyloopAttackHomingLaser<comment="サイループ用ホーミングレーザー設定">;
    FSeek(p + 4720); BossRifleBeastBattleCyloopAttackHomingLaser clawStunAttackHomingLaser<comment="三連撃スタンホーミングレーザー設定">;
    FSeek(p + 4800); BossRifleBeastBattleAttackClaw attackClaw<comment="三連撃基本設定">;
    FSeek(p + 5360); BossRifleBeastBattleTackle attackTackle<comment="体当たり基本設定">;
    FSeek(p + 5840); BossRifleBeastBattleCameraParam cameraParam<comment="カメラ設定">;
    FSeek(p + 6280); BossRifleBeastBattleState battaleState<comment="バトル中の設定">;
    FSeek(p + 6336); BossRifleBeastBattleCyloopState cyloopState<comment="サイループ効果の設定">;
    FSeek(p + 7600); BossRifleBeastParryParam parryParam<comment="パリィ演出設定">;
    FSeek(p + 7660); BossRifleBeastDebugCommand debugParam<comment="デバッグ設定">;
    FSeek(p + 7668); float thresholdDamageEffectHPRatio[3]<comment="ダメージエフェクト再生HP閾値",optimize=false>;
    FSeek(p + 7680); float qteSucceedWaitTimes[4]<comment="QTE成功時の待機時間",optimize=false>;
    FSeek(p + 7696); bool isDebugDraw<comment="isDebugDraw">;
    FSeek(p + 7697); bool isSkip<comment="ボス戦スキップ[シーケンス強制通過用対応]">;

    FSeek(p + 7712);
} BossRifleBeastBattleParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 camLookAtOffset<comment="カメラ注視点オフセット(ケーブル原点)">;
    FSeek(p + 16); vector3 camEyeOffset<comment="カメラ位置オフセット(ケーブル原点)">;
    FSeek(p + 32); float camFovy<comment="カメラ画角">;
    FSeek(p + 36); float camEaseInTime<comment="カメラ開始補間時間">;
    FSeek(p + 40); float camEaseOutTime<comment="カメラ終了補間時間">;
    FSeek(p + 44); float camWaitTime<comment="カメラ表示時間">;
    FSeek(p + 48); bool useCamera<comment="カメラ演出を使用するか">;

    FSeek(p + 64);
} RifleBeastCableCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 healthPoint<comment="HP">;
    FSeek(p + 4);  float colliderOffsetY<comment="コリジョンの高さオフセット">;
    FSeek(p + 8);  float attackRadius<comment="攻撃時の距離">;
    FSeek(p + 12); float cyloopRadius<comment="Cyloop時の半径">;
    FSeek(p + 16); float targetableTime<comment="ターゲット可能時間">;
    FSeek(p + 20); float targetableDistance<comment="ターゲット可能距離">;
    FSeek(p + 32); RifleBeastCableCamera camera<comment="camera">;

    FSeek(p + 96);
} BossRifleBeastCableParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool usePracticeNotifier<comment="練習通知を使用するか">;
    FSeek(p + 1); sint8 practiceNo<comment="練習番号">;
    FSeek(p + 2); sint16 tipsNo<comment="Tips番号">;

    FSeek(p + 4);
} RifleBeastPracticeNotifierConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); RifleBeastPracticeNotifierConfig notifierConfigBattle1<comment="練習通知設定[戦闘開始時]">;
    FSeek(p + 4); RifleBeastPracticeNotifierConfig notifierConfigBattle2<comment="練習通知設定[ジャストパリィ]">;
    FSeek(p + 8); RifleBeastPracticeNotifierConfig notifierConfigBattle3<comment="練習通知設定[ケーブル破壊]">;

    FSeek(p + 12);
} BossRifleBeastNotifierParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     BossBaseConfig bossBaseConfig;
    FSeek(p + 75712); BossRifleBeastBattleParam battleParam<comment="スパソニ戦設定">;
    FSeek(p + 83424); BossRifleBeastCableParam cableParam<comment="ケーブル設定">;
    FSeek(p + 83520); BossRifleBeastNotifierParam notifierParam<comment="通知設定">;

    FSeek(p + 83536);
} BossRifleBeastConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
BossRifleBeastConfig bossRifleBeastConfig;
