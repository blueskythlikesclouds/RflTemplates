local uint64 BASE_OFFSET_VALUE<hidden=true>;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef byte sint8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool isEnable<comment="有効か">;
    FSeek(p + 1); sint8 useKeyNum<comment="鍵の使用数">;

    FSeek(p + 2);
} ChaosEmeraldStorageParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); ChaosEmeraldStorageParam storages[7]<comment="カオスエメラルド金庫設定",optimize=false>;

    FSeek(p + 14);
} IslandParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float takableRange<comment="コダマの入手半径(m)">;
    FSeek(p + 4);  float fadeTime<comment="コダマの表示フェード時間">;
    FSeek(p + 8);  float chestJumpOutFadeTime<comment="宝箱から飛び出す際のフェード時間">;
    FSeek(p + 12); float tutorialDelayTime<comment="チュートリアル表示のディレイ">;

    FSeek(p + 16);
} KodamaCommonParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint8 maxFollowNum<comment="最大追従数">;
    FSeek(p + 4);  float speed<comment="追従コダマの速度">;
    FSeek(p + 8);  float rotateSpeed<comment="追従コダマの旋回速度">;
    FSeek(p + 12); float stopDistance<comment="追従コダマの停止距離">;
    FSeek(p + 16); float vanishDistance<comment="追従コダマの消滅距離">;
    FSeek(p + 20); float respawnStandTime<comment="追従コダマの再表示立ち止まり時間">;

    FSeek(p + 24);
} KodamaFollowParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  KodamaCommonParam common<comment="共通設定">;
    FSeek(p + 16); KodamaFollowParam follow<comment="追従設定">;

    FSeek(p + 40);
} KodamaNormalParam;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 levelupKodamaNum[3]<comment="LVUPに必要なコダマ数(難易度別)",optimize=false>;

    FSeek(p + 12);
} KodamaElderParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 difficulty[3]<comment="(難易度別)",optimize=false>;

    FSeek(p + 12);
} KodamaHermitLvUpParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); KodamaHermitLvUpParam levelupSeedNum[99]<comment="LVUPに必要なタネ数(レベル別)",optimize=false>;

    FSeek(p + 1188);
} KodamaHermitParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float takableRange<comment="コダマの入手半径(m)">;
    FSeek(p + 4);  float colliderRange<comment="コダマ本体のコリジョン半径(m)">;
    FSeek(p + 8);  float fadeTime<comment="コダマの表示フェード時間">;
    FSeek(p + 12); float spaceVertical<comment="追従コダマの垂直方向オフセット">;
    FSeek(p + 16); float spaceHorizontal<comment="追従コダマの水平方向オフセット">;

    FSeek(p + 20);
} KodamaNewFormParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    KodamaNormalParam normal<comment="通常コダマ">;
    FSeek(p + 40);   KodamaElderParam elder<comment="長老コダマ">;
    FSeek(p + 52);   KodamaHermitParam hermit<comment="仙人コダマ">;
    FSeek(p + 1240); KodamaNewFormParam newform[8]<comment="新種コダマ",optimize=false>;

    FSeek(p + 1400);
} KodamaParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 inputSequenceItemNumShort<comment="注入イベント(短)の最大注入数">;
    FSeek(p + 4); sint32 inputSequenceItemNumMiddle<comment="注入イベント(中)の最大注入数">;

    FSeek(p + 8);
} NpcParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    IslandParam islands[5]<comment="島",optimize=false>;
    FSeek(p + 72);   KodamaParam kodama<comment="コダマ">;
    FSeek(p + 1472); NpcParam npc<comment="NPC">;
    FSeek(p + 1480); sint32 portalExtraKeyNum<comment="ポータルの追加鍵数">;

    FSeek(p + 1484);
} IslandParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
IslandParameter islandParameter;
