local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring cueName<comment="キュー名">;
    FSeek(p + 16); float fadeInTime<comment="フェードイン時間">;
    FSeek(p + 20); float fadeOutTime<comment="フェードアウト時間">;

    FSeek(p + 24);
} AmbInfo;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); cstring cueName<comment="キュー名">;

    FSeek(p + 16);
} AmbBaseNoiseParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring cueName<comment="キュー名">;
    FSeek(p + 16); float speedThreshold<comment="再生開始速度">;
    FSeek(p + 20); float fadeTime<comment="音のフェード時間">;

    FSeek(p + 24);
} AmbRelativeWindParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring cueName<comment="キュー名">;
    FSeek(p + 16); float sensorRebootTime<comment="センサーの再稼働時間">;
    FSeek(p + 20); float sensorRepositionTime<comment="センサーの再配置時間">;
    FSeek(p + 24); float lifeAreaRadius<comment="音の生存半径">;
    FSeek(p + 28); float lifeTime<comment="音の生存時間">;
    FSeek(p + 32); float fadeTime<comment="音のフェード時間">;

    FSeek(p + 40);
} AmbNearPointParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring cueName<comment="キュー名">;
    FSeek(p + 16); float sensorRadius<comment="センサー半径">;

    FSeek(p + 24);
} AmbRiverParameter_Nearest;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring cueName<comment="キュー名">;
    FSeek(p + 16); float attenuationDistance<comment="減衰距離">;
    FSeek(p + 20); float maxLevelPerPoint<comment="1点あたりの最大センドレベル">;

    FSeek(p + 24);
} AmbRiverParameter_Multiple3D;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   AmbInfo ambSoundInfo[8]<comment="ambSoundInfo",optimize=false>;
    FSeek(p + 192); AmbBaseNoiseParameter baseNoise<comment="ベースノイズ">;
    FSeek(p + 208); AmbRelativeWindParameter relativeWind<comment="相対風">;
    FSeek(p + 232); AmbNearPointParameter insect<comment="虫の声">;
    FSeek(p + 272); AmbNearPointParameter grass<comment="草の揺れる音">;
    FSeek(p + 312); AmbRiverParameter_Nearest riverNearest<comment="川[最近点バージョン]">;
    FSeek(p + 336); AmbRiverParameter_Multiple3D riverMultiple3D<comment="川[複数音源バージョン]">;

    FSeek(p + 360);
} AmbSoundParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
AmbSoundParameter ambSoundParameter;
