local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float baseHeight<comment="ベース部分の高さ">;
    FSeek(p + 4);  float baseRadius<comment="ベース部分の半径">;
    FSeek(p + 8);  float baseOffset<comment="ベース部分のコリジョンオフセット">;
    FSeek(p + 12); float poleHeight<comment="柱部分の高さ">;
    FSeek(p + 16); float poleRadius<comment="柱部分の半径">;
    FSeek(p + 20); float rigidAdditionalHeight<comment="剛体コリジョンの追加の高さ">;
    FSeek(p + 24); float ropeThicknessRigid<comment="ロープコリジョンの厚さ(剛体))">;
    FSeek(p + 28); float ropeThicknessDamage<comment="ロープコリジョンの厚さ(ダメージ)">;
    FSeek(p + 32); float ropeThicknessArea<comment="ロープエリア判定の厚み">;

    FSeek(p + 36);
} ObjSumoPoleColliderConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float interpolationTime<comment="カメラ補間時間">;
    FSeek(p + 4); float height<comment="カメラの高さ">;
    FSeek(p + 8); float fovy<comment="画角">;

    FSeek(p + 12);
} ObjSumoPoleSlingShotLookDownCameraConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float shotGuideMoveDistance<comment="ガイド表示距離">;
    FSeek(p + 4);  float shotRaycastLength<comment="レイキャスト距離">;
    FSeek(p + 8);  float sweepCapsuleHeight<comment="衝突判定のカプセルの高さ">;
    FSeek(p + 12); float shotMoveLengthMax<comment="最大移動距離">;
    FSeek(p + 16); sint32 shotReflectCountMax<comment="最大反射回数">;
    FSeek(p + 20); sint32 shotReflectOwnerCountMax<comment="膨らみ状態のSumoへの最大反射回数">;
    FSeek(p + 24); float shotOffset<comment="ため中の位置オフセット">;
    FSeek(p + 28); float shotDirAngleLimit<comment="発射角度制限">;
    FSeek(p + 32); float shotDirAngleChangeSpeed<comment="発射角度変動速度">;
    FSeek(p + 36); float shotSpeedMin<comment="発射初速度">;
    FSeek(p + 40); float shotSpeedMax<comment="最高速度">;
    FSeek(p + 44); float shotSpeedAdd<comment="反射ごとの加算速度">;
    FSeek(p + 48); float cancelSpeed<comment="キャンセル時の射出速度">;
    FSeek(p + 52); float bendPullLength<comment="弦の引き尺">;
    FSeek(p + 56); float aimTimeScale<comment="エイム中のタイムスケール">;
    FSeek(p + 60); float aimLimitTime<comment="エイム中の時間制限">;
    FSeek(p + 64); ObjSumoPoleSlingShotLookDownCameraConfig cameraLookDown<comment="見下ろしカメラ設定">;

    FSeek(p + 76);
} ObjSumoPoleSlingShotConfig;

typedef struct {
    ubyte alpha;
    ubyte red;
    ubyte green;
    ubyte blue;
} color8;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float width<comment="予測線の幅">;
    FSeek(p + 4);  float maxDistance<comment="予測線の最大距離">;
    FSeek(p + 8);  float tilingDistance<comment="予測線のタイリング距離">;
    FSeek(p + 12); float uvScrollSpeedMin<comment="UVスクロール最低速度">;
    FSeek(p + 16); float uvScrollSpeedMax<comment="UVスクロール最高速度">;
    FSeek(p + 20); sint32 reflectCountSpeedMax<comment="UVスクロールが最高速度になる反射回数">;
    FSeek(p + 24); color8 colors[5]<comment="反射ごとの頂点カラー",optimize=false>;
    FSeek(p + 44); float colorIntensity<comment="カラー強度">;
    FSeek(p + 48); bool colorGradation<comment="線の色をグラデーションさせるか">;
    FSeek(p + 49); bool colorChangeAll<comment="反射回数に応じて線全体を変える">;

    FSeek(p + 52);
} ObjSumoPoleSlingshotLineConfig;

typedef struct {
    float alpha;
    float red;
    float green;
    float blue;
} colorF;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float width<comment="ポリゴンの幅">;
    FSeek(p + 4);  float tilingDistance<comment="テクスチャのタイリング距離">;
    FSeek(p + 8);  float fluctuationPeriod<comment="ゆらぎ周期">;
    FSeek(p + 12); float fluctuationAmplitude<comment="ゆらぎ振幅">;
    FSeek(p + 16); float uvScrollSpeed<comment="UVスクロールスピード">;
    FSeek(p + 20); colorF colorPrimary<comment="プライマリーカラー">;
    FSeek(p + 36); color8 colorVertexEdge<comment="端の頂点カラー">;
    FSeek(p + 40); color8 colorVertexCenter<comment="中央の頂点カラー">;
    FSeek(p + 44); float colorIntensityAnimTime<comment="カラー強度アニメーション時間">;
    FSeek(p + 48); float colorIntensityMin<comment="カラー強度最低値">;
    FSeek(p + 52); float colorIntensityMax<comment="カラー強度最高値">;
    FSeek(p + 56); float patternChangeIntervalTime<comment="パタチェン間隔">;
    FSeek(p + 60); float edgeWidthScale<comment="端の幅スケール">;
    FSeek(p + 64); float edgeWidthScaleLength<comment="端の幅スケールの補間距離">;
    FSeek(p + 68); float roll<comment="ポリゴンのロール回転角度">;

    FSeek(p + 72);
} ObjSumoPoleRopeElectricConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float timeAppear<comment="入場時間">;
    FSeek(p + 4);  float timeDisappear<comment="退場時間">;
    FSeek(p + 8);  sint32 count<comment="ロープの数">;
    FSeek(p + 12); float swingWidthMin<comment="反射時の最小揺れ幅">;
    FSeek(p + 16); float swingWidthMax<comment="反射時の最大揺れ幅">;
    FSeek(p + 20); float swingWidthReductionRate<comment="揺れ幅減衰">;
    FSeek(p + 24); float swingTime<comment="揺れ時間">;
    FSeek(p + 28); float swingPeriod<comment="揺れ周期">;
    FSeek(p + 32); float swingReturnSlowTime<comment="しなりがゆっくり戻るときの時間">;
    FSeek(p + 36); ObjSumoPoleRopeElectricConfig electric<comment="電流設定">;

    FSeek(p + 108);
} ObjSumoPoleRopeConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   sint32 electricDamageToEnemy<comment="エネミーへの電流ダメージ">;
    FSeek(p + 4);   ObjSumoPoleColliderConfig collider<comment="コリジョン設定">;
    FSeek(p + 40);  ObjSumoPoleSlingShotConfig slingShot<comment="スリングショット設定">;
    FSeek(p + 116); ObjSumoPoleSlingshotLineConfig line<comment="予測線設定">;
    FSeek(p + 168); ObjSumoPoleRopeConfig rope<comment="ロープ設定">;

    FSeek(p + 276);
} ObjSumoPoleConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
ObjSumoPoleConfig objSumoPoleConfig;
