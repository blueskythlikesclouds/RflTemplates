local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring stagecode<comment="ステージコード">;
    FSeek(p + 16); sint32 highTime<comment="最高タイム">;
    FSeek(p + 20); sint32 highScore<comment="ハイスコア">;

    FSeek(p + 24);
} PlayStatsSummary;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        PlayStatsSummary data[size]<optimize=false>;
        FSeek(p);
    }
} array_PlayStatsSummary;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring stagecode<comment="ステージコード">;
    FSeek(p + 16); cstring play<comment="プレイ">;
    FSeek(p + 32); cstring option<comment="オプション">;
    FSeek(p + 48); vector3 position<comment="座標">;
    FSeek(p + 64); float time<comment="時間">;

    FSeek(p + 80);
} PlayLog;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        PlayLog data[size]<optimize=false>;
        FSeek(p);
    }
} array_PlayLog;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 enemies<comment="エネミー撃破数">;
    FSeek(p + 4);  sint32 damages<comment="ダメージ回数">;
    FSeek(p + 8);  sint32 misses<comment="ミス回数">;
    FSeek(p + 12); sint32 retry<comment="リトライ回数">;
    FSeek(p + 16); sint32 restart<comment="リスタート回数">;
    FSeek(p + 24); array_PlayLog logs<comment="プレイログ">;

    FSeek(p + 56);
} PlayStatsData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring username<comment="プレイユーザー">;
    FSeek(p + 16); cstring time<comment="プレイ開始時刻">;
    FSeek(p + 32); array_PlayStatsSummary summaries<comment="サマリ">;
    FSeek(p + 64); PlayStatsData playLog<comment="ログ">;

    FSeek(p + 120);
} PlayStats;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
PlayStats playStats;
