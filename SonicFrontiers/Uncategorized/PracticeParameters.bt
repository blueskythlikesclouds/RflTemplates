local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef byte sint8;

enum<sint8> Checker
{
    InvalidChecker = -1,
    CountActions = 0,
    CountAirTrick = 1,
    CountControlCamera = 2,
    CountInfinityCombo = 3,
    CountFiveCombo = 4,
    NumCheckers = 5,
};

typedef ubyte uint8;

enum<uint8> Type
{
    None = 0,
    ControlCamera = 1,
    Cyloop = 2,
    QuickCyloop = 3,
    FocusCamera = 4,
    Parry = 5,
    Avoid = 6,
    AcceleCombo = 7,
    Crasher = 8,
    HomingShot = 9,
    StompingAttack = 10,
    SonicBoom = 11,
    SpinSlash = 12,
    LoopKick = 13,
    CrossSlash = 14,
    ChargeAttack = 15,
    Smash = 16,
    RecoverySmash = 17,
    Jump = 18,
    DoubleJump = 19,
    HomingAttack = 20,
    Boost = 21,
    Stomping = 22,
    BoundStomping = 23,
    AirBoost = 24,
    QuickStep = 25,
    LightDash = 26,
    DropDash = 27,
    Sliding = 28,
    WallRun = 29,
    Discontinued = 30,
    AirTrick = 31,
    AirTrickEnd = 32,
    CancelHomingAttackBounceStomping = 33,
    CancelAirBoostStomping = 34,
    Num = 35,
};

enum<sint8> Judge
{
    Succeed = 0,
    Failed = 1,
    Skiped = 2,
    Waiting = 3,
    Unknown = 4,
    NumJudges = 5,
};

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Type action<comment="アクション">;
    FSeek(p + 1);  Judge dummy<comment="dummy">;
    FSeek(p + 8);  uint64 skipableActions<comment="スキップ許容アクション">;
    FSeek(p + 16); cstring label<comment="操作ガイドテキストラベル">;

    FSeek(p + 32);
} PracticeAction;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 skill<comment="必要スキル">;
    FSeek(p + 8);  uint64 clearedSubject<comment="必須クリア題目番号">;
    FSeek(p + 16); uint64 clearedSubject2<comment="必須クリア題目番号64番以降">;

    FSeek(p + 24);
} PracticePrerequisite;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   Checker checker<comment="チェッカー">;
    FSeek(p + 8);   PracticeAction actions[6]<comment="アクションリスト",optimize=false>;
    FSeek(p + 200); sint32 count<comment="カウント値">;
    FSeek(p + 208); PracticePrerequisite prerequisite<comment="前提条件">;
    FSeek(p + 232); uint8 options<comment="オプション">;

    FSeek(p + 240);
} PracticeSubject;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); cstring labels[10]<comment="テキストラベル",optimize=false>;

    FSeek(p + 160);
} PracticeText;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float readyTime<comment="Ready時間">;
    FSeek(p + 4);  float countTime<comment="Play時間">;
    FSeek(p + 8);  float subjectViewTime<comment="題目説明表示の遅延時間">;
    FSeek(p + 12); float clearedPostTime<comment="題目クリア判定後の待機時間">;
    FSeek(p + 16); float fadeoutWaitTime<comment="クリアSEからフェードまでの待機時間">;
    FSeek(p + 20); float rebuildWaitTime1<comment="題目再構築時の待機時間1">;
    FSeek(p + 24); float rebuildWaitTime2<comment="題目再構築時の待機時間2">;

    FSeek(p + 28);
} PracticeTime;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint32 skill<comment="必要スキル">;
    FSeek(p + 4); bool tutorialCleared<comment="チュートリアルクリア後から表示">;

    FSeek(p + 8);
} PracticeTipsPrerequisite;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); PracticeTipsPrerequisite prerequisite<comment="前提条件">;

    FSeek(p + 8);
} PracticeTips;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint8 subjects[20]<comment="練習一覧",optimize=false>;
    FSeek(p + 20); sint8 tips[100]<comment="Tips一覧",optimize=false>;

    FSeek(p + 120);
} PracticeSet;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     PracticeSubject subjects[100]<comment="練習題目",optimize=false>;
    FSeek(p + 24000); PracticeText text<comment="練習特殊テキスト">;
    FSeek(p + 24160); PracticeTime time<comment="練習時間制御">;
    FSeek(p + 24188); float notifyTime<comment="練習通知表示時間">;
    FSeek(p + 24192); PracticeTips tips[128]<comment="Tips",optimize=false>;
    FSeek(p + 25216); float tipsMinViewTime<comment="Tips最小表示時間">;
    FSeek(p + 25220); PracticeSet sets[81]<comment="練習構成",optimize=false>;

    FSeek(p + 34944);
} PracticeParameters;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
PracticeParameters practiceParameters;
