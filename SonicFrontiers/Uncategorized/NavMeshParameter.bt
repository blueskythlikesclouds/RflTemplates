local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 aabbMin<comment="構築範囲AABBのMIN">;
    FSeek(p + 16); vector3 aabbMax<comment="構築範囲AABBのMAX">;

    FSeek(p + 32);
} World;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float voxelSize<comment="Voxelのサイズ[m]">;
    FSeek(p + 4); float voxelHeight<comment="Voxelの高さ[m]">;

    FSeek(p + 8);
} Rasterization;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float radius<comment="半径[m]">;
    FSeek(p + 4);  float height<comment="高さ[m]">;
    FSeek(p + 8);  float maxClimb<comment="登坂可能な高さ[m]">;
    FSeek(p + 12); float maxSlope<comment="登坂可能な角度[degree]">;

    FSeek(p + 16);
} Agent;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 minArea<comment="最小リージョンエリア[voxelCount]">;
    FSeek(p + 4); sint32 mergeArea<comment="マージ可能リージョンエリア[voxelCount]">;

    FSeek(p + 8);
} Region;

typedef ubyte uint8;

enum<uint8> Partition
{
    Watershed = 0,
    Monotone = 1,
    Layers = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); Partition type<comment="パーティション方式">;

    FSeek(p + 1);
} Partitioning;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool lowHangingObstacles<comment="lowHangingObstacles">;
    FSeek(p + 1); bool ledgeSpans<comment="ledgeSpans">;
    FSeek(p + 2); bool walkableLowHeightSpans<comment="walkableLowHeightSpans">;

    FSeek(p + 3);
} Filtering;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float edgeMaxLength<comment="最大エッジ長[m]">;
    FSeek(p + 4); float maxSimplificationError<comment="ベクトル化の簡略化偏差値">;
    FSeek(p + 8); sint32 vertsPerPoly<comment="ポリゴンの頂点数">;

    FSeek(p + 12);
} Polygonization;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float sampleDistance<comment="サンプリング距離[m]">;
    FSeek(p + 4); float sampleMaxError<comment="サンプリング許容誤差[m]">;

    FSeek(p + 8);
} DetailMesh;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float size<comment="NavMeshのタイリングサイズ[m]">;
    FSeek(p + 4); sint32 maxTiles<comment="同時読み込み最大タイル数">;
    FSeek(p + 8); bool cache<comment="キャッシュタイルか">;

    FSeek(p + 12);
} Tiling;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  World world<comment="World">;
    FSeek(p + 32); Rasterization rasterization<comment="Rasterization">;
    FSeek(p + 40); Agent agent<comment="Agent">;
    FSeek(p + 56); Region region<comment="Region">;
    FSeek(p + 64); Partitioning partitioning<comment="Partitioning">;
    FSeek(p + 65); Filtering filtering<comment="Filtering">;
    FSeek(p + 68); Polygonization polygonization<comment="Polygonization">;
    FSeek(p + 80); DetailMesh detailMesh<comment="DetailMesh">;
    FSeek(p + 88); Tiling tiling<comment="Tiling">;

    FSeek(p + 112);
} NavMeshParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
NavMeshParameter navMeshParameter;
