local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef ubyte uint8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 no;

    FSeek(p + 1);
} Record;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Record record;
    FSeek(p + 8);  cstring name;
    FSeek(p + 24); float baseRate;
    FSeek(p + 28); float slashRate;
    FSeek(p + 32); float quickRate;
    FSeek(p + 36); float stunRate;
    FSeek(p + 40); float staggerRate;

    FSeek(p + 48);
} EnemyDefenceRecord;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); EnemyDefenceRecord data[128]<optimize=false>;

    FSeek(p + 6144);
} EnemyDefenceRecordTable;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyDefenceRecordTable enemyDefenceRecordTable;
