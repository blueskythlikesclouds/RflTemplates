local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint16 pointMin<comment="最小攻撃力">;
    FSeek(p + 2);  uint16 pointMax<comment="最大攻撃力">;
    FSeek(p + 4);  float damageRandomRate<comment="ダメージランダム変動幅">;
    FSeek(p + 8);  float damageRandomRateSS<comment="ダメージランダム変動幅/スパソニ">;
    FSeek(p + 12); float shapeDamageRate<comment="残像ダメージ値レート">;
    FSeek(p + 16); float shapeStunRate<comment="残像スタン値レート">;
    FSeek(p + 20); float shapeStaggerRate<comment="残像怯み値レート">;

    FSeek(p + 24);
} PlayerParamOffensive;

typedef ubyte uint8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 rateMin<comment="最低防御率">;
    FSeek(p + 1); uint8 rateMax<comment="最高防御率">;
    FSeek(p + 2); uint16 infimumDropRings<comment="最低保障リングドロップ数">;

    FSeek(p + 4);
} PlayerParamDefensive;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  PlayerParamOffensive offensive<comment="攻撃力">;
    FSeek(p + 24); PlayerParamDefensive defensive<comment="防御力">;
    FSeek(p + 28); float criticalDamageRate<comment="クリティカル時のダメージレート">;
    FSeek(p + 32); float criticalRate<comment="クリティカルの発生確率">;
    FSeek(p + 36); float criticalRateSS<comment="クリティカルの発生確率/スパソニ">;
    FSeek(p + 40); float downedDamageRate<comment="ダウン中のダメージレート">;

    FSeek(p + 44);
} PlayerParamAttackCommon;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef byte sint8;

enum<sint8> HitSE
{
    SE_None = -1,
    Weak = 0,
    Strong = 1,
    VeryStrong = 2,
};

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float damageRate<comment="ダメージレート/ソニック">;
    FSeek(p + 4);   float damageRateSS<comment="ダメージレート/スーパーソニック">;
    FSeek(p + 8);   float damageRateAcceleMode<comment="アクセルモード時のダメージ倍率">;
    FSeek(p + 12);  float damageRateManual<comment="マニュアルモード時のダメージ倍率">;
    FSeek(p + 16);  float stunPoint<comment="スタン値">;
    FSeek(p + 20);  float staggerPoint<comment="よろめき値">;
    FSeek(p + 32);  vector3 velocity<comment="ダメージ速度">;
    FSeek(p + 48);  float velocityKeepTime<comment="ダメージ速度維持時間">;
    FSeek(p + 52);  float addComboValue<comment="コンボメーター増加量">;
    FSeek(p + 56);  float addComboValueAccele<comment="コンボメーター増加量/アクセル時">;
    FSeek(p + 60);  float addComboValueSS<comment="コンボメーター増加量/スパソニ">;
    FSeek(p + 64);  float addComboValueAcceleSS<comment="コンボメーター増加量/スパソニアクセル時">;
    FSeek(p + 68);  float addQuickCyloopEnergy<comment="クイックサイループゲージ増加量">;
    FSeek(p + 72);  float addQuickCyloopEnergyAccele<comment="クイックサイループゲージ増加量/アクセル時">;
    FSeek(p + 76);  float addQuickCyloopEnergySS<comment="クイックサイループゲージ増加量/スパソニ">;
    FSeek(p + 80);  float addQuickCyloopEnergyAcceleSS<comment="クイックサイループゲージ増加量/スパソニアクセル時">;
    FSeek(p + 84);  float addQuickCyloopEnergyGuard<comment="クイックサイループゲージ増加量/ガード時">;
    FSeek(p + 88);  float addQuickCyloopEnergyAcceleGuard<comment="クイックサイループゲージ増加量/ガード&アクセル時">;
    FSeek(p + 96);  vector3 gimmickVelocity<comment="ギミックに与えるダメージ速度">;
    FSeek(p + 112); float ignoreTime<comment="ヒット後ターゲットから除外する時間">;
    FSeek(p + 116); uint32 attributes<comment="属性">;
    FSeek(p + 120); HitSE se<comment="ヒットSE">;
    FSeek(p + 128); cstring hitEffectName<comment="ヒットエフェクト/ソニック">;
    FSeek(p + 144); cstring hitEffectNameSS<comment="ヒットエフェクト/スーパーソニック">;
    FSeek(p + 160); cstring hitStopName<comment="ヒットストップ/ソニック">;
    FSeek(p + 176); cstring hitStopNameDead<comment="ヒットストップ/撃破/ソニック">;
    FSeek(p + 192); cstring hitStopNameDeadBoss<comment="ヒットストップ/ボス撃破/ソニック">;
    FSeek(p + 208); cstring hitStopNameSS<comment="ヒットストップ/スーパーソニック">;
    FSeek(p + 224); cstring hitStopNameDeadSS<comment="ヒットストップ/撃破/スーパーソニック">;
    FSeek(p + 240); cstring hitCameraShakeName<comment="ヒットカメラ振動/ソニック">;
    FSeek(p + 256); cstring hitCameraShakeNameDead<comment="ヒットカメラ振動/撃破/ソニック">;
    FSeek(p + 272); cstring hitCameraShakeNameDeadBoss<comment="ヒットカメラ振動/ボス撃破/ソニック">;
    FSeek(p + 288); cstring hitCameraShakeNameSS<comment="ヒットカメラ振動/スーパーソニック">;
    FSeek(p + 304); cstring hitCameraShakeNameDeadSS<comment="ヒットカメラ振動/撃破/スーパーソニック">;
    FSeek(p + 320); cstring hitVibrationName<comment="ヒットコントローラ振動/ソニック">;
    FSeek(p + 336); cstring hitVibrationNameSS<comment="ヒットコントローラ振動/スーパーソニック">;

    FSeek(p + 352);
} PlayerParamAttackData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     PlayerParamAttackCommon common<comment="共通">;
    FSeek(p + 48);    PlayerParamAttackData spinAttack<comment="Spin Jump">;
    FSeek(p + 400);   PlayerParamAttackData spinDash<comment="Spin Dash">;
    FSeek(p + 752);   PlayerParamAttackData homingAttack<comment="Homing Attack">;
    FSeek(p + 1104);  PlayerParamAttackData homingAttackAir<comment="Aerial Homing Attack">;
    FSeek(p + 1456);  PlayerParamAttackData pursuitKick<comment="Pursuit Kick">;
    FSeek(p + 1808);  PlayerParamAttackData stomping<comment="Stomping">;
    FSeek(p + 2160);  PlayerParamAttackData stompingAttack<comment="Stomping Attack">;
    FSeek(p + 2512);  PlayerParamAttackData boundStompingLast<comment="Bound Stomping Last">;
    FSeek(p + 2864);  PlayerParamAttackData sliding<comment="Sliding">;
    FSeek(p + 3216);  PlayerParamAttackData loopKick<comment="Loop Kick">;
    FSeek(p + 3568);  PlayerParamAttackData crasher<comment="Crasher">;
    FSeek(p + 3920);  PlayerParamAttackData spinSlashHoming<comment="Spin Slash Homing">;
    FSeek(p + 4272);  PlayerParamAttackData spinSlash<comment="Spin Slash">;
    FSeek(p + 4624);  PlayerParamAttackData spinSlashLast<comment="Spin Slash Last">;
    FSeek(p + 4976);  PlayerParamAttackData sonicBoom<comment="Sonic Boom">;
    FSeek(p + 5328);  PlayerParamAttackData crossSlash<comment="Cross Slash">;
    FSeek(p + 5680);  PlayerParamAttackData homingShot<comment="Homing Shot">;
    FSeek(p + 6032);  PlayerParamAttackData chargeAttack<comment="Charge Attack">;
    FSeek(p + 6384);  PlayerParamAttackData chargeAttackLast<comment="Charge Attack Last">;
    FSeek(p + 6736);  PlayerParamAttackData cyloop<comment="Cyloop">;
    FSeek(p + 7088);  PlayerParamAttackData cyloopQuick<comment="Quick Cyloop">;
    FSeek(p + 7440);  PlayerParamAttackData cyloopAerial<comment="Quick Cyloop Aerial">;
    FSeek(p + 7792);  PlayerParamAttackData accele1<comment="Accele Combo 1">;
    FSeek(p + 8144);  PlayerParamAttackData accele2<comment="Accele Combo 2">;
    FSeek(p + 8496);  PlayerParamAttackData aerialAccele1<comment="Accele Combo 1 Aerial">;
    FSeek(p + 8848);  PlayerParamAttackData aerialAccele2<comment="Accele Combo 2 Aerial">;
    FSeek(p + 9200);  PlayerParamAttackData comboFinish<comment="Combo Finish">;
    FSeek(p + 9552);  PlayerParamAttackData comboFinishF<comment="Combo Finish Front">;
    FSeek(p + 9904);  PlayerParamAttackData comboFinishB<comment="Combo Finish Back">;
    FSeek(p + 10256); PlayerParamAttackData comboFinishL<comment="Combo Finish Left">;
    FSeek(p + 10608); PlayerParamAttackData comboFinishR<comment="Combo Finish Right">;
    FSeek(p + 10960); PlayerParamAttackData acceleComboFinish<comment="Accele Combo Finish">;
    FSeek(p + 11312); PlayerParamAttackData acceleComboFinishF<comment="Accele Combo Finish Front">;
    FSeek(p + 11664); PlayerParamAttackData acceleComboFinishB<comment="Accele Combo Finish Back">;
    FSeek(p + 12016); PlayerParamAttackData acceleComboFinishL<comment="Accele Combo Finish Left">;
    FSeek(p + 12368); PlayerParamAttackData acceleComboFinishR<comment="Accele Combo Finish Right">;
    FSeek(p + 12720); PlayerParamAttackData smash<comment="Smash">;
    FSeek(p + 13072); PlayerParamAttackData smashLast<comment="Smash Last">;
    FSeek(p + 13424); PlayerParamAttackData slingShot<comment="Slingshot">;
    FSeek(p + 13776); PlayerParamAttackData knucklesPunch1<comment="Knuckles Punch1">;
    FSeek(p + 14128); PlayerParamAttackData knucklesPunch2<comment="Knuckles Punch2">;
    FSeek(p + 14480); PlayerParamAttackData knucklesUppercut<comment="Knuckles Uppercut">;
    FSeek(p + 14832); PlayerParamAttackData knucklesHeatKnuckle<comment="Knuckles MaximumHeatKnuckle">;
    FSeek(p + 15184); PlayerParamAttackData knucklesHeatKnuckleLast<comment="Knuckles MaximumHeatKnuckle Last">;
    FSeek(p + 15536); PlayerParamAttackData amyTarotAttack<comment="Amy Tarot Attack">;
    FSeek(p + 15888); PlayerParamAttackData amyTarotAttack2<comment="Amy Tarot Attack2">;
    FSeek(p + 16240); PlayerParamAttackData amyTarotRolling<comment="Amy Tarot Rolling">;
    FSeek(p + 16592); PlayerParamAttackData amyCharmAttack<comment="Amy Charm Attack">;
    FSeek(p + 16944); PlayerParamAttackData tailsSpanner<comment="Tails Spanner">;
    FSeek(p + 17296); PlayerParamAttackData tailsSpannerFloat<comment="Tails Spanner Float">;
    FSeek(p + 17648); PlayerParamAttackData tailsPowerBoost<comment="Tails Power Boost">;
    FSeek(p + 18000); PlayerParamAttackData tailsWaveCannon<comment="Tails Wave Cannon">;
    FSeek(p + 18352); PlayerParamAttackData tailsWaveCannonFinish<comment="Tails Wave Cannon Finish">;

    FSeek(p + 18704);
} PlayerParamAttack;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float resistRate<comment="水中時の水抵抗係数">;
    FSeek(p + 4);  float breatheBrake<comment="息継ぎ時の減速">;
    FSeek(p + 8);  float breatheTime<comment="息継ぎの拘束時間">;
    FSeek(p + 12); float breatheGravity<comment="重力方向にかかる加速度">;

    FSeek(p + 16);
} PlayerParamWaterAct;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float baseSpeed<comment="法線方向の初速基本値">;
    FSeek(p + 4);  float upSpeed<comment="上方向の初速">;
    FSeek(p + 8);  float upSpeedAir<comment="上方向の初速　空中">;
    FSeek(p + 12); float edgeSpeed<comment="エッジからの飛び出しの場合の最低速度">;
    FSeek(p + 16); float airActionTime<comment="他の空中アクションへ移行できる時間">;
    FSeek(p + 20); float wallMoveTime<comment="壁移動へ移行できる時間">;

    FSeek(p + 24);
} PlayerParamBaseJump;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float maxSpeed<comment="最高速度">;
    FSeek(p + 4);  float slidePower<comment="[通常]斜面滑り力">;
    FSeek(p + 8);  float brakeForce<comment="[通常]ブレーキ力">;
    FSeek(p + 12); float slidePowerSlalom<comment="[S字内]斜面滑り力">;
    FSeek(p + 16); float brakeForceSlalom<comment="[S字内]ブレーキ力">;
    FSeek(p + 20); float releaseSpeed<comment="終了速度">;
    FSeek(p + 24); bool useInput<comment="入力方向に対する重力加速度を使用するか">;

    FSeek(p + 28);
} PlayerParamBallMove;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float width<comment="幅">;
    FSeek(p + 4);  float distance<comment="距離">;
    FSeek(p + 8);  float u0<comment="UV:U開始">;
    FSeek(p + 12); float u1<comment="UV:U終了">;

    FSeek(p + 16);
} PlayerParamLocusData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); PlayerParamLocusData data[4]<comment="data",optimize=false>;

    FSeek(p + 64);
} PlayerParamLocus;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float effectSpanTime<comment="エフェクトの再生間隔">;
    FSeek(p + 4);  float effectLifeTime<comment="エフェクトの再生時間">;
    FSeek(p + 8);  float effectOffsetDistance<comment="エフェクト発生位置オフセット">;
    FSeek(p + 12); float effectOverlapDistance<comment="エフェクトオーバーラップオフセット">;

    FSeek(p + 16);
} PlayerParamAuraTrain;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 ringsLevel<comment="リングレベル段数">;
    FSeek(p + 1); uint8 speedLevel<comment="スピードレベル段数">;
    FSeek(p + 2); uint8 offensiveLevel<comment="攻撃レベル段数">;
    FSeek(p + 3); uint8 defensiveLevel<comment="防御レベル段数">;

    FSeek(p + 4);
} PlayerParamLevel;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float coolTime<comment="クールタイム">;

    FSeek(p + 4);
} PlayerParamBarrierWall;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float rates[5]<comment="島別レート",optimize=false>;

    FSeek(p + 20);
} PlayerParamDamageRateLevel;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); PlayerParamDamageRateLevel diffculties[4]<comment="難易度",optimize=false>;

    FSeek(p + 80);
} PlayerParamDamageRate;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float declineSpeed<comment="コンボメーター減少速度/通常">;
    FSeek(p + 4);  float declineSpeedAccele<comment="コンボメーター減少速度/アクセルモード">;
    FSeek(p + 8);  float lossDamaged<comment="被ダメージ時の減少量/通常">;
    FSeek(p + 12); float lossDamagedAccele<comment="被ダメージ時の減少量/アクセルモード">;
    FSeek(p + 16); uint32 comboRateAccele<comment="コンボ水増しレート/アクセルモード">;

    FSeek(p + 20);
} PlayerParamAcceleMode;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     PlayerParamAttack attack<comment="ダメージ設定">;
    FSeek(p + 18704); PlayerParamWaterAct wateract<comment="水中専用挙動">;
    FSeek(p + 18720); PlayerParamBaseJump basejump<comment="BASEジャンプ">;
    FSeek(p + 18744); PlayerParamBallMove ballmove<comment="ボール移動">;
    FSeek(p + 18772); PlayerParamLocus locus<comment="移動軌跡">;
    FSeek(p + 18836); PlayerParamAuraTrain auratrain<comment="オーラトレイン">;
    FSeek(p + 18852); PlayerParamLevel level<comment="レベル段階数">;
    FSeek(p + 18856); PlayerParamBarrierWall barrierWall<comment="結界壁">;
    FSeek(p + 18860); PlayerParamDamageRate damageRate<comment="ダメージ倍率">;
    FSeek(p + 18940); PlayerParamAcceleMode acceleMode<comment="アクセルモード">;

    FSeek(p + 18960);
} CommonPackage;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float longPressTime<comment="長押し判定時間">;

    FSeek(p + 4);
} PlayerParamComboCommon;

enum<uint8> ComboMoveType
{
    Homing = 0,
    Step = 1,
    None = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  ComboMoveType moveType<comment="タイプ">;
    FSeek(p + 4);  float moveInitialSpeed<comment="初速度">;
    FSeek(p + 8);  float moveMaxSpeed<comment="最高速度">;
    FSeek(p + 12); float moveAccele<comment="加速度">;
    FSeek(p + 16); float timeout<comment="タイムアウト">;

    FSeek(p + 20);
} PlayerParamComboMove;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float moveSpeed<comment="移動速度">;
    FSeek(p + 4); float rotateSpeed<comment="移動回転速度">;

    FSeek(p + 8);
} PlayerParamComboMoveCorrection;

enum<sint8> Action
{
    Root = 0,
    HomingAttack = 1,
    AerialHomingAttack = 2,
    Pursuit = 3,
    Stomping = 4,
    LoopKick = 5,
    Crasher = 6,
    SpinSlash = 7,
    SonicBoom = 8,
    CrossSlash = 9,
    HomingShot = 10,
    ChargeAttack = 11,
    QuickCyloop = 12,
    AerialQuickCyloop = 13,
    AcceleCombo1 = 14,
    AcceleCombo2 = 15,
    AcceleCombo3 = 16,
    AcceleCombo4 = 17,
    AerialAcceleCombo1 = 18,
    AerialAcceleCombo2 = 19,
    AerialAcceleCombo3 = 20,
    AerialAcceleCombo4 = 21,
    ComboFinish = 22,
    SpinJump = 23,
    Smash = 24,
    Behind = 25,
    Guarded = 26,
    Avoid = 27,
    AirBoost = 28,
    AfterAirBoost = 29,
    KnucklesPunch1 = 30,
    KnucklesPunch2 = 31,
    KnucklesUppercut = 32,
    KnucklesCyKnuckle = 33,
    KnucklesHeatKnuckle = 34,
    AmyTarotAttack = 35,
    AmyTarotAttack2 = 36,
    AmyTarotRolling = 37,
    AmyCyHammer = 38,
    AmyCharmAttack = 39,
    TailsSpanner = 40,
    ActionNum = 41,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Action transitExistTarget[6]<comment="遷移先/通常",optimize=false>;
    FSeek(p + 6);  Action transitInAir[6]<comment="遷移先/空中",optimize=false>;
    FSeek(p + 12); Action transitNotExistTarget[6]<comment="遷移先/空打ち",optimize=false>;

    FSeek(p + 18);
} PlayerParamComboTransit;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   PlayerParamComboTransit root<comment="Root">;
    FSeek(p + 18);  PlayerParamComboTransit homingAttack<comment="Homing Attack">;
    FSeek(p + 36);  PlayerParamComboTransit aerialHoming<comment="Aerial Homing Attack">;
    FSeek(p + 54);  PlayerParamComboTransit pursuit<comment="Pursuit Kick">;
    FSeek(p + 72);  PlayerParamComboTransit stomping<comment="Stomping">;
    FSeek(p + 90);  PlayerParamComboTransit loopKick<comment="Loop Kick">;
    FSeek(p + 108); PlayerParamComboTransit crasher<comment="Crasher">;
    FSeek(p + 126); PlayerParamComboTransit spinSlash<comment="Spin Slash">;
    FSeek(p + 144); PlayerParamComboTransit sonicBoom<comment="Sonic Boom">;
    FSeek(p + 162); PlayerParamComboTransit crossSlash<comment="Cross Slash">;
    FSeek(p + 180); PlayerParamComboTransit homingShot<comment="Homing Shot">;
    FSeek(p + 198); PlayerParamComboTransit chargeAttack<comment="Charge Attack">;
    FSeek(p + 216); PlayerParamComboTransit quickCyloop<comment="Quick Cyloop">;
    FSeek(p + 234); PlayerParamComboTransit aerialQuickCyloop<comment="Quick Cyloop Aerial">;
    FSeek(p + 252); PlayerParamComboTransit acceleCombo1<comment="Accele Combo 1">;
    FSeek(p + 270); PlayerParamComboTransit acceleCombo2<comment="Accele Combo 2">;
    FSeek(p + 288); PlayerParamComboTransit acceleCombo3<comment="Accele Combo 3">;
    FSeek(p + 306); PlayerParamComboTransit acceleCombo4<comment="Accele Combo 4">;
    FSeek(p + 324); PlayerParamComboTransit aerialAcceleCombo1<comment="Aerial Accele Combo 1">;
    FSeek(p + 342); PlayerParamComboTransit aerialAcceleCombo2<comment="Aerial Accele Combo 2">;
    FSeek(p + 360); PlayerParamComboTransit aerialAcceleCombo3<comment="Aerial Accele Combo 3">;
    FSeek(p + 378); PlayerParamComboTransit aerialAcceleCombo4<comment="Aerial Accele Combo 4">;
    FSeek(p + 396); PlayerParamComboTransit behind<comment="Behind">;
    FSeek(p + 414); PlayerParamComboTransit guarded<comment="Guarded">;
    FSeek(p + 432); PlayerParamComboTransit avoid<comment="Avoid">;
    FSeek(p + 450); PlayerParamComboTransit airBoost<comment="AirBoost">;
    FSeek(p + 468); PlayerParamComboTransit afterAirBoost<comment="AfterAirBoost">;
    FSeek(p + 486); PlayerParamComboTransit knucklesPunch1<comment="Knuckles Punch1">;
    FSeek(p + 504); PlayerParamComboTransit knucklesPunch2<comment="Knuckles Punch2">;
    FSeek(p + 522); PlayerParamComboTransit knucklesUppercut<comment="Knuckles Uppercut">;
    FSeek(p + 540); PlayerParamComboTransit knucklesCyKnuckle<comment="Knuckles CyKnuckle">;
    FSeek(p + 558); PlayerParamComboTransit knucklesHeatKnuckle<comment="Knuckles MaximumHeatKnuckle">;
    FSeek(p + 576); PlayerParamComboTransit amyTarotAttack<comment="Amy TarotAttack">;
    FSeek(p + 594); PlayerParamComboTransit amyTarotAttack2<comment="Amy TarotAttack2">;
    FSeek(p + 612); PlayerParamComboTransit amyTarotRolling<comment="Amy TarotRolling">;
    FSeek(p + 630); PlayerParamComboTransit amyCyHammer<comment="Amy CyHammer">;
    FSeek(p + 648); PlayerParamComboTransit amyCharmAttack<comment="Amy CharmAttack">;
    FSeek(p + 666); PlayerParamComboTransit tailsSpanner<comment="Tails Spanner">;

    FSeek(p + 684);
} PlayerParamComboTransitTable;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  PlayerParamComboCommon common<comment="コンボ基本">;
    FSeek(p + 4);  PlayerParamComboMove comboMoveSonic<comment="コンボ間移動/ソニック">;
    FSeek(p + 24); PlayerParamComboMove comboMoveSupersonic<comment="コンボ間移動/スーパーソニック">;
    FSeek(p + 44); PlayerParamComboMoveCorrection comboMoveCorrection<comment="コンボ移動補正 スーパーソニック時">;
    FSeek(p + 52); PlayerParamComboTransitTable comboTable<comment="コンボルート">;

    FSeek(p + 736);
} PlayerParamCombo;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 damagePoint<comment="ダメージ量">;
    FSeek(p + 4);  float effectTime<comment="効果時間[sec]">;
    FSeek(p + 8);  float initTime<comment="初回ダメージまでの時間[sec]">;
    FSeek(p + 12); float spanTime<comment="2回目以降のダメージ間隔時間[sec]">;

    FSeek(p + 16);
} AmyParamParryDebuff;

typedef int32 sint32;

typedef struct {
    float x;
    float y;
} vector2;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 m_divideCircle<comment="円周/分割数">;
    FSeek(p + 4);  float m_circleRadius<comment="円周/半径">;
    FSeek(p + 8);  float m_circleWaveCycle<comment="円周/半径の揺らぎ周期">;
    FSeek(p + 12); float m_circleWaveWidth<comment="円周/半径の揺らぎ振幅">;
    FSeek(p + 16); float m_circleWaveSpeed<comment="円周/半径の揺らぎ速度">;
    FSeek(p + 20); vector2 m_scale<comment="円周/スケール">;
    FSeek(p + 32); cstring m_textureName<comment="テクスチャ/ファイル名">;
    FSeek(p + 48); float m_flowSpeed<comment="テクスチャ/流れる速度">;
    FSeek(p + 52); float m_twistCycle<comment="テクスチャ/ひねり周期">;
    FSeek(p + 56); float m_rollCycle<comment="テクスチャ/回転周期">;
    FSeek(p + 60); float m_rollPhase<comment="テクスチャ/回転位相">;
    FSeek(p + 64); float m_alphaHeadDistance<comment="テクスチャ/先頭アルファ距離">;
    FSeek(p + 68); float m_alphaTailDistance<comment="テクスチャ/末尾アルファ距離">;
    FSeek(p + 72); float m_offsetCycle<comment="位置オフセット/回転周期">;
    FSeek(p + 76); float m_offsetPhase<comment="位置オフセット/回転位相">;
    FSeek(p + 80); float m_offsetRadius<comment="位置オフセット/半径">;

    FSeek(p + 88);
} CyloopSlashEffectBaseParameter;

typedef struct {
    float alpha;
    float red;
    float green;
    float blue;
} colorF;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   CyloopSlashEffectBaseParameter cyloopSlashEffectBaseParameter;
    FSeek(p + 88);  colorF m_color0<comment="テクスチャ/色1">;
    FSeek(p + 104); colorF m_color1<comment="テクスチャ/色2">;
    FSeek(p + 120); float m_luminance<comment="テクスチャ/輝度">;
    FSeek(p + 124); colorF m_flashColor0<comment="テクスチャ/フラッシュ色1">;
    FSeek(p + 140); colorF m_flashColor1<comment="テクスチャ/フラッシュ色1">;
    FSeek(p + 156); float m_flashLuminance<comment="テクスチャ/フラッシュ輝度">;
    FSeek(p + 160); float m_flashTime<comment="テクスチャ/フラッシュ時間">;

    FSeek(p + 168);
} CyloopTransparentLocusParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float scale<comment="スケール">;
    FSeek(p + 4); float speedX<comment="速度X">;
    FSeek(p + 8); float speedY<comment="速度Y">;

    FSeek(p + 12);
} OpaqueLineUvCell;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   CyloopSlashEffectBaseParameter cyloopSlashEffectBaseParameter;
    FSeek(p + 88);  colorF m_color<comment="テクスチャ/色">;
    FSeek(p + 104); float m_alphaThreshold<comment="テクスチャ/アルファしきい値">;
    FSeek(p + 108); OpaqueLineUvCell m_uvCells[2]<comment="テクスチャ/ノイズ",optimize=false>;
    FSeek(p + 132); float m_uvLineScaleX<comment="テクスチャ/ラインスケールX">;
    FSeek(p + 136); float m_uvLineScaleY<comment="テクスチャ/ラインスケールY">;
    FSeek(p + 140); colorF m_flashColor<comment="テクスチャ/フラッシュ色">;
    FSeek(p + 156); float m_flashTime<comment="テクスチャ/フラッシュ時間">;

    FSeek(p + 160);
} CyloopOpaqueLocusParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   cstring m_textureNamePattern<comment="テクスチャ/パターン">;
    FSeek(p + 16);  cstring m_textureNameDist<comment="テクスチャ/歪み">;
    FSeek(p + 32);  colorF startColor<comment="開始色">;
    FSeek(p + 48);  colorF endColor<comment="末端色">;
    FSeek(p + 64);  float startColorLuminance<comment="開始色輝度">;
    FSeek(p + 68);  float endColorLuminance<comment="末端色輝度">;
    FSeek(p + 72);  colorF startColorFlash<comment="フラッシュ/開始色">;
    FSeek(p + 88);  colorF endColorFlash<comment="フラッシュ/末端色">;
    FSeek(p + 104); float startColorLuminanceFlash<comment="フラッシュ/開始色輝度">;
    FSeek(p + 108); float endColorLuminanceFlash<comment="フラッシュ/末端色輝度">;
    FSeek(p + 112); float flashTime<comment="フラッシュ/時間">;
    FSeek(p + 116); float patternDepth<comment="パターン/視差">;
    FSeek(p + 120); float patternScrollSpeed<comment="パターン/スクロール速度">;
    FSeek(p + 124); float patternDarkness<comment="パターン/濃さ">;
    FSeek(p + 128); float patternScale<comment="パターン/タイリング">;
    FSeek(p + 132); float glitchResX<comment="グリッチ/末端の解像度X">;
    FSeek(p + 136); float glitchResY<comment="グリッチ/末端の解像度Y">;
    FSeek(p + 140); float glitchOffset<comment="グリッチ/末端の各段のズレ量">;
    FSeek(p + 144); float glitchMaxLength<comment="グリッチ/幅が変化する最大の長さ">;
    FSeek(p + 148); float startGlitchScrollSpeed<comment="グリッチ/先端のスクロール速度">;
    FSeek(p + 152); float startGlitchChangeSpeed<comment="グリッチ/先端のノイズ変化速度">;
    FSeek(p + 156); float startGlitchShift<comment="グリッチ/先端の位置オフセット">;
    FSeek(p + 160); float startGlitchContrust<comment="グリッチ/先端のコントラスト">;
    FSeek(p + 164); float endGlitchScrollSpeed<comment="グリッチ/末端のスクロール速度">;
    FSeek(p + 168); float endGlitchChangeSpeed<comment="グリッチ/末端のノイズ変化速度">;
    FSeek(p + 172); float endGlitchShift<comment="グリッチ/末端の位置オフセット">;
    FSeek(p + 176); float endGlitchContrust<comment="グリッチ/末端のコントラスト">;
    FSeek(p + 180); float lineWidth<comment="ライン/幅_モデルの幅">;
    FSeek(p + 184); float lineDisplayWidth<comment="ライン/幅_表示の幅">;
    FSeek(p + 188); float lineBlackEdgeWidth<comment="ライン/境界の幅">;
    FSeek(p + 192); float lineBlackEdgeIntensity<comment="ライン/境界の色の濃さ">;
    FSeek(p + 196); float lineBlackEdgeNormalFade<comment="ライン/境界の法線フェード">;
    FSeek(p + 200); float distNoiseScale<comment="歪み/全体のUVスケール">;
    FSeek(p + 204); float distLowNoiseScale<comment="歪み/周期低のUVスケール">;
    FSeek(p + 208); float distHighNoiseScale<comment="歪み/周期高のUVスケール">;
    FSeek(p + 212); float distNoiseRate<comment="歪み/周波数のブレンド割合">;
    FSeek(p + 216); float distScrollSpeed<comment="歪み/スクロール速度">;
    FSeek(p + 220); float distIntensity<comment="歪み/強さ">;
    FSeek(p + 224); float dissolve<comment="消失/消失比率">;
    FSeek(p + 228); float dissolveRate<comment="消失/フェードアウト時間比率">;
    FSeek(p + 232); float heightOffset<comment="位置/高さオフセット">;

    FSeek(p + 240);
} CyloopCrossLineParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    sint32 m_numTransparentLines<comment="透明ラインの本数">;
    FSeek(p + 8);    CyloopTransparentLocusParameter m_transparentLines[3]<comment="透明ラインのパラメータ",optimize=false>;
    FSeek(p + 512);  sint32 m_numOpaqueLines<comment="不透明ラインの本数">;
    FSeek(p + 520);  CyloopOpaqueLocusParameter m_opaqueLines[3]<comment="不透明ラインのパラメータ",optimize=false>;
    FSeek(p + 1000); sint32 m_numCrossLines<comment="クロスラインの本数">;
    FSeek(p + 1008); CyloopCrossLineParameter m_crossline<comment="クロスラインのパラメータ">;

    FSeek(p + 1248);
} CyloopLocusParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 noneWeight<comment="ドロップなしのウェイト値">;
    FSeek(p + 4);  uint32 ring10Weight<comment="10リングのウェイト値">;
    FSeek(p + 8);  uint32 powerSeedWeight<comment="力の種のウェイト値">;
    FSeek(p + 12); uint32 guardSeedWeight<comment="守りの種のウェイト値">;
    FSeek(p + 16); uint32 sequenceItemWeight<comment="シーケンスアイテムのウェイト値">;
    FSeek(p + 20); uint32 portalBitWeight<comment="ポータルの欠片のウェイト値">;
    FSeek(p + 24); uint32 skillPieceWeight<comment="スキルピースのウェイト値">;
    FSeek(p + 28); uint32 skillPieceAmyWeight<comment="スキルピース(Amy)のウェイト値">;
    FSeek(p + 32); uint32 skillPieceKnucklesWeight<comment="スキルピース(Knuckles)のウェイト値">;
    FSeek(p + 36); uint32 skillPieceTailsWeight<comment="スキルピース(Tails)のウェイト値">;

    FSeek(p + 40);
} CyloopDropItemWeightParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   CyloopDropItemWeightParameter weight<comment="通常時のウェイト">;
    FSeek(p + 40);  CyloopDropItemWeightParameter weight2<comment="バトル中のウェイト">;
    FSeek(p + 80);  uint32 numRings<comment="リングドロップ枚数/単体">;
    FSeek(p + 84);  uint32 numRings2<comment="リングドロップ枚数/複合">;
    FSeek(p + 88);  uint32 num10Rings<comment="10リングドロップ枚数">;
    FSeek(p + 92);  uint32 numSkillPieces<comment="スキルピースドロップ数">;
    FSeek(p + 96);  uint32 skillPieceExp<comment="スキルピース1つあたりの経験値量">;
    FSeek(p + 100); float rareDropCoolTime<comment="レアドロップクールタイム[sec]">;

    FSeek(p + 104);
} CyloopDropItemParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float damageRate<comment="ダメージ値倍率">;
    FSeek(p + 4);  float stunRate<comment="スタン値倍率">;
    FSeek(p + 8);  float staggerRate<comment="怯み値倍率">;
    FSeek(p + 12); float velocityRate<comment="ダメージ速度倍率">;

    FSeek(p + 16);
} CyloopShapeWindCountParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); CyloopShapeWindCountParameter param[5]<comment="多重数別パラメータ",optimize=false>;

    FSeek(p + 80);
} CyloopShapeWindEffectParaemter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); CyloopShapeWindEffectParaemter wind<comment="多重">;

    FSeek(p + 80);
} CyloopShapeEffectParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    CyloopLocusParameter locus<comment="軌跡">;
    FSeek(p + 1248); CyloopLocusParameter locusQuick<comment="軌跡/Quick">;
    FSeek(p + 2496); CyloopLocusParameter locusSuperSonic<comment="軌跡/スパソニ">;
    FSeek(p + 3744); CyloopLocusParameter locusSuperSonicQuick<comment="軌跡/スパソニ/Quick">;
    FSeek(p + 4992); colorF auraColor<comment="オーラカラー">;
    FSeek(p + 5008); CyloopDropItemParameter dropItem<comment="ドロップアイテム">;
    FSeek(p + 5112); float needSpeed<comment="Cyloopを行える最低速度">;
    FSeek(p + 5116); CyloopShapeEffectParameter shapeEffect<comment="形状効果">;
    FSeek(p + 5196); float lossQuickCyloopEnergy<comment="QuickCyloopのゲージ消費量">;
    FSeek(p + 5200); float recoveryQuickCyloopEnergyByTime<comment="QuickCyloopのゲージの時間単位回復量">;
    FSeek(p + 5204); float recoveryQuickCyloopEnergyByTimeInMinigame<comment="ミニゲーム中のQuickCyloopのゲージの時間単位回復量">;
    FSeek(p + 5208); float recoveryFriendsQuickCyloopEnergyByRing<comment="フレンズQuickCyloopのゲージのリング回復量">;

    FSeek(p + 5216);
} PlayerParamCyloop;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     CommonPackage commonPackage;
    FSeek(p + 18960); PlayerParamCombo combo<comment="コンボ">;
    FSeek(p + 19696); AmyParamParryDebuff parryDebuff<comment="パリィ毒効果">;
    FSeek(p + 19712); PlayerParamCyloop cyloop<comment="Cyloop">;

    FSeek(p + 24928);
} CommonPackageAmy;

enum<sint8> SupportedPlane
{
    Flat = 0,
    Slope = 1,
    Wall = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float movableMaxSlope<comment="移動可能な傾斜変化量[deg]">;
    FSeek(p + 4);  float activeLandingSlope<comment="地面探索傾斜[deg]">;
    FSeek(p + 8);  float activeLandingSlopeInBoost<comment="地面探索傾斜/ブースト中[deg]">;
    FSeek(p + 12); float landingMaxSlope<comment="平面の最大傾斜[deg]">;
    FSeek(p + 16); float slidingMaxSlope<comment="斜面の最大傾斜[deg]">;
    FSeek(p + 20); float wallAngleMaxSlope<comment="壁面の最大傾斜[deg]">;
    FSeek(p + 24); SupportedPlane onStand<comment="直立可能なサポート面">;
    FSeek(p + 25); SupportedPlane onRunInAir<comment="空中から走行可能なサポート面">;
    FSeek(p + 26); SupportedPlane onRun<comment="走行可能なサポート面">;
    FSeek(p + 27); bool moveHolding<comment="地面に張り付いて移動するか">;
    FSeek(p + 28); bool wallSlideSlowInBoost<comment="ブースト中の壁衝突で減速するか">;
    FSeek(p + 29); bool attrWallOnGround<comment="壁面属性に接地可能か">;
    FSeek(p + 32); float priorityInputTime<comment="先行入力時間">;
    FSeek(p + 36); sint32 capacityRings<comment="リング所持数">;
    FSeek(p + 40); sint32 capacityRingsLvMax<comment="リング所持数/LvMax">;
    FSeek(p + 44); float collectRingRange<comment="リング回収範囲">;

    FSeek(p + 48);
} PlayerParamCommon;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initial<comment="初速">;
    FSeek(p + 4);  float min<comment="最低速度">;
    FSeek(p + 8);  float max<comment="最高速度">;
    FSeek(p + 12); float minTurn<comment="旋回中速度">;

    FSeek(p + 16);
} PlayerParamSpeedData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float force<comment="最大力">;
    FSeek(p + 4);  float force2<comment="最大力[最大]">;
    FSeek(p + 8);  float damperRange<comment="速度ダンパー範囲">;
    FSeek(p + 12); float jerkMin<comment="最低躍度">;
    FSeek(p + 16); float jerkMax<comment="最高躍度">;

    FSeek(p + 20);
} PlayerParamSpeedAcceleData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float force<comment="最大力">;
    FSeek(p + 4);  float damperRange<comment="速度ダンパー範囲">;
    FSeek(p + 8);  float jerkMin<comment="最低躍度">;
    FSeek(p + 12); float jerkMax<comment="最高躍度">;

    FSeek(p + 16);
} PlayerParamSpeedAcceleData2;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   PlayerParamSpeedData normal<comment="通常">;
    FSeek(p + 16);  PlayerParamSpeedData normal2<comment="通常[最大]">;
    FSeek(p + 32);  PlayerParamSpeedData boost<comment="ブースト">;
    FSeek(p + 48);  PlayerParamSpeedData boost2<comment="ブースト[最大]">;
    FSeek(p + 64);  PlayerParamSpeedData boostLvMax<comment="ブーストLvMax">;
    FSeek(p + 80);  PlayerParamSpeedData boostLvMax2<comment="ブーストLvMax[最大]">;
    FSeek(p + 96);  float maxSpeedOver<comment="オーバースピード最高速度">;
    FSeek(p + 100); float opitonMaxSpeedLimitMin<comment="最大速度リミット[最小]">;
    FSeek(p + 104); float opitonMaxSpeedLimitMax<comment="最大速度リミット[最大]">;
    FSeek(p + 108); float thresholdStopSpeed<comment="停止判定速度">;
    FSeek(p + 112); float maxFallSpeed<comment="最高落下速度">;
    FSeek(p + 116); PlayerParamSpeedAcceleData accele<comment="加速度">;
    FSeek(p + 136); PlayerParamSpeedAcceleData decele<comment="減速度">;
    FSeek(p + 156); PlayerParamSpeedAcceleData2 deceleNeutralMin<comment="ニュートラル時最小減速度">;
    FSeek(p + 172); PlayerParamSpeedAcceleData2 deceleNeutralMax<comment="ニュートラル時最大減速度">;
    FSeek(p + 188); float acceleAuto<comment="加速度/オートラン">;
    FSeek(p + 192); float deceleAuto<comment="減速度/オートラン">;
    FSeek(p + 196); float turnDeceleAngleMin<comment="旋回減速/開始角度">;
    FSeek(p + 200); float turnDeceleAngleMax<comment="旋回減速/最大角度">;
    FSeek(p + 204); float maxGravityAccele<comment="斜面加速度">;
    FSeek(p + 208); float maxGravityDecele<comment="斜面減速度">;
    FSeek(p + 212); float deceleSquat<comment="しゃがみ時の減速度">;
    FSeek(p + 216); float acceleSensitive<comment="加速感度">;
    FSeek(p + 220); float boostAnimSpeedInWater<comment="水中ブースト時のモーションに影響する速度">;

    FSeek(p + 224);
} PlayerParamSpeed;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float baseRotateForce<comment="基本旋回力">;
    FSeek(p + 4);  float baseRotateForce2<comment="基本旋回力[最大]">;
    FSeek(p + 8);  float baseRotateForceSpeed<comment="基本旋回力の基準速度">;
    FSeek(p + 12); float minRotateForce<comment="最小旋回力">;
    FSeek(p + 16); float maxRotateForce<comment="最大旋回力">;
    FSeek(p + 20); bool angleRotateForceDecayEnabled<comment="角度比旋回力減衰を常に適用するか">;
    FSeek(p + 24); float frontRotateRatio<comment="角度比旋回力減衰の正面方向への影響率">;
    FSeek(p + 28); float rotationForceDecaySpeed<comment="速度比旋回力減衰の減衰開始速度">;
    FSeek(p + 32); float rotationForceDecayRate<comment="速度比旋回力減衰の減衰レート">;
    FSeek(p + 36); float rotationForceDecayMax<comment="速度比旋回力減衰の最大減衰力">;
    FSeek(p + 40); float autorunRotateForce<comment="オートラン時の旋回力">;

    FSeek(p + 44);
} PlayerParamRotation;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float walkSpeed<comment="歩き速度">;
    FSeek(p + 4);  float sneakingSpeed<comment="忍び歩き速度">;
    FSeek(p + 8);  float animSpeedSneak<comment="忍び歩きのアニメーション再生速度">;
    FSeek(p + 12); float animSpeedWalk<comment="歩きのアニメーション再生速度">;
    FSeek(p + 16); float animSpeedRun<comment="走りのアニメーション再生速度">;
    FSeek(p + 20); float animSpeedBoost<comment="ブーストのアニメーション再生速度">;
    FSeek(p + 24); float animLRBlendSampleTime<comment="左右傾きの傾きのサンプル時間">;
    FSeek(p + 28); float animLRBlendAngleMin<comment="左右傾きの最小ブレンド角度">;
    FSeek(p + 32); float animLRBlendAngleMax<comment="左右傾きの最大ブレンド角度">;
    FSeek(p + 36); float animLRBlendSpeed<comment="左右傾きのブレンド速度">;
    FSeek(p + 40); float animLRBlendSpeedToCenter<comment="左右傾きが中央に戻る際のブレンド速度">;
    FSeek(p + 44); float minChangeWalkTime<comment="最低歩き移行動作時間">;
    FSeek(p + 48); float fallAnimationAngle<comment="落下時に落下アニメーションになる角度">;

    FSeek(p + 52);
} PlayerParamRunning;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float rotateSpeedMinFB<comment="前後方向の最小回転速度">;
    FSeek(p + 4);  float rotateSpeedMaxFB<comment="前後方向の最大回転速度">;
    FSeek(p + 8);  float rotateSpeedMinLR<comment="左右方向の最小回転速度">;
    FSeek(p + 12); float rotateSpeedMaxLR<comment="左右方向の最大回転速度">;

    FSeek(p + 16);
} PlayerParamBalanceData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  PlayerParamBalanceData standard<comment="standard">;
    FSeek(p + 16); PlayerParamBalanceData loop<comment="loop">;

    FSeek(p + 32);
} PlayerParamBalance;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialSpeedRatio<comment="ブレーキ開始時の速度減衰割合">;
    FSeek(p + 4);  float maxSpeed<comment="最高速度">;
    FSeek(p + 8);  float forceLand<comment="地上でのブレーキ力">;
    FSeek(p + 12); float forceAir<comment="空中でのブレーキ力">;
    FSeek(p + 16); float endSpeed<comment="ブレーキを終了する速度">;
    FSeek(p + 20); float stopTime<comment="停止状態で強制停止するまでの時間">;

    FSeek(p + 24);
} PlayerParamBrake;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float thresholdSpeed<comment="クイックターンが可能な速度">;
    FSeek(p + 4);  float thresholdAngle<comment="ターン入力と見なす角度">;
    FSeek(p + 8);  float turnAfterSpeed<comment="ターン後の走り出し速度">;
    FSeek(p + 12); bool stopEdge<comment="ターン中縁から落ちないようにするか">;

    FSeek(p + 16);
} PlayerParamTurn;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float preActionTime<comment="ボールになるまでの時間">;
    FSeek(p + 4);  float longPressTime<comment="最大ジャンプ固定時間[sec]">;
    FSeek(p + 8);  float addForceTime<comment="加速時間[sec]">;
    FSeek(p + 12); float force<comment="ジャンプ力">;
    FSeek(p + 16); float addForce<comment="上昇加速力">;
    FSeek(p + 20); float forceMin<comment="最小ジャンプ力">;
    FSeek(p + 24); float gravitySize<comment="重力サイズ">;

    FSeek(p + 28);
} PlayerParamJump;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float acceleForce<comment="水平加速力">;
    FSeek(p + 4);  float deceleForce<comment="水平減速力/通常">;
    FSeek(p + 8);  float deceleNeutralForce<comment="水平減速力/無入力">;
    FSeek(p + 12); float deceleBackForce<comment="水平減速力/逆入力">;
    FSeek(p + 16); float limitMin<comment="水平方向の最高速度の最低値">;
    FSeek(p + 20); float limitUpSpeed<comment="重力逆方向の初速制限">;
    FSeek(p + 24); float rotationForce<comment="旋回力[deg/sec]">;
    FSeek(p + 28); float rotationForceDecaySpeed<comment="速度比旋回力減衰の減衰開始速度">;
    FSeek(p + 32); float rotationForceDecayRate<comment="速度比旋回力減衰の減衰レート">;
    FSeek(p + 36); float rotationForceDecayMax<comment="速度比旋回力減衰の最大減衰力">;
    FSeek(p + 40); float baseAirDragScaleMin<comment="空気抵抗スケール[最小]">;
    FSeek(p + 44); float baseAirDragScaleMax<comment="空気抵抗スケール[最大]">;

    FSeek(p + 48);
} PlayerParamJumpSpeed;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float initialSpeed<comment="垂直方向の初速">;
    FSeek(p + 4); float bounceSpeed<comment="垂直方向の初速(バウンド時)">;
    FSeek(p + 8); float limitSpeedMin<comment="水平方向の最高速度の最低値">;

    FSeek(p + 12);
} PlayerParamDoubleJump;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float thresholdVertSpeed<comment="落下とみなす垂直速度">;
    FSeek(p + 4);  float tolerateJumpTime<comment="ジャンプへの遷移を許容する時間">;
    FSeek(p + 8);  float fallEndDelayTime<comment="落下失敗用、カウントダウンが開始される時間">;
    FSeek(p + 12); float fallEndFadeTime<comment="落下失敗用、カウントダウン開始からの猶予時間">;
    FSeek(p + 16); float acceleForce<comment="加速度[m/sec]">;
    FSeek(p + 20); float deceleForce<comment="減速度[m/sec]">;
    FSeek(p + 24); float overSpeedDeceleForce<comment="オーバースピード減速度[m/sec]">;
    FSeek(p + 28); float rotationForce<comment="旋回力[deg/sec]">;
    FSeek(p + 32); float rotationForceDecaySpeed<comment="速度比旋回力減衰の減衰開始速度">;
    FSeek(p + 36); float rotationForceDecayRate<comment="速度比旋回力減衰の減衰レート">;
    FSeek(p + 40); float rotationForceDecayMax<comment="速度比旋回力減衰の最大減衰力">;

    FSeek(p + 44);
} PlayerParamFall;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float invincibleTime<comment="予備無敵時間">;

    FSeek(p + 4);
} PlayerParamDamageCommon;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialHorzSpeed<comment="デフォルト水平初速">;
    FSeek(p + 4);  float initialVertSpeed<comment="デフォルト垂直初速">;
    FSeek(p + 8);  float deceleForce<comment="減速度/空中">;
    FSeek(p + 12); float transitFallTime<comment="落下遷移時間">;
    FSeek(p + 16); float gravityScale<comment="重力スケール">;

    FSeek(p + 20);
} PlayerParamDamageNormal;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float fixedTime<comment="アクション固定時間">;

    FSeek(p + 4);
} PlayerParamDamageTurnBack;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialHorzSpeed<comment="デフォルト水平初速">;
    FSeek(p + 4);  float initialVertSpeed<comment="デフォルト垂直初速">;
    FSeek(p + 8);  float deceleForceInAir<comment="減速度/空中">;
    FSeek(p + 12); float deceleForceOnGround<comment="減速度/地上">;
    FSeek(p + 16); float gravityScale<comment="重力スケール">;
    FSeek(p + 20); float downTime<comment="ダウン時間">;
    FSeek(p + 24); float transitTime<comment="次の行動へ割込遷移可能になる時間">;

    FSeek(p + 28);
} PlayerParamDamageBlowOff;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float vertSpeed<comment="垂直速度">;
    FSeek(p + 4);  float horzSpeed<comment="水平速度">;
    FSeek(p + 8);  float deceleForce<comment="減速度">;
    FSeek(p + 12); float transitTime<comment="次の行動へ割込遷移可能になる時間">;

    FSeek(p + 16);
} PlayerParamDamageGuarded;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float actionTime<comment="アクション時間">;
    FSeek(p + 4);  float minSpeed<comment="最小速度">;
    FSeek(p + 8);  float lossSpeed<comment="減速速度">;
    FSeek(p + 12); float lossTime<comment="減速時間">;

    FSeek(p + 16);
} PlayerParamDamageRunning;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float actionTime<comment="デフォルトアクション時間">;

    FSeek(p + 4);
} PlayerParamDamageQuake;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 jumpVelocity<comment="ジャンプ速度">;
    FSeek(p + 16); float gravitySize<comment="重力サイズ">;
    FSeek(p + 20); float invincibleTime<comment="予備無敵時間">;
    FSeek(p + 24); float noActionTime<comment="アクション禁止時間">;

    FSeek(p + 32);
} PlayerParamDamageLava;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 jumpVelocity<comment="ジャンプ速度">;
    FSeek(p + 16); float gravitySize<comment="重力サイズ">;
    FSeek(p + 20); float invincibleTime<comment="予備無敵時間">;
    FSeek(p + 24); float noActionTime<comment="アクション禁止時間">;
    FSeek(p + 28); float gravitySizeForFall<comment="落下時重力サイズ">;
    FSeek(p + 32); float maxFallSpeed<comment="最高落下速度">;
    FSeek(p + 40); cstring cameraShakeName<comment="爆発時カメラ振動名">;
    FSeek(p + 56); cstring vibrationName<comment="爆発時コントローラ振動名">;

    FSeek(p + 80);
} PlayerParamDamageMine;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   PlayerParamDamageCommon common<comment="共通">;
    FSeek(p + 4);   PlayerParamDamageNormal normal<comment="通常">;
    FSeek(p + 24);  PlayerParamDamageTurnBack turnBack<comment="仰け反る">;
    FSeek(p + 28);  PlayerParamDamageBlowOff blowOff<comment="吹き飛ぶ">;
    FSeek(p + 56);  PlayerParamDamageGuarded guarded<comment="ガードされた">;
    FSeek(p + 72);  PlayerParamDamageGuarded guardedSS<comment="ガードされた[スパソニ]">;
    FSeek(p + 88);  PlayerParamDamageRunning running<comment="走りながら">;
    FSeek(p + 104); PlayerParamDamageQuake quake<comment="よろける">;
    FSeek(p + 112); PlayerParamDamageLava lava<comment="溶岩">;
    FSeek(p + 144); PlayerParamDamageMine mine<comment="地雷">;

    FSeek(p + 224);
} PlayerParamDamage;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float invincibleTime<comment="無敵時間">;
    FSeek(p + 4); float initialHorzSpeed<comment="デフォルト水平初速">;
    FSeek(p + 8); float initialVertSpeed<comment="デフォルト垂直初速">;

    FSeek(p + 12);
} PlayerParamDeadNormal;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); PlayerParamDeadNormal normal<comment="通常">;

    FSeek(p + 12);
} PlayerParamDead;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float minSpeed<comment="最低速度">;
    FSeek(p + 4);  float endSpeed<comment="終了速度">;
    FSeek(p + 8);  float deceleJerk<comment="減速躍度">;
    FSeek(p + 12); float deceleJerkContinue<comment="ボタン入力中の減速躍度">;
    FSeek(p + 16); float deceleForceMax<comment="最大減速度">;
    FSeek(p + 20); float baseRotateForce<comment="基本旋回力">;
    FSeek(p + 24); float baseRotateForceSpeed<comment="基本旋回力の基準速度">;
    FSeek(p + 28); float maxRotateForce<comment="最大旋回力">;
    FSeek(p + 32); float frontRotateRatio<comment="正面方向旋回率">;
    FSeek(p + 36); float rotationForceAutoRun<comment="旋回力[オートラン]">;
    FSeek(p + 40); float movableMaxSlope<comment="斜面とみなす傾斜[deg]">;
    FSeek(p + 44); float gravitySize<comment="重力サイズ">;
    FSeek(p + 48); float minContinueTime<comment="最小継続時間">;
    FSeek(p + 52); float maxAutoRunTime<comment="オートランでスライディングを継続する最大時間">;
    FSeek(p + 56); float endSpeedAutoRun<comment="オートラン中のスライディング終了速度">;
    FSeek(p + 60); float loopKickTransitTime<comment="ループキックに遷移する時間">;

    FSeek(p + 64);
} PlayerParamSliding;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialSpeed<comment="落下/初速">;
    FSeek(p + 4);  float initialAccele<comment="落下/初加速度">;
    FSeek(p + 8);  float maxAccele<comment="落下/最高加速度">;
    FSeek(p + 12); float jerk<comment="落下/躍度">;
    FSeek(p + 16); float maxFallSpeed<comment="落下/最高落下速度">;
    FSeek(p + 20); float angle<comment="落下/角度">;
    FSeek(p + 24); float landingCancelTime<comment="着地/割込不能時間">;
    FSeek(p + 28); float boundStompingCollisionScale<comment="バウンドストンプ3回目のコリジョンサイズスケール">;

    FSeek(p + 32);
} PlayerParamStomping;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float maxSpeed<comment="最高速度">;
    FSeek(p + 4);  float maxBoostSpeed<comment="ブースト最高速度">;
    FSeek(p + 8);  float acceleForce<comment="加速度">;
    FSeek(p + 12); float deceleForce<comment="減速度">;
    FSeek(p + 16); float limitSpeedMin<comment="最低保証速度">;

    FSeek(p + 20);
} PlayerParamGrind;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialSpeed<comment="初速">;
    FSeek(p + 4);  float maxSpeed<comment="最高速度">;
    FSeek(p + 8);  float brakeAngle<comment="ブレーキを始める角度">;
    FSeek(p + 12); float highBrakeAngle<comment="強いブレーキを始める角度">;
    FSeek(p + 16); float brakeForce<comment="坂滑り後の斜面ブレーキ速度">;
    FSeek(p + 20); float brakeForceHigh<comment="坂滑り後の水平面ブレーキ速度">;
    FSeek(p + 24); float gravitySize<comment="重力サイズ">;
    FSeek(p + 28); float gravitySizeAir<comment="空中重力サイズ">;
    FSeek(p + 32); float endSpeedFront<comment="前方向滑り終了速度閾値">;
    FSeek(p + 36); float endSpeedBack<comment="後方向滑り終了速度閾値">;
    FSeek(p + 40); float reverseFallTime<comment="逆さま姿勢による落下への遷移時間">;
    FSeek(p + 44); float fallToSlipTime<comment="落下から滑りに遷移する閾時間">;
    FSeek(p + 48); float slipIdlingTime<comment="坂滑り開始時のスリップ時間">;
    FSeek(p + 52); float minSlipTime<comment="最小スリップ時間">;

    FSeek(p + 56);
} PlayerParamFallSlope;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float thresholdSpeed<comment="閾値速度">;
    FSeek(p + 4); float maxSpeed<comment="最高速度">;
    FSeek(p + 8); float flipAngle<comment="バックフリップ角度">;

    FSeek(p + 12);
} PlayerParamFallFlip;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enabled<comment="転倒アクションをするか">;
    FSeek(p + 4);   float sideSpinAngle<comment="転倒空中が横回転になる傾き">;
    FSeek(p + 8);   float initialVertSpeed<comment="転倒空中の初速">;
    FSeek(p + 12);  float gravitySize<comment="転倒空中の重力サイズ">;
    FSeek(p + 16);  float gravitySize2<comment="転倒空中の重力サイズ[最大]">;
    FSeek(p + 20);  float deceleForceInAir<comment="転倒空中の減速度">;
    FSeek(p + 24);  float minSpeedInAir<comment="転倒空中の最低速度">;
    FSeek(p + 28);  float rotateEaseTimeLeftRight<comment="左右転倒の旋回開始補間時間">;
    FSeek(p + 32);  float rotateEaseTimeFrontBack<comment="前後転倒の旋回開始補間時間">;
    FSeek(p + 36);  float rotateSpeedMinLeftRight<comment="左右転倒の最小旋回速度">;
    FSeek(p + 40);  float rotateSpeedMaxLeftRight<comment="左右転倒の最大旋回速度">;
    FSeek(p + 44);  float rotateSpeedMinFrontBack<comment="前後転倒の最小旋回速度">;
    FSeek(p + 48);  float rotateSpeedMaxFrontBack<comment="前後転倒の最大旋回速度">;
    FSeek(p + 52);  float angleLeftRightStagger<comment="転倒判定の左右角度/よろけ">;
    FSeek(p + 56);  float angleLeftRightRoll<comment="転倒判定の左右角度/転倒">;
    FSeek(p + 60);  float angleFrontBackRoll<comment="転倒判定の前後角度/転倒">;
    FSeek(p + 64);  float angleBigRoll<comment="転倒判定が大転倒になる地面の角度">;
    FSeek(p + 68);  float inRunTime<comment="転倒判定の開始時間1">;
    FSeek(p + 72);  float inAirTime<comment="転倒判定の開始時間2">;
    FSeek(p + 76);  float rollSpeedFront<comment="転倒時の前方向速度">;
    FSeek(p + 80);  float bigRollVelocityRatio<comment="大転倒時の速度減衰率">;
    FSeek(p + 84);  float dropDashHoldTime<comment="ドロップダッシュ移行ホールド時間">;
    FSeek(p + 88);  float airBrakeVertSpeed<comment="垂直エアブレーキがかかる垂直方向速度">;
    FSeek(p + 92);  float airBrakeForce<comment="垂直エアブレーキ力">;
    FSeek(p + 96);  float airTrickHeight<comment="エアトリック可能な高度">;
    FSeek(p + 100); float airTrickTime<comment="エアトリック可能になるまでの時間">;

    FSeek(p + 104);
} PlayerParamTumble;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float jumpForce<comment="ジャンプ力">;
    FSeek(p + 4);  float jumpAddForce<comment="ジャンプ上昇加速力">;
    FSeek(p + 8);  float addTime<comment="最長加速時間">;
    FSeek(p + 12); float acceleForce<comment="水平加速力">;
    FSeek(p + 16); float deceleForce<comment="水平減速力">;
    FSeek(p + 20); float brakeForce<comment="ブレーキ減速力">;
    FSeek(p + 24); float limitSpeedMin<comment="水平移動最低速度">;
    FSeek(p + 28); float limitSpeedMax<comment="水平移動最高速度">;

    FSeek(p + 32);
} PlayerParamSpinAttack;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float speed<comment="速度">;

    FSeek(p + 4);
} PlayerParamHomingAttackData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float bounceVertSpeed<comment="ノックバック垂直速度">;
    FSeek(p + 4);  float bounceHorzSpeed<comment="ノックバック水平速度">;
    FSeek(p + 8);  float bounceAcceleForce<comment="ノックバック加速度">;
    FSeek(p + 12); float bounceDeceleForce<comment="ノックバック減速度">;
    FSeek(p + 16); float bounceAngleWidth<comment="ノックバック角度幅">;
    FSeek(p + 20); float bounceTime<comment="ノックバック挙動時間">;
    FSeek(p + 24); float attackDownTime<comment="攻撃不能時間">;
    FSeek(p + 28); float attackDownTimeForStomp<comment="ストンピング不能時間">;

    FSeek(p + 32);
} PlayerParamHomingBounceData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   PlayerParamHomingAttackData sonic<comment="攻撃/ソニック">;
    FSeek(p + 4);   PlayerParamHomingAttackData supersonic<comment="攻撃/スーパーソニック">;
    FSeek(p + 8);   PlayerParamHomingBounceData sonicBounce<comment="バウンス/ソニック[強]">;
    FSeek(p + 40);  PlayerParamHomingBounceData sonicBounceWeak<comment="バウンス/ソニック[弱]">;
    FSeek(p + 72);  PlayerParamHomingBounceData sonicBounceStorm<comment="バウンス/ソニック[嵐中]">;
    FSeek(p + 104); PlayerParamHomingBounceData sonicBounceStormSwirl<comment="バウンス/ソニック[嵐吸い込み中]">;
    FSeek(p + 136); PlayerParamHomingBounceData supersonicBounce<comment="バウンス/スーパーソニック">;
    FSeek(p + 168); float cameraEaseInTime<comment="ホーミングカメラ開始補間時間">;
    FSeek(p + 172); float cameraEaseOutTime<comment="ホーミングカメラ終了補間時間">;

    FSeek(p + 176);
} PlayerParamHomingAttack;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float bounceVertSpeed<comment="ノックバック垂直速度">;
    FSeek(p + 4);  float bounceHorzSpeed<comment="ノックバック水平速度">;
    FSeek(p + 8);  float attackDownTime<comment="攻撃後再攻撃不能時間">;
    FSeek(p + 12); float enableHomingTime<comment="攻撃後攻撃可能時間">;

    FSeek(p + 16);
} PlayerParamHitEnemy;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float maxVertSpeed<comment="最高落下速度">;
    FSeek(p + 4);  float acceleVertForce<comment="落下加速度">;
    FSeek(p + 8);  float maxHorzSpeed<comment="最高水平速度">;
    FSeek(p + 12); float acceleHorzForce<comment="水平移動加速度">;

    FSeek(p + 16);
} SpeedParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  SpeedParam normal<comment="通常">;
    FSeek(p + 16); SpeedParam fast<comment="ブースト">;
    FSeek(p + 32); SpeedParam damaged<comment="ダメージ中">;
    FSeek(p + 48); SpeedParam ringdash<comment="リングダッシュ中">;
    FSeek(p + 64); float startHeight<comment="開始に必要な高度">;
    FSeek(p + 68); float startSpeed<comment="開始に必要な落下速度">;
    FSeek(p + 72); float deceleVertForce<comment="落下減速度">;
    FSeek(p + 76); float deceleHorzForce<comment="水平減速度">;
    FSeek(p + 80); float deceleNeutralForce<comment="無入力減速度">;
    FSeek(p + 84); float damageTime<comment="ダメージ時間">;
    FSeek(p + 88); float ringdashTime<comment="リングダッシュ時間">;

    FSeek(p + 92);
} PlayerParamDiving;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float damperV<comment="垂直方向の速度減衰率">;
    FSeek(p + 4);  float damperH<comment="水平方向の速度減衰率">;
    FSeek(p + 8);  float accelRate<comment="ファンからの距離に応じた加速率">;
    FSeek(p + 12); float moveForceFV<comment="スティックによる移動加速度FV">;
    FSeek(p + 16); float moveForceSV<comment="スティックによる移動加速度SV">;
    FSeek(p + 20); float jumpCheckSpeed<comment="ジャンプから移行できる速度">;

    FSeek(p + 24);
} PlayerParamFan;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float jumpSpeed<comment="上方向初速">;
    FSeek(p + 4);  float backSpeed<comment="後方向初速">;
    FSeek(p + 8);  float downAccel<comment="重力加速度">;
    FSeek(p + 12); float damperV<comment="垂直方向ダンパー">;
    FSeek(p + 16); float damperH<comment="水平方向ダンパー">;
    FSeek(p + 20); float time<comment="時間">;

    FSeek(p + 24);
} PlayerParamBackflip;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startSpeed<comment="初速">;
    FSeek(p + 4);  float maxSpeed<comment="最高速度">;
    FSeek(p + 8);  float accel<comment="加速度">;
    FSeek(p + 12); float brake<comment="減速度">;
    FSeek(p + 16); float damageSpeed<comment="ダメージ時初速">;
    FSeek(p + 20); float damageBrake<comment="ダメージ時減速度">;
    FSeek(p + 24); float steeringSpeed<comment="回転速度">;
    FSeek(p + 28); float endSteeringSpeed<comment="回転速度になる速度">;

    FSeek(p + 32);
} PlayerParamSlowMove;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startSlopeAngle<comment="発動斜度">;
    FSeek(p + 4);  float endSlopeAngle<comment="終了斜度">;
    FSeek(p + 8);  float startSpeed<comment="発動速度">;
    FSeek(p + 12); float endSpeed<comment="終了速度">;
    FSeek(p + 16); float stickAngle<comment="ブレーキ判定スティック角度">;
    FSeek(p + 20); float brake<comment="減速度">;
    FSeek(p + 24); float forceBrake<comment="スティック入力時の減速度">;
    FSeek(p + 28); float maxSpeed<comment="最高速度">;

    FSeek(p + 32);
} PlayerParamSpin;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float maxSpeed<comment="最高速度">;
    FSeek(p + 4);   float walkSpeed<comment="移動速度 基本値">;
    FSeek(p + 8);   float walkSpeedMax<comment="移動速度 最大値">;
    FSeek(p + 12);  float runSpeed<comment="ダッシュ移動速度 基本値">;
    FSeek(p + 16);  float runSpeedMax<comment="ダッシュ移動速度 最大値">;
    FSeek(p + 20);  float walkSpeedOnMesh<comment="移動速度 変形メッシュ上 基本値">;
    FSeek(p + 24);  float walkSpeedOnMeshMax<comment="移動速度 変形メッシュ上 最大値">;
    FSeek(p + 28);  float runSpeedOnMesh<comment="ダッシュ移動速度 変形メッシュ上 基本値">;
    FSeek(p + 32);  float runSpeedOnMeshMax<comment="ダッシュ移動速度 変形メッシュ上 最大値">;
    FSeek(p + 36);  float minAccessSpeed<comment="壁移動移行最低速度">;
    FSeek(p + 40);  float stickSpeed<comment="スティックで貼り付ける速度">;
    FSeek(p + 44);  float gravity<comment="専用重力加速度">;
    FSeek(p + 48);  float accel<comment="加速度">;
    FSeek(p + 52);  float brake<comment="減速ブレーキ">;
    FSeek(p + 56);  float stopBrake<comment="停止ブレーキ">;
    FSeek(p + 60);  float fallSpeed<comment="落下移行速度">;
    FSeek(p + 64);  float steeringSpeed1<comment="回転速度1">;
    FSeek(p + 68);  float steeringSpeed2<comment="回転速度2">;
    FSeek(p + 72);  float startSteeringSpeed<comment="回転速度1になる速度">;
    FSeek(p + 76);  float endSteeringSpeed<comment="回転速度2になる速度">;
    FSeek(p + 80);  float startTime<comment="開始に必要な走行時間">;
    FSeek(p + 84);  float useEnergySpeedBase<comment="壁移動エネルギー消費速度 ベース">;
    FSeek(p + 88);  float useEnergySpeedBaseOnMesh<comment="壁移動エネルギー消費速度 ベース 変形メッシュ上">;
    FSeek(p + 92);  float useEnergySpeedVal<comment="壁移動エネルギー消費速度 可変">;
    FSeek(p + 96);  float useEnergySpeedValOnMesh<comment="壁移動エネルギー消費速度 可変 変形メッシュ上">;
    FSeek(p + 100); float useEnergyAngle<comment="壁移動エネルギー可変角度">;
    FSeek(p + 104); float useEnergyAngleOnMesh<comment="壁移動エネルギー可変角度 変形メッシュ上">;
    FSeek(p + 108); float brakeStartEnergy<comment="減速開始エネルギー">;
    FSeek(p + 112); float brakeStartEnergyOnMesh<comment="減速開始エネルギー 変形メッシュ上">;
    FSeek(p + 116); float homingSearchDistanceNear<comment="ホーミング索敵範囲　近">;
    FSeek(p + 120); float homingSearchDistanceFar<comment="ホーミング索敵範囲　遠">;
    FSeek(p + 124); float wallBumpHeightUpper<comment="壁の凹凸の高さ 上り">;
    FSeek(p + 128); float wallBumpHeightUnder<comment="壁の凹凸の高さ 下り">;
    FSeek(p + 132); float recoveryCheckTime<comment="吹っ飛び移行時のリカバリーターゲット検索時間">;

    FSeek(p + 136);
} PlayerParamWallMove;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float gravitySize<comment="張り付き/重力サイズ">;
    FSeek(p + 4);  float minTime<comment="張り付き/最小時間">;
    FSeek(p + 8);  float maxTime<comment="張り付き/最大時間">;
    FSeek(p + 12); float stopTime<comment="張り付き/滑らない時間">;
    FSeek(p + 16); float maxDownSpeed<comment="張り付き/最高滑落速度">;
    FSeek(p + 20); float fallGroundDistance<comment="張り付き/落下になる地面までの高さ">;
    FSeek(p + 24); float frontForce<comment="ジャンプ/正面方向速度">;
    FSeek(p + 28); float upForce<comment="ジャンプ/上方向速度">;
    FSeek(p + 32); float impulseTime<comment="ジャンプ/射出時間">;

    FSeek(p + 36);
} PlayerParamWallJump;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float stepSpeedFront<comment="前方移動速度">;
    FSeek(p + 4);  float stepSpeedFrontDash<comment="前方移動速度(ダッシュ時)">;
    FSeek(p + 8);  float stepSpeedSide<comment="側方移動速度">;
    FSeek(p + 12); float stepSpeedSideDash<comment="側方移動速度(ダッシュ時)">;
    FSeek(p + 16); float stepSpeedBack<comment="後方移動速度">;
    FSeek(p + 20); float stepDashRate<comment="ダッシュ時の倍率">;
    FSeek(p + 24); float maxAnimSpeed<comment="移動モーション再生レート 最大値">;
    FSeek(p + 28); float exhaustAngle<comment="クライミング疲労一定角度">;
    FSeek(p + 32); float exhaustAngleOnMesh<comment="クライミング疲労一定角度 変形メッシュ上">;
    FSeek(p + 36); float exhaustBase<comment="クライミング疲労基本量　開始角度時の1mあたりの消費量">;
    FSeek(p + 40); float exhaustBaseOnMesh<comment="クライミング疲労基本量　 変形メッシュ上">;
    FSeek(p + 44); float exhaustRate<comment="クライミング疲労増加率　角度に比例">;
    FSeek(p + 48); float exhaustRateOnMesh<comment="クライミング疲労増加率　 変形メッシュ上">;
    FSeek(p + 52); float useGrabGaugeSpeed<comment="握力ゲージ消費速度">;
    FSeek(p + 56); float useGrabGaugeSpeedOnMesh<comment="握力ゲージ消費速度  変形メッシュ上">;
    FSeek(p + 60); float useGrabGaugeTurbo<comment="ターボ時握力ゲージ消費量">;
    FSeek(p + 64); float useGrabGaugeTurboOnMesh<comment="ターボ時握力ゲージ消費量  変形メッシュ上">;
    FSeek(p + 68); float homingSearchDistanceNear<comment="ホーミング索敵範囲　近">;
    FSeek(p + 72); float homingSearchDistanceFar<comment="ホーミング索敵範囲　遠">;
    FSeek(p + 76); float resetAngle<comment="姿勢の重力上方向リセットが起こる角度">;
    FSeek(p + 80); float recoveryCheckTime<comment="吹っ飛び移行時のリカバリーターゲット検索時間">;

    FSeek(p + 84);
} PlayerParamClimbing;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float time<comment="滑落時間">;
    FSeek(p + 4);  float speed<comment="滑落速度">;
    FSeek(p + 8);  float speedOnMesh<comment="滑落速度 メッシュ上">;
    FSeek(p + 12); float accel<comment="加速度">;
    FSeek(p + 16); float brake<comment="減速度">;
    FSeek(p + 20); float brakeOnMesh<comment="減速度 メッシュ上">;

    FSeek(p + 24);
} PlayerParamSlideDown;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float consumptionRate<comment="消費速度/ソニック">;
    FSeek(p + 4);  float consumptionRateSS<comment="消費速度/スーパーソニック">;
    FSeek(p + 8);  float recoveryRate<comment="回復速度/ソニック">;
    FSeek(p + 12); float recoveryRateSS<comment="回復速度/スーパーソニック">;
    FSeek(p + 16); float reigniteRatio<comment="再点火許容レート">;
    FSeek(p + 20); float recoveryByRing<comment="リングによる回復量">;
    FSeek(p + 24); float recoveryByAttack<comment="攻撃による回復量">;
    FSeek(p + 28); float blurPowers[3]<comment="ブースト中のブラー強度",optimize=false>;
    FSeek(p + 40); float blurEaseInTime<comment="ブースト開始時のブラー補間時間">;
    FSeek(p + 44); float blurEaseOutTime<comment="ブースト終了時のブラー補間時間">;
    FSeek(p + 48); float endSpeed<comment="ブースト解除の下限速度">;
    FSeek(p + 52); float powerBoostCoolTime<comment="パワーブースト演出のクールタイム">;
    FSeek(p + 56); float infinityBoostTime<comment="無限ブースト時間">;

    FSeek(p + 60);
} PlayerParamBoost;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startHSpeed<comment="水平方向初速  基本値">;
    FSeek(p + 4);  float startHSpeedMax<comment="水平方向初速  最高値">;
    FSeek(p + 8);  float startVSpeed<comment="垂直方向初速">;
    FSeek(p + 12); float minHSpeed<comment="水平方向最低速度 基本値">;
    FSeek(p + 16); float minHSpeedMax<comment="水平方向最低速度 最高値">;
    FSeek(p + 20); float brakeTime<comment="初速から最低速度になるまでの時間">;
    FSeek(p + 24); float minKeepTime<comment="最低初速持続時間">;
    FSeek(p + 28); float maxKeepTime<comment="最高初速持続時間">;
    FSeek(p + 32); float maxTime<comment="最高持続時間">;
    FSeek(p + 36); float gravityRate<comment="重力加速度倍率">;
    FSeek(p + 40); float steeringSpeed<comment="回転速度">;
    FSeek(p + 44); float additionalTransitTime<comment="落下状態になってもAirBoostからの遷移とみなす追加時間">;
    FSeek(p + 48); float supersonicTime<comment="スパソニのオートラン中入力時の判定時間">;

    FSeek(p + 52);
} PlayerParamAirBoost;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialSideSpeed<comment="横方向の初速">;
    FSeek(p + 4);  float acceleSideForce<comment="横方向の加速度">;
    FSeek(p + 8);  float deceleSideForce<comment="横方向の減速度">;
    FSeek(p + 12); float maxSideSpeed<comment="横方向の最高速度">;

    FSeek(p + 16);
} PlayerParamAutorun;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float speed<comment="側転速度">;
    FSeek(p + 4);  float brakeForce<comment="側転ブレーキ力">;
    FSeek(p + 8);  float motionSpeedRatio<comment="モーション速度比率">;
    FSeek(p + 12); float stepSpeed<comment="ステップ速度">;
    FSeek(p + 16); float maxStepDistance<comment="最大ステップ距離">;
    FSeek(p + 20); float minStepDistance<comment="最小ステップ距離">;
    FSeek(p + 24); float maxStepSpeed<comment="ステップ距離が最大になる速度">;
    FSeek(p + 28); float minStepSpeed<comment="ステップ距離が最小になる速度">;

    FSeek(p + 32);
} PlayerParamSideStep;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float speed<comment="側転速度">;
    FSeek(p + 4);  float brakeForce<comment="側転ブレーキ力">;
    FSeek(p + 8);  float motionSpeedRatio<comment="モーション速度比率">;
    FSeek(p + 12); float stepSpeed<comment="ステップ速度">;
    FSeek(p + 16); float maxStepDistance<comment="最大ステップ距離">;
    FSeek(p + 20); float minStepDistance<comment="最小ステップ距離">;
    FSeek(p + 24); float maxStepSpeed<comment="ステップ距離が最大になる速度">;
    FSeek(p + 28); float minStepSpeed<comment="ステップ距離が最小になる速度">;

    FSeek(p + 32);
} PlayerParamSideStep2;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float needSpeed<comment="発動に必要な最低速度">;
    FSeek(p + 4);  float acceleForce<comment="前方への加速度">;
    FSeek(p + 8);  float acceleSideForce<comment="移動ラインへの引き込み加速度">;
    FSeek(p + 12); float stepInitialSpeed<comment="サイドステップの初速">;
    FSeek(p + 16); float avoidForce<comment="壁衝突回避時の加速度">;
    FSeek(p + 20); float justBoostForce<comment="ジャスト回避時の追加加速度">;
    FSeek(p + 24); float justBoostMax<comment="ジャスト回避時の最大速度">;
    FSeek(p + 28); float justBoostTime<comment="ジャスト回避時のブースト時間">;
    FSeek(p + 32); float justBoostBrake<comment="ジャスト回避ブーストの終了時減速度">;

    FSeek(p + 36);
} PlayerParamQuickStep;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float minRecieveTime<comment="最小受付時間">;
    FSeek(p + 4);  float maxRecieveTimes[4]<comment="最大受付時間",optimize=false>;
    FSeek(p + 20); float justRecieveTimes[4]<comment="ジャストパリィ受付時間",optimize=false>;
    FSeek(p + 36); float frozenTime<comment="失敗時硬直時間">;
    FSeek(p + 40); float justFrozenTime<comment="ジャストパリィ時の失敗時硬直時間">;
    FSeek(p + 44); float justEffectEasein<comment="短エフェクト開始補間時間">;
    FSeek(p + 48); float justEffectEaseout<comment="短エフェクト終了補間時間">;
    FSeek(p + 52); float justEffectTime<comment="短エフェクト時間">;
    FSeek(p + 56); float justEffectEasein2<comment="長エフェクト開始補間時間">;
    FSeek(p + 60); float justEffectEaseout2<comment="長エフェクト終了補間時間">;
    FSeek(p + 64); float justEffectTime2<comment="長エフェクト時間">;
    FSeek(p + 68); float justEffectEasein3<comment="試練用エフェクト開始補間時間">;
    FSeek(p + 72); float justEffectEaseout3<comment="試練用エフェクト終了補間時間">;
    FSeek(p + 76); float justEffectTime3<comment="試練用エフェクト時間">;
    FSeek(p + 80); cstring cameraName<comment="カメラ名">;

    FSeek(p + 96);
} PlayerParamParry;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float speed<comment="速度">;
    FSeek(p + 4);  float damper<comment="減衰">;
    FSeek(p + 8);  float parryTime<comment="パリー可能時間">;
    FSeek(p + 12); float invincibleTime<comment="無敵時間">;

    FSeek(p + 16);
} PlayerParamAvoidData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float time<comment="アクション時間">;
    FSeek(p + 4);   float fixedTime<comment="アクション固定時間">;
    FSeek(p + 8);   float reentryInputPriorityTime<comment="連続回避の先行入力開始時間">;
    FSeek(p + 12);  float reentryTime<comment="連続回避の禁止時間">;
    FSeek(p + 16);  float frontAngle<comment="前方回避角度">;
    FSeek(p + 20);  float backAngle<comment="後方回避角度">;
    FSeek(p + 24);  float addFallSpeed<comment="空中回避の加算落下速度">;
    FSeek(p + 28);  PlayerParamAvoidData data[7]<comment="移動",optimize=false>;
    FSeek(p + 140); float baseDistance<comment="回り込み基準距離">;
    FSeek(p + 144); float limitAngle<comment="回り込み制限角度">;

    FSeek(p + 148);
} PlayerParamAvoid;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    PlayerParamCommon common<comment="汎用">;
    FSeek(p + 48);   PlayerParamSpeed speed<comment="速度">;
    FSeek(p + 272);  PlayerParamRotation rotation<comment="角速度">;
    FSeek(p + 316);  PlayerParamRunning running<comment="走りモーション">;
    FSeek(p + 368);  PlayerParamBalance balance<comment="姿勢回転">;
    FSeek(p + 400);  PlayerParamBrake brake<comment="ブレーキ">;
    FSeek(p + 424);  PlayerParamTurn turn<comment="ターン">;
    FSeek(p + 440);  PlayerParamJump jump<comment="ジャンプ">;
    FSeek(p + 468);  PlayerParamJumpSpeed jumpSpeed<comment="ジャンプ中速度">;
    FSeek(p + 516);  PlayerParamDoubleJump doubleJump<comment="2段ジャンプ">;
    FSeek(p + 528);  PlayerParamFall fall<comment="落下">;
    FSeek(p + 576);  PlayerParamDamage damage<comment="ダメージ">;
    FSeek(p + 800);  PlayerParamDead dead<comment="死亡">;
    FSeek(p + 812);  PlayerParamSliding sliding<comment="スライディング">;
    FSeek(p + 876);  PlayerParamStomping stomping<comment="ストンピング">;
    FSeek(p + 908);  PlayerParamGrind grind<comment="グラインド">;
    FSeek(p + 928);  PlayerParamFallSlope fallSlope<comment="坂滑り">;
    FSeek(p + 984);  PlayerParamFallFlip fallFlip<comment="坂バックフリップ">;
    FSeek(p + 996);  PlayerParamTumble tumble<comment="バンプジャンプ">;
    FSeek(p + 1100); PlayerParamSpinAttack spinAttack<comment="スピンアタック">;
    FSeek(p + 1132); PlayerParamHomingAttack homingAttack<comment="ホーミングアタック">;
    FSeek(p + 1308); PlayerParamHitEnemy hitEnemy<comment="敵接触">;
    FSeek(p + 1324); PlayerParamDiving diving<comment="ダイビング">;
    FSeek(p + 1416); PlayerParamFan fan<comment="ファン">;
    FSeek(p + 1440); PlayerParamBackflip backflip<comment="後方宙返り">;
    FSeek(p + 1464); PlayerParamSlowMove slowmove<comment="低速移動">;
    FSeek(p + 1496); PlayerParamSpin spin<comment="スピン">;
    FSeek(p + 1528); PlayerParamWallMove wallmove<comment="壁移動">;
    FSeek(p + 1664); PlayerParamWallJump walljump<comment="壁ジャンプ">;
    FSeek(p + 1700); PlayerParamClimbing climbing<comment="クライミング">;
    FSeek(p + 1784); PlayerParamSlideDown slidedown<comment="滑落">;
    FSeek(p + 1808); PlayerParamBoost boost<comment="ブースト">;
    FSeek(p + 1868); PlayerParamAirBoost airboost<comment="エアブースト">;
    FSeek(p + 1920); PlayerParamAutorun autorun<comment="オートラン">;
    FSeek(p + 1936); PlayerParamSideStep sidestep<comment="サイドステップ">;
    FSeek(p + 1968); PlayerParamSideStep2 sidestep2<comment="サイドステップ(特殊状況)">;
    FSeek(p + 2000); PlayerParamQuickStep quickstep<comment="クイックステップ">;
    FSeek(p + 2040); PlayerParamParry parry<comment="パリー">;
    FSeek(p + 2136); PlayerParamAvoid avoid<comment="回避">;

    FSeek(p + 2288);
} ModePackage;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialSpeed<comment="垂直方向の初速">;
    FSeek(p + 4);  float bounceSpeed<comment="垂直方向の初速(バウンド時)">;
    FSeek(p + 8);  float limitSpeedMin<comment="水平方向の最高速度の最低値">;
    FSeek(p + 12); float riseDampingStartTime<comment="上昇力の減衰開始時間">;
    FSeek(p + 16); float riseDampingRate<comment="上昇力の減衰係数">;
    FSeek(p + 20); float maxFallSpeed<comment="最高落下速度">;
    FSeek(p + 24); float fallGravitySize<comment="下降中の重力サイズ">;
    FSeek(p + 28); float minDuration<comment="最低持続時間">;
    FSeek(p + 32); float propellerVertSpeedThreshold<comment="上昇用のタロットを消す垂直速度">;
    FSeek(p + 36); bool holdTransitHover<comment="長押しでホバリングへ">;
    FSeek(p + 40); float practiceTime<comment="練習判定時間">;

    FSeek(p + 44);
} AmyParamPropellerJump;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float landAttackScale<comment="着地時の攻撃判定スケール">;

    FSeek(p + 4);
} AmyParamStomping;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float jumpForce<comment="ジャンプ力">;
    FSeek(p + 4); float longPressTime<comment="長押し判定時間">;

    FSeek(p + 8);
} AmyParamHighJump;

enum<sint8> Condition
{
    Time = 0,
    Animation = 1,
};

enum<sint8> Shape
{
    Sphere = 0,
    Cylinder = 1,
    Box = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Condition condition<comment="判定条件">;
    FSeek(p + 1);  sint8 count<comment="判定回数">;
    FSeek(p + 4);  float spanTime<comment="間隔時間">;
    FSeek(p + 8);  Shape shape<comment="形状">;
    FSeek(p + 16); vector3 shapeSize<comment="サイズ">;
    FSeek(p + 32); vector3 shapeOffset<comment="位置オフセット">;

    FSeek(p + 48);
} PlayerParamAttackCollider;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initial<comment="初速">;
    FSeek(p + 4);  float min<comment="最低速度">;
    FSeek(p + 8);  float max<comment="最高速度">;
    FSeek(p + 12); float minTurn<comment="旋回中速度">;

    FSeek(p + 16);
} AmyParamTarotAttackSpeed;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   PlayerParamAttackCollider hit<comment="ヒット判定">;
    FSeek(p + 48);  PlayerParamAttackCollider rollingHit<comment="回転ヒット判定">;
    FSeek(p + 96);  AmyParamTarotAttackSpeed speed<comment="速度パラメータ[通常]">;
    FSeek(p + 112); AmyParamTarotAttackSpeed speedRingMax<comment="速度パラメータ[リングMAX]">;
    FSeek(p + 128); float speedEaseInTime<comment="回転開始時の速度補間時間">;
    FSeek(p + 132); float speedEaseOutTime<comment="回転終了時の速度補間時間">;
    FSeek(p + 136); float minSpeedScale<comment="補間中の最低速度倍率">;
    FSeek(p + 140); float longPressTime<comment="長押し判定時間">;
    FSeek(p + 144); float minRollingTime<comment="最短回転時間">;
    FSeek(p + 148); float rollingTime<comment="最長回転時間">;
    FSeek(p + 152); float stunTime<comment="ピヨり時間">;

    FSeek(p + 160);
} AmyParamTarotAttack;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float radius<comment="攻撃半径">;
    FSeek(p + 4);  float effectTime<comment="サイラインのエフェクト時間">;
    FSeek(p + 8);  float rotateCycleTime<comment="サイラインの回転周期時間">;
    FSeek(p + 16); cstring cameraShakeName<comment="カメラシェイク名">;

    FSeek(p + 32);
} AmyParamCyHammer;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float acceleForce<comment="加速度[m/sec]">;
    FSeek(p + 4);  float deceleForce<comment="減速度[m/sec]">;
    FSeek(p + 8);  float overSpeedDeceleForce<comment="オーバースピード減速度[m/sec]">;
    FSeek(p + 12); float rotationForce<comment="旋回力[deg/sec]">;
    FSeek(p + 16); float rotationForceDecaySpeed<comment="速度比旋回力減衰の減衰開始速度">;
    FSeek(p + 20); float rotationForceDecayRate<comment="速度比旋回力減衰の減衰レート">;
    FSeek(p + 24); float rotationForceDecayMax<comment="速度比旋回力減衰の最大減衰力">;
    FSeek(p + 28); float groundRadius<comment="接地時の攻撃半径">;
    FSeek(p + 32); cstring cameraShakeName<comment="カメラシェイク名">;

    FSeek(p + 48);
} AmyParamAirCyHammer;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float appearWaitTime<comment="出現待ち時間">;
    FSeek(p + 4);   CyloopDropItemParameter dropItem<comment="ドロップアイテム">;
    FSeek(p + 108); float airCyHammerBonusScale<comment="[空中サイハンマー]最大ボーナス倍率">;
    FSeek(p + 112); float airCyHammerMinBonusDistance<comment="[空中サイハンマー]最小ボーナス落下距離">;
    FSeek(p + 116); float airCyHammerMaxBonusDistance<comment="[空中サイハンマー]最大ボーナス落下距離">;

    FSeek(p + 120);
} AmyParamCyHammerAppearGimmick;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float buildInitialSpeed<comment="[バイク構築中]初速">;
    FSeek(p + 4);  float buildMinSpeed<comment="[バイク構築中]最低速度">;
    FSeek(p + 8);  float buildMaxSpeed<comment="[バイク構築中]最高速度">;
    FSeek(p + 12); float buildAirRotationForce<comment="[バイク構築中/空中]旋回速度">;
    FSeek(p + 16); float initialSpeed<comment="初速">;
    FSeek(p + 20); float maxSpeed<comment="最高速度">;
    FSeek(p + 24); PlayerParamSpeedAcceleData accele<comment="加速度">;
    FSeek(p + 44); PlayerParamSpeedAcceleData decele<comment="減速度">;
    FSeek(p + 64); float baseRotateForce<comment="基本旋回力">;
    FSeek(p + 68); float minTurnSpeed<comment="旋回中速度">;
    FSeek(p + 72); float turnDeceleAngleMin<comment="旋回減速/開始角度">;
    FSeek(p + 76); float turnDeceleAngleMax<comment="旋回減速/最大角度">;

    FSeek(p + 80);
} AmyParamTarotBoostSpeed;

enum<sint8> AirAccelMode
{
    Alawys = 0,
    AirAccelMode_None = 1,
    Speed = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float minDistance<comment="最小距離">;
    FSeek(p + 4);  float maxDistance<comment="最大距離">;
    FSeek(p + 8);  float followTime<comment="追従時間">;
    FSeek(p + 12); float easeInTime<comment="カメラ開始補間時間">;
    FSeek(p + 16); float easeOutTime<comment="カメラ終了補間時間">;

    FSeek(p + 20);
} AmyParamTarotTurnCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float prepareTime<comment="予兆表示時間">;
    FSeek(p + 4);   float initialRunTime<comment="初速を維持する時間">;
    FSeek(p + 8);   AmyParamTarotBoostSpeed speed<comment="ブースト速度">;
    FSeek(p + 88);  float gravitySize<comment="重力サイズ">;
    FSeek(p + 92);  float gravityBeginTime<comment="空中/重力開始時間">;
    FSeek(p + 96);  float gravityMaxTime<comment="空中/重力最大化時間">;
    FSeek(p + 100); float gravitySizeMinInAir<comment="空中/最小重力サイズ">;
    FSeek(p + 104); float gravitySizeMaxInAir<comment="空中/最大重力サイズ">;
    FSeek(p + 108); float maxGravityAccele<comment="斜面加速度">;
    FSeek(p + 112); float maxGravityDecele<comment="斜面減速度">;
    FSeek(p + 116); float jumpOutAngle<comment="飛び出し挙動になる角度">;
    FSeek(p + 120); float jumpOutSpeed<comment="飛び出し挙動になる速度">;
    FSeek(p + 124); bool humpJumpOut<comment="丘で飛び出すか">;
    FSeek(p + 125); AirAccelMode airAccelMode<comment="空中加速動作">;
    FSeek(p + 128); float airAccelVertSpeedThreshold<comment="空中加速が可能になる速度の閾値">;
    FSeek(p + 132); float quickTurnTime<comment="クイックターン時間">;
    FSeek(p + 136); float quickTurnThresholdSpeed<comment="クイックターンが可能な速度">;
    FSeek(p + 140); float quickTurnThresholdAngle<comment="ターン入力と見なす角度">;
    FSeek(p + 144); float quickTurnTurnAfterSpeed<comment="ターン後の走り出し速度">;
    FSeek(p + 148); bool quickTurnStopEdge<comment="ターン中縁から落ちないようにするか">;
    FSeek(p + 152); float stompingLimitHeight<comment="ストンピングの高度制限">;
    FSeek(p + 156); float stompingLimitJumpOutTime<comment="空中へ飛び出し後、ストンピング可能になるまでの時間">;
    FSeek(p + 160); AmyParamTarotTurnCamera cameraTurn<comment="クイックターンのカメラパラメータ">;

    FSeek(p + 180);
} AmyParamTarotBoost;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float fovy<comment="画角">;
    FSeek(p + 4);  float zRot<comment="Roll">;
    FSeek(p + 8);  float distance<comment="距離">;
    FSeek(p + 12); float angleLerpFactorPerSec<comment="視点方向の感度">;
    FSeek(p + 16); float azimuthOffset<comment="方位角オフセット">;
    FSeek(p + 20); float elevationOffset<comment="仰角オフセット">;
    FSeek(p + 24); float gravityOffset<comment="重力方向オフセット">;
    FSeek(p + 28); float maxAzimuthOffset<comment="最大方位角オフセット">;
    FSeek(p + 32); float maxHorzOffset<comment="スクリーン左右方向の最大オフセット[m]">;

    FSeek(p + 36);
} AmyParamTarotDriftCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float startAngle<comment="旋回判定入力角度">;
    FSeek(p + 4);  float endSpeed<comment="終了速度">;
    FSeek(p + 8);  float minSpeed<comment="最低速度 基本値">;
    FSeek(p + 12); float minSpeedMax<comment="最低速度 最大値">;
    FSeek(p + 16); float maxSpeed<comment="最高速度 基本値">;
    FSeek(p + 20); float maxSpeedMax<comment="最高速度 最大値">;
    FSeek(p + 24); float accel<comment="加速度">;
    FSeek(p + 28); float brake<comment="減速度">;
    FSeek(p + 32); float maxSteerAngle<comment="最大ドリフト角">;
    FSeek(p + 36); float steerAccel<comment="舵加速度">;
    FSeek(p + 40); float maxSteerSpeed<comment="最大舵速度">;
    FSeek(p + 44); float neutralSteerAccel<comment="無入力時舵加速度">;
    FSeek(p + 48); float maxNeutralSteerSpeed<comment="無入力時最大舵速度">;
    FSeek(p + 52); float maxRotateSpeed<comment="最大回転速度">;
    FSeek(p + 56); bool steerFixedInput<comment="舵の左右固定操作">;
    FSeek(p + 60); float driftDashTime<comment="ドリフトダッシュ時間">;
    FSeek(p + 64); AmyParamTarotDriftCamera camera<comment="カメラパラメータ">;

    FSeek(p + 100);
} AmyParamTarotDrift;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float playerUpOffset<comment="プレイヤー上方オフセット">;
    FSeek(p + 4);  float playerRightOffset<comment="プレイヤー横方向オフセット">;
    FSeek(p + 8);  float distance<comment="開始距離">;
    FSeek(p + 12); float targetDistance<comment="目標距離">;
    FSeek(p + 16); float distanceEaseTime<comment="距離の補間時間">;
    FSeek(p + 20); float azimuth<comment="方位角">;
    FSeek(p + 24); float elevation<comment="仰角">;
    FSeek(p + 28); float easeInTime<comment="カメラ開始補間時間">;
    FSeek(p + 32); float easeOutTime<comment="カメラ終了補間時間">;

    FSeek(p + 36);
} AmyParamBlowKissCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float distanceToPlayer<comment="プレイヤーまでの距離">;
    FSeek(p + 4);  float azimuthOffset<comment="方位角オフセット">;
    FSeek(p + 8);  float elevationOffset<comment="仰角オフセット">;
    FSeek(p + 12); float easeInTime<comment="カメラ開始補間時間">;
    FSeek(p + 16); float easeOutTime<comment="カメラ終了補間時間">;

    FSeek(p + 20);
} AmyParamHeartBreakCamera;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float lockonLevelUpSpanTime[5]<comment="ロックオンレベルアップ時間",optimize=false>;
    FSeek(p + 20);  float lockonSearchDistance<comment="ロックオン探索距離">;
    FSeek(p + 24);  float lockonSearchDistanceFar<comment="ロックオン最大距離">;
    FSeek(p + 28);  float speed<comment="移動速度">;
    FSeek(p + 32);  float followSpeed<comment="攻撃後移動速度">;
    FSeek(p + 36);  float followTime<comment="攻撃後移動時間">;
    FSeek(p + 40);  float chargeTime<comment="攻撃開始前待機時間">;
    FSeek(p + 44);  float moveTime<comment="攻撃移動時間">;
    FSeek(p + 48);  float preDamageTime<comment="ダメージ発生前待機時間">;
    FSeek(p + 52);  float damageSpanTime<comment="ダメージ発生間隔">;
    FSeek(p + 56);  float postDamageTime<comment="ダメージ発生後待機間隔">;
    FSeek(p + 64);  cstring hitStopObject<comment="オブジェクト衝突時のヒットストップ">;
    FSeek(p + 80);  AmyParamBlowKissCamera camera<comment="投げキッスカメラ">;
    FSeek(p + 116); AmyParamHeartBreakCamera cameraHeartBreak<comment="ハート消失カメラ">;

    FSeek(p + 136);
} AmyParamCharmAttack;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float initialSpeed<comment="初速">;
    FSeek(p + 4);  float maxSpeed<comment="最高速度">;
    FSeek(p + 8);  PlayerParamSpeedAcceleData accele<comment="加速度">;
    FSeek(p + 28); PlayerParamSpeedAcceleData decele<comment="減速度">;
    FSeek(p + 48); float baseRotateForce<comment="基本旋回力">;
    FSeek(p + 52); float minTurnSpeed<comment="旋回中速度">;
    FSeek(p + 56); float turnDeceleAngleMin<comment="旋回減速/開始角度">;
    FSeek(p + 60); float turnDeceleAngleMax<comment="旋回減速/最大角度">;

    FSeek(p + 64);
} PlayerParamSpinBoostSpeed;

enum<sint8> PlayerParamSpinBoost_AirAccelMode
{
    PlayerParamSpinBoost_AirAccelMode_Alawys = 0,
    PlayerParamSpinBoost_AirAccelMode_None = 1,
    PlayerParamSpinBoost_AirAccelMode_Speed = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float forceRunTime<comment="強制走り時間">;
    FSeek(p + 4);   float initialRunTime<comment="初速を維持する時間">;
    FSeek(p + 8);   PlayerParamSpinBoostSpeed speedBall<comment="通常速度">;
    FSeek(p + 72);  PlayerParamSpinBoostSpeed speedBoost<comment="ブースト速度">;
    FSeek(p + 136); PlayerParamSpeedAcceleData2 deceleNeutralMin<comment="ニュートラル時最小減速度">;
    FSeek(p + 152); PlayerParamSpeedAcceleData2 deceleNeutralMax<comment="ニュートラル時最大減速度">;
    FSeek(p + 168); float gravitySize<comment="重力サイズ">;
    FSeek(p + 172); float gravityBeginTime<comment="空中/重力開始時間">;
    FSeek(p + 176); float gravityMaxTime<comment="空中/重力最大化時間">;
    FSeek(p + 180); float gravitySizeMinInAir<comment="空中/最小重力サイズ">;
    FSeek(p + 184); float gravitySizeMaxInAir<comment="空中/最大重力サイズ">;
    FSeek(p + 188); float maxGravityAccele<comment="斜面加速度">;
    FSeek(p + 192); float maxGravityDecele<comment="斜面減速度">;
    FSeek(p + 196); float inAirTime<comment="スピン状態のまま空中を移動できる時間">;
    FSeek(p + 200); float spinBoostEndSpeed<comment="スピンブーストが終了してころころ移動になる速度">;
    FSeek(p + 204); float jumpOutAngle<comment="飛び出し挙動になる角度">;
    FSeek(p + 208); float jumpOutSpeed<comment="飛び出し挙動になる速度">;
    FSeek(p + 212); bool humpJumpOut<comment="丘で飛び出すか">;
    FSeek(p + 213); PlayerParamSpinBoost_AirAccelMode airAccelMode<comment="空中加速動作">;
    FSeek(p + 216); float airAccelVertSpeedThreshold<comment="空中加速が可能になる速度の閾値">;
    FSeek(p + 220); float chargeRotateForce<comment="チャージ中回頭速度">;
    FSeek(p + 224); float chargeRotateForceMinAngle<comment="チャージ中回頭速度が0になる角度">;
    FSeek(p + 228); float chargeRotateForceMaxAngle<comment="チャージ中回頭速度が最大になる角度">;
    FSeek(p + 232); cstring cameraShakeName<comment="チャージ時のカメラシェイク名">;

    FSeek(p + 248);
} PlayerParamSpinBoost;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    ModePackage modePackage;
    FSeek(p + 2288); AmyParamPropellerJump propellerJump<comment="プロペラタロット">;
    FSeek(p + 2332); AmyParamStomping stomping<comment="タロットストンピング">;
    FSeek(p + 2336); AmyParamHighJump highJump<comment="ハイジャンプ">;
    FSeek(p + 2352); AmyParamTarotAttack tarotAttack<comment="タロット攻撃">;
    FSeek(p + 2512); AmyParamCyHammer cyHammer<comment="サイハンマー">;
    FSeek(p + 2544); AmyParamAirCyHammer airCyHammer<comment="空中サイハンマー">;
    FSeek(p + 2592); AmyParamCyHammerAppearGimmick cyHammerAppearGimmick<comment="サイハンマー/ギミック出現">;
    FSeek(p + 2712); AmyParamTarotBoost tarotBoost<comment="タロットブースト">;
    FSeek(p + 2892); AmyParamTarotDrift tarotDrift<comment="タロットドリフト">;
    FSeek(p + 2992); AmyParamCharmAttack charmAttack<comment="チャームアタック">;
    FSeek(p + 3128); PlayerParamSpinBoost spinBoost<comment="スピンブースト">;

    FSeek(p + 3376);
} ModePackageAmy;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   PlayerParamSpeed speed<comment="速度">;
    FSeek(p + 224); PlayerParamJump jump<comment="ジャンプ">;
    FSeek(p + 252); PlayerParamJumpSpeed jumpSpeed<comment="ジャンプ中速度">;
    FSeek(p + 300); PlayerParamDoubleJump doubleJump<comment="2段ジャンプ">;
    FSeek(p + 312); PlayerParamBoost boost<comment="ブースト">;
    FSeek(p + 372); PlayerParamAirBoost airboost<comment="エアブースト">;

    FSeek(p + 424);
} WaterModePackage;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     CommonPackageAmy common<comment="共通">;
    FSeek(p + 24928); ModePackageAmy forwardView<comment="通常">;
    FSeek(p + 28304); WaterModePackage water<comment="水中">;
    FSeek(p + 28736); ModePackageAmy cyberspaceSV<comment="SV">;

    FSeek(p + 32112);
} AmyParameters;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
AmyParameters amyParameters;
