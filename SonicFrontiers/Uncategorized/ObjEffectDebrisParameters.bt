local uint64 BASE_OFFSET_VALUE<hidden=true>;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 centerPosOffsetMin<comment="爆発位置オフセット最小値">;
    FSeek(p + 16); vector3 centerPosOffsetMax<comment="爆発位置オフセット最大値">;
    FSeek(p + 32); float range<comment="爆発が届く範囲">;
    FSeek(p + 36); float powerMin<comment="力の大きさ最小値">;
    FSeek(p + 40); float powerMax<comment="力の大きさ最大値">;

    FSeek(p + 48);
} ExplosionParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 impulseDir<comment="力の方向(後で正規化されます)">;
    FSeek(p + 16); float powerMin<comment="力の大きさ最小値">;
    FSeek(p + 20); float powerMax<comment="力の大きさ最大値">;

    FSeek(p + 32);
} ImpulseParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float marginTime<comment="速度遷移マージン">;
    FSeek(p + 4);  float nextTime<comment="次の段階に移る時間">;
    FSeek(p + 8);  float gravity<comment="重力加速度">;
    FSeek(p + 12); float moveStopTime<comment="移動停止秒">;
    FSeek(p + 16); bool damping<comment="速度減衰するか">;
    FSeek(p + 32); ExplosionParameter explosionParam<comment="爆発パラメータ">;
    FSeek(p + 80); ImpulseParameter impulseParam<comment="インパルスパラメータ">;

    FSeek(p + 112);
} DebrisPhaseParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); DebrisPhaseParameter debrisPhaseParameters[3]<comment="debrisPhaseParameters",optimize=false>;

    FSeek(p + 336);
} EffectDebrisParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); EffectDebrisParameter effectDebrisParameters[10]<comment="effectDebrisParameters",optimize=false>;

    FSeek(p + 3360);
} ObjEffectDebrisParameters;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
ObjEffectDebrisParameters objEffectDebrisParameters;
