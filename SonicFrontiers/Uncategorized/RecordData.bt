local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef byte sint8;

enum<sint8> EventType
{
    KEY = 0,
    INTERVAL = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring name<comment="イベント名">;
    FSeek(p + 16); EventType type<comment="イベントタイプ">;
    FSeek(p + 20); float inTime<comment="開始時間">;
    FSeek(p + 24); float outTime<comment="終了時間[インターバル用]">;

    FSeek(p + 32);
} EventData;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        EventData data[size]<optimize=false>;
        FSeek(p);
    }
} array_EventData;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct {
    float x;
    float y;
    float z;
    float w;
} quaternion;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 position<comment="ローカル座標">;
    FSeek(p + 16); quaternion rotation<comment="ローカル姿勢">;
    FSeek(p + 32); float time<comment="アニメーション時間">;

    FSeek(p + 48);
} NodeInfoInAnim;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        NodeInfoInAnim data[size]<optimize=false>;
        FSeek(p);
    }
} array_NodeInfoInAnim;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring name<comment="ノード名">;
    FSeek(p + 16); array_NodeInfoInAnim nodeInfos<comment="アニメーション中のノード情報">;

    FSeek(p + 48);
} NodeData;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        NodeData data[size]<optimize=false>;
        FSeek(p);
    }
} array_NodeData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 position<comment="ローカル移動値[前回からの差分]">;
    FSeek(p + 16); quaternion rotation<comment="ローカル回転値[前回からの差分]">;
    FSeek(p + 32); float time<comment="アニメーション時間">;

    FSeek(p + 48);
} DeltaMotionInfoInAnim;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        DeltaMotionInfoInAnim data[size]<optimize=false>;
        FSeek(p);
    }
} array_DeltaMotionInfoInAnim;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); array_DeltaMotionInfoInAnim deltaInfos<comment="アニメーション中のデルタモーション情報">;

    FSeek(p + 32);
} DeltaMotionData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   cstring name<comment="アニメーション名">;
    FSeek(p + 16);  array_EventData eventDatas<comment="イベント情報">;
    FSeek(p + 48);  array_NodeData nodeDatas<comment="ノード情報">;
    FSeek(p + 80);  DeltaMotionData deltaMotionData<comment="デルタモーション情報">;
    FSeek(p + 112); float maxTime<comment="アニメーション再生時間">;

    FSeek(p + 120);
} AnimData;

typedef struct {
    uint64 pointer;
    uint64 size;
    if (pointer > 0 && size > 0)
    {
        local uint64 p<hidden=true> = FTell();
        FSeek(BASE_OFFSET_VALUE + pointer);
        AnimData data[size]<optimize=false>;
        FSeek(p);
    }
} array_AnimData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); array_AnimData animDatas<comment="アニメーション情報">;

    FSeek(p + 32);
} RecordData;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
RecordData recordData;
