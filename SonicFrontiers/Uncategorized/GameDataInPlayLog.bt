local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef ubyte uint8;

typedef byte sint8;

enum<sint8> Status
{
    STATUS_ZERO_FILL = 0,
    STATUS_INITIALIZED = 1,
};

enum<sint8> Sequence
{
    Island1 = 0,
    Island2 = 1,
    Island3 = 2,
    Island4 = 3,
    Island5 = 4,
    FinalBossBefore = 5,
    FinalBossAfter = 6,
};

enum<sint8> SaveDataIcon
{
    IconNoData = 0,
    IconIsland1 = 1,
    IconIsland2 = 2,
    IconIsland3 = 3,
    IconIsland4 = 4,
    IconIsland5 = 5,
    IconLastBoss = 6,
};

enum<uint8> AppVersion
{
    AppVersion_1_10 = 0,
    AppVersion_1_20 = 1,
    AppVersion_1_30 = 2,
    AppVersion_1_40 = 3,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 signature<comment="シグニチャ">;
    FSeek(p + 4);  uint8 version<comment="バージョン">;
    FSeek(p + 5);  Status status<comment="ステータス">;
    FSeek(p + 6);  uint8 config<comment="コンフィグ">;
    FSeek(p + 7);  Sequence sequence<comment="シーケンス">;
    FSeek(p + 8);  uint32 playTime<comment="プレイ時間">;
    FSeek(p + 12); SaveDataIcon icon<comment="セーブデータアイコン">;
    FSeek(p + 13); AppVersion appVersion<comment="アプリバージョン">;
    FSeek(p + 14); uint8 config2<comment="コンフィグ2">;
    FSeek(p + 15); uint8 reserved1<comment="reserved1">;
    FSeek(p + 16); uint32 saveDate<comment="保存日時">;
    FSeek(p + 20); uint8 index<comment="index">;
    FSeek(p + 24); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 40);
} HeaderData;

enum<sint8> GamePlayData_Status
{
    STATUS_NEWGAME = 0,
    STATUS_CONTINUE = 1,
};

enum<sint8> SequenceDeprecated
{
    SequenceDeprecated_Island1 = 0,
    SequenceDeprecated_Island2 = 1,
    SequenceDeprecated_Island3 = 2,
    SequenceDeprecated_Island4 = 3,
    SequenceDeprecated_Island5 = 4,
    SequenceDeprecated_FinalBossBefore = 5,
    SequenceDeprecated_FinalBossAfter = 6,
};

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct {
    float x;
    float y;
    float z;
    float w;
} quaternion;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  GamePlayData_Status status<comment="ステータス">;
    FSeek(p + 1);  sint8 lastPlayedStageNo<comment="最後にプレイしていたステージ">;
    FSeek(p + 2);  uint8 flags<comment="ビットフラグ">;
    FSeek(p + 3);  SequenceDeprecated sequence<comment="sequence">;
    FSeek(p + 16); vector3 position<comment="座標">;
    FSeek(p + 32); quaternion rotation<comment="姿勢">;
    FSeek(p + 48); uint32 day<comment="日">;
    FSeek(p + 52); uint32 hour<comment="時">;
    FSeek(p + 56); uint32 minute<comment="分">;
    FSeek(p + 60); float second<comment="秒">;
    FSeek(p + 64); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 80);
} GamePlayData;

typedef int16 sint16;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint16 numRings<comment="リング数">;
    FSeek(p + 2);  uint8 ringLevel<comment="リングレベル">;
    FSeek(p + 3);  uint8 speedLevel<comment="スピードレベル">;
    FSeek(p + 4);  uint8 obtainChaosEmeralds<comment="取得カオスエメラルド">;
    FSeek(p + 5);  uint8 hasChaosEmeralds<comment="所有カオスエメラルド">;
    FSeek(p + 6);  uint8 skillLevel[30]<comment="スキルレベル",optimize=false>;
    FSeek(p + 36); uint8 skillPointOld<comment="[廃止]所持スキルポイント">;
    FSeek(p + 37); uint8 levelOld<comment="[廃止]レベル">;
    FSeek(p + 38); uint16 padding0<comment="padding0">;
    FSeek(p + 40); uint32 expPoint<comment="経験値">;
    FSeek(p + 44); uint8 powerLevel<comment="チカラレベル">;
    FSeek(p + 45); uint8 guardLevel<comment="マモリレベル">;
    FSeek(p + 46); uint16 boostGaugeLevel<comment="ブーストゲージレベル">;
    FSeek(p + 48); uint32 numPowerSeeds<comment="チカラのタネ数">;
    FSeek(p + 52); uint32 numGuardSeeds<comment="マモリのタネ数">;
    FSeek(p + 56); uint16 numFishCoins<comment="釣りコイン数">;
    FSeek(p + 58); uint16 numFishTokens<comment="釣りトークン数">;
    FSeek(p + 60); uint16 numGoldCards<comment="釣りゴールドカード数">;
    FSeek(p + 62); uint16 numSlotStars<comment="流星雨スロットスター数">;
    FSeek(p + 64); float quickCyloopGauge<comment="クイックサイループゲージ">;
    FSeek(p + 68); uint32 practiceMaxCleared<comment="練習最大クリア数">;
    FSeek(p + 72); uint32 practiceMaxCombos<comment="練習最大コンボ数">;
    FSeek(p + 76); uint32 flags<comment="フラグ">;
    FSeek(p + 80); sint16 skillPoint<comment="所持スキルポイント">;
    FSeek(p + 82); sint16 level<comment="レベル">;
    FSeek(p + 84); uint32 dlcrsvExpPoint<comment="経験値のうちDLCRSV(宝箱1)によるもの">;
    FSeek(p + 88); uint32 dlcrsvNumPowerSeeds<comment="チカラのタネ数のうちDLCRSV(宝箱1)によるもの">;
    FSeek(p + 92); uint32 dlcrsvNumGuardSeeds<comment="マモリのタネ数のうちDLCRSV(宝箱1)によるもの">;

    FSeek(p + 96);
} CharacterData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 x<comment="x">;
    FSeek(p + 1); uint8 y<comment="y">;

    FSeek(p + 2);
} IslandMapGridData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   IslandMapGridData grid[136]<comment="解放済座標",optimize=false>;
    FSeek(p + 272); uint16 numReleaseGrids<comment="開放済みグリッド数">;

    FSeek(p + 274);
} IslandMapData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   vector3 destination<comment="マップ目的地">;
    FSeek(p + 16);  uint32 flags<comment="ビットフラグ">;
    FSeek(p + 20);  IslandMapData map<comment="マップデータ">;
    FSeek(p + 296); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 320);
} IslandStageData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); IslandStageData islands[5]<comment="島データ",optimize=false>;

    FSeek(p + 1600);
} IslandStageContainerData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint16 flags<comment="ビットフラグ">;
    FSeek(p + 4); uint32 bestTime<comment="ベストタイム">;
    FSeek(p + 8); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 24);
} CyberStageData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); CyberStageData actStages[32]<comment="電脳空間ステージ情報",optimize=false>;

    FSeek(p + 768);
} CyberStageContainerData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   uint32 bitFlags[24]<comment="ビットフラグ",optimize=false>;
    FSeek(p + 96);  sint8 byteFlags[128]<comment="バイトフラグ",optimize=false>;
    FSeek(p + 224); uint32 intDatas[16]<comment="uint32データ",optimize=false>;

    FSeek(p + 288);
} FlagContainerData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    uint32 bitFlags[1024]<comment="ビットフラグ",optimize=false>;
    FSeek(p + 4096); sint8 byteFlags[1024]<comment="バイトフラグ",optimize=false>;
    FSeek(p + 5120); uint32 intDatas[512]<comment="uint32データ",optimize=false>;

    FSeek(p + 7168);
} WorldFlagData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     WorldFlagData worldDatas[5]<comment="島フラグデータ",optimize=false>;
    FSeek(p + 35840); WorldFlagData debugWorldData<comment="開発用島フラグデータ">;

    FSeek(p + 43008);
} WorldFlagContainerData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint16 time<comment="時刻">;
    FSeek(p + 2); uint16 x<comment="X座標">;
    FSeek(p + 4); uint16 z<comment="Z座標">;

    FSeek(p + 6);
} PlayLogCoordData;

enum<sint8> EventType
{
    InvalidEvent = -1,
    Dead = 0,
    BeginStage = 1,
    EndStage = 2,
    ReleaseLightPillar = 3,
    ObtainChaosEmerald = 4,
    ContactMiniboss = 5,
    DefeatMiniboss = 6,
    BeginCyberStage = 7,
    EndCyberStage = 8,
    CompleteCyberStage = 9,
    RestartCyberStage = 10,
    GiveupCyberStage = 11,
    OpenTreasureChest = 12,
    AccessRingSensor = 13,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); PlayLogCoordData coord<comment="座標">;
    FSeek(p + 6); EventType eventType<comment="イベント">;
    FSeek(p + 7); sint8 option<comment="イベント補足用">;

    FSeek(p + 8);
} PlayLogEventData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);      uint32 numFootMarks<comment="numFootMarks">;
    FSeek(p + 4);      uint32 footMarksIndex<comment="footMarksIndex">;
    FSeek(p + 8);      PlayLogCoordData footmarks[36000]<comment="footmarks",optimize=false>;
    FSeek(p + 216008); uint32 numEvents<comment="numEvents">;
    FSeek(p + 216012); uint32 eventsIndex<comment="eventsIndex">;
    FSeek(p + 216016); PlayLogEventData events[50000]<comment="events",optimize=false>;

    FSeek(p + 616016);
} PlayLogData;

typedef int32 sint32;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 value<comment="値">;
    FSeek(p + 4); bool assigned<comment="アサイン済みか">;

    FSeek(p + 8);
} StatValue;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); StatValue stats[3393]<comment="統計",optimize=false>;

    FSeek(p + 27144);
} StatsContainerData;

enum<sint8> Type
{
    Sunny = 0,
    Cloudy = 1,
    Rainy = 2,
    SandStorm = 3,
    MeteorShower = 4,
    Num = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float duration<comment="時間">;
    FSeek(p + 4); float time<comment="進行">;

    FSeek(p + 8);
} WeatherTimerData;

enum<sint8> WeatherBlockData_Type
{
    WeatherBlockData_Type_Sunny = 0,
    WeatherBlockData_Type_Cloudy = 1,
    WeatherBlockData_Type_Rainy = 2,
    WeatherBlockData_Type_SandStorm = 3,
    WeatherBlockData_Type_MeteorShower = 4,
    WeatherBlockData_Type_Num = 5,
};

enum<sint8> WeatherBlockData_Status
{
    None = 0,
    Wait = 1,
    Active = 2,
    External = 3,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  WeatherBlockData_Type weather<comment="天候">;
    FSeek(p + 4);  uint32 hour<comment="ブロック終了時間">;
    FSeek(p + 8);  uint32 minute<comment="ブロック終了分">;
    FSeek(p + 12); float second<comment="ブロック終了秒">;
    FSeek(p + 16); WeatherBlockData_Status status<comment="ステータス">;

    FSeek(p + 20);
} WeatherBlockData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Type currentWeather<comment="今の天気">;
    FSeek(p + 1);  Type prevWeather<comment="過去の天気">;
    FSeek(p + 4);  WeatherTimerData timer<comment="天気遷移タイマー">;
    FSeek(p + 12); WeatherBlockData block<comment="天気ブロック">;
    FSeek(p + 32); sint32 stageNo<comment="天候記録ステージ番号">;
    FSeek(p + 36); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 52);
} WeatherData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);      HeaderData header<comment="ヘッダ">;
    FSeek(p + 48);     GamePlayData gameplay<comment="ゲームプレイ">;
    FSeek(p + 128);    CharacterData character<comment="キャラクタ">;
    FSeek(p + 224);    IslandStageContainerData islands<comment="島ステージコンテナ">;
    FSeek(p + 1824);   CyberStageContainerData stages<comment="電脳空間ステージコンテナ">;
    FSeek(p + 2592);   FlagContainerData flags<comment="フラグコンテナ">;
    FSeek(p + 2880);   WorldFlagContainerData worldFlags<comment="ワールド別フラグコンテナ">;
    FSeek(p + 45888);  PlayLogData playlog<comment="プレイログ">;
    FSeek(p + 661904); StatsContainerData stats<comment="統計コンテナ">;
    FSeek(p + 689048); WeatherData weather<comment="天候">;

    FSeek(p + 689104);
} GameDataInPlayLog;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
GameDataInPlayLog gameDataInPlayLog;
