local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float scoutDistance<comment="索敵距離[通常時]">;
    FSeek(p + 4);  float scoutDistanceOutside<comment="索敵距離[カメラ外時]">;
    FSeek(p + 8);  float zoomDistance<comment="見え切りカメラ距離">;
    FSeek(p + 16); vector3 zoomOffset<comment="見え切りカメラオフセット">;
    FSeek(p + 32); vector3 zoomAngle<comment="見え切りカメラアングル">;
    FSeek(p + 48); float zoomFov<comment="画角">;

    FSeek(p + 64);
} MiniBossCommonConfig;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float interval<comment="記録間隔(0で毎F)">;
    FSeek(p + 4);  sint32 recordNumWander<comment="保持個数(徘徊)">;
    FSeek(p + 8);  sint32 recordNumWatch<comment="保持個数(対峙)">;
    FSeek(p + 12); sint32 recordNumBattle<comment="保持個数(戦闘)">;
    FSeek(p + 16); float width<comment="幅">;
    FSeek(p + 20); float wallHeight<comment="壁の高さ">;

    FSeek(p + 24);
} FlyerTrailParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float speed<comment="移動速度[m/s]">;

    FSeek(p + 4);
} FlyerWanderParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float interval<comment="攻撃間隔[s]">;
    FSeek(p + 4);  float readyDuration<comment="溜め時間[s]">;
    FSeek(p + 8);  float shotAnimSpeed<comment="射撃モーション速度">;
    FSeek(p + 12); uint32 shotAnimNum<comment="射撃モーションループ回数">;
    FSeek(p + 16); float speed<comment="速度[m/s]">;
    FSeek(p + 20); float lifeTime<comment="持続時間[s]">;

    FSeek(p + 24);
} FlyerWatchShotParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float speed<comment="移動速度[m/s]">;
    FSeek(p + 4); float changeWanderTime<comment="徘徊に戻る非戦闘時間">;
    FSeek(p + 8); FlyerWatchShotParam shot<comment="射撃">;

    FSeek(p + 32);
} FlyerWatchParam;

typedef byte sint8;

enum<sint8> HorizontalType
{
    HorzCenter = 0,
    HorzLeft = 1,
    HorzRight = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); HorizontalType horz[6]<comment="出現位置",optimize=false>;

    FSeek(p + 6);
} FlyerEscapeShotTableData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   FlyerEscapeShotTableData posTable[16]<comment="出現位置テーブル",optimize=false>;
    FSeek(p + 96);  float interval<comment="攻撃間隔[s]">;
    FSeek(p + 100); float waitAfterLoop<comment="ループ後の待ち時間[s]">;
    FSeek(p + 104); float readyDuration<comment="溜め時間[s]">;
    FSeek(p + 108); float shotAnimSpeed<comment="射撃モーション速度">;
    FSeek(p + 112); uint32 shotAnimNum<comment="射撃モーションループ回数">;
    FSeek(p + 116); float initSpeed<comment="初速度[m/s]">;
    FSeek(p + 120); float maxSpeed<comment="最高速度[m/s]">;
    FSeek(p + 124); float acc<comment="加速度[m/s^2]">;
    FSeek(p + 128); float lifeTime<comment="持続時間[s]">;
    FSeek(p + 132); float nearest<comment="距離下限[s]">;

    FSeek(p + 136);
} FlyerEscapeShotParam;

enum<byte> bool {
    False = 0,
    True = 1,
};

enum<sint8> PlayerOffsetType
{
    PLAYER_OFFSET_NORMAL = 0,
    PLAYER_OFFSET_ABSOLUTE = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float fovy<comment="画角">;
    FSeek(p + 4);  float zRot<comment="Roll">;
    FSeek(p + 8);  float distance<comment="距離">;
    FSeek(p + 12); float pathOffset<comment="パス上のOffset">;
    FSeek(p + 16); bool usePathVerticalComponent<comment="パス方向の垂直成分を使用する">;
    FSeek(p + 17); bool usePathNormal<comment="カメラY-Upの傾き">;
    FSeek(p + 20); float angleSensitivity<comment="視点方向の感度">;
    FSeek(p + 24); float angleSensitivityBoost<comment="視点方向の感度(ブースト中)">;
    FSeek(p + 28); float azimuthOffsetDeg<comment="方位角Offset">;
    FSeek(p + 32); float elevationOffsetDeg<comment="仰角Offset">;
    FSeek(p + 36); float gravityOffset<comment="重力方向のOffset">;
    FSeek(p + 48); vector3 playerOffset<comment="プレイヤー座標Offset">;
    FSeek(p + 64); PlayerOffsetType playerOffsetType<comment="プレイヤー座標Offsetのタイプ">;

    FSeek(p + 80);
} FlyerEscapeCameraParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 4);  float speed<comment="通常時の走る速さ">;
    FSeek(p + 8);  float boostSpeed<comment="ブースト時の走る速さ">;
    FSeek(p + 12); float boostSpeedMax<comment="パワーブースト時の走る速さ">;

    FSeek(p + 16);
} FlyerEscapeQuickStepParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float startSpeed<comment="初速度[m/s]">;
    FSeek(p + 4);   float decrease<comment="減速度[m/s^2]">;
    FSeek(p + 8);   float minSpeed<comment="最低速度[m/s]">;
    FSeek(p + 12);  float targetDisableTime<comment="ターゲット不可時間">;
    FSeek(p + 16);  float resetByFallTime<comment="戦闘終了になる落下時間">;
    FSeek(p + 20);  float resetByDistance<comment="戦闘終了になる距離">;
    FSeek(p + 24);  FlyerEscapeShotParam shot<comment="射撃">;
    FSeek(p + 160); FlyerEscapeCameraParam camera<comment="カメラ">;
    FSeek(p + 240); FlyerEscapeQuickStepParam quickStep<comment="オートラン">;

    FSeek(p + 256);
} FlyerEscapeParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float duration<comment="持続時間[s]">;
    FSeek(p + 16); vector3 posOffset<comment="位置(注視点からの相対)">;
    FSeek(p + 32); float fovy<comment="画角[°]">;
    FSeek(p + 36); float interpolateTimePush<comment="開始補間時間[s]">;
    FSeek(p + 40); float interpolateTimePop<comment="終了補間時間[s]">;

    FSeek(p + 48);
} FlyerNearStartCamParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float durationMin<comment="待機時間最小">;
    FSeek(p + 4); float durationMax<comment="待機時間最大">;
    FSeek(p + 8); uint32 selectRatio[2]<comment="行動選択確率[%](攻撃,ガード)",optimize=false>;

    FSeek(p + 16);
} FlyerIdlingNearParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float duration<comment="duration">;

    FSeek(p + 4);
} FlyerGuardParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float lockonDistance<comment="ロックオン成立距離">;
    FSeek(p + 4);  float unlockDistance<comment="ロックオン解除距離">;
    FSeek(p + 8);  float distance<comment="カメラ距離">;
    FSeek(p + 12); float minElevation<comment="仰角最小値">;
    FSeek(p + 16); float maxElevation<comment="仰角最大値">;
    FSeek(p + 20); float panningSuspensionK<comment="パンニング遅延のバネ定数(負値でデフォルト値)">;
    FSeek(p + 24); float interiorPanningSuspensionK<comment="近距離パンニング遅延のバネ定数(負値でデフォルト値)">;

    FSeek(p + 28);
} FlyerAutoLockonParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float outStrength<comment="射出強度">;
    FSeek(p + 4);  float inStrength<comment="終了強度">;
    FSeek(p + 8);  float outElev<comment="射出時発射角(°)">;
    FSeek(p + 12); float inElev<comment="終了時入射角(°)">;
    FSeek(p + 16); float speedMin<comment="移動速度最小">;
    FSeek(p + 20); float speedMax<comment="移動速度最大">;
    FSeek(p + 24); float speedMinLength<comment="移動速度最小パス長">;
    FSeek(p + 28); float speedMaxLength<comment="移動速度最大パス長">;

    FSeek(p + 32);
} FlyerNearEndLaunchParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float duration<comment="近接状態維持時間">;
    FSeek(p + 4);   float startHABounceUp<comment="近接開始時のHA反動(上方向)">;
    FSeek(p + 8);   float startHABounceBack<comment="近接開始時のHA反動(後方向)">;
    FSeek(p + 12);  float preliminaryMotionSpeed<comment="近接攻撃予備動作モーション速度">;
    FSeek(p + 16);  float resetByDistance<comment="戦闘終了になる距離">;
    FSeek(p + 32);  FlyerNearStartCamParam startCam<comment="近接開始時のカメラ演出">;
    FSeek(p + 80);  FlyerIdlingNearParam idling<comment="待機">;
    FSeek(p + 96);  FlyerGuardParam guard<comment="ガード">;
    FSeek(p + 100); FlyerAutoLockonParam lockon<comment="自動ロックオンカメラ">;
    FSeek(p + 128); FlyerNearEndLaunchParam launch<comment="自動飛び移り">;

    FSeek(p + 160);
} FlyerNearParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   MiniBossCommonConfig commonConfig<comment="基本設定">;
    FSeek(p + 64);  FlyerTrailParam trail<comment="軌跡">;
    FSeek(p + 88);  FlyerWanderParam wander<comment="徘徊状態">;
    FSeek(p + 92);  FlyerWatchParam watch<comment="対峙状態">;
    FSeek(p + 128); FlyerEscapeParam escape<comment="逃亡状態">;
    FSeek(p + 384); FlyerNearParam nearRange<comment="近接状態">;
    FSeek(p + 544); float stunTime<comment="スタン時間">;

    FSeek(p + 560);
} MiniBossFlyerCommonParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint<comment="体力">;
    FSeek(p + 4);  float maxStunPoint[3]<comment="スタン値",optimize=false>;
    FSeek(p + 16); float stunDecreaseStartTime<comment="スタン値減少開始時間">;
    FSeek(p + 20); float stunDecreaseSpeed<comment="スタン値減少速度">;
    FSeek(p + 24); float maxStaggerPoint[3]<comment="怯み値",optimize=false>;
    FSeek(p + 36); float staggerDecreaseStartTime<comment="怯み値減少開始時間">;
    FSeek(p + 40); float staggerDecreaseSpeed<comment="怯み値減少速度">;
    FSeek(p + 44); float attackRate<comment="攻撃倍率">;
    FSeek(p + 48); uint16 expItemNum<comment="経験値アイテムドロップ数">;
    FSeek(p + 50); uint16 exp<comment="合計経験値">;

    FSeek(p + 52);
} MiniBossLevelCommonConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;
    FSeek(p + 4); MiniBossLevelCommonConfig commonConfig<comment="基本設定">;

    FSeek(p + 56);
} MiniBossFlyerLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 id<comment="出現位置テーブル番号">;
    FSeek(p + 4); float interval<comment="終了後待機時間">;

    FSeek(p + 8);
} FlayerEscapeShotSequenceTable;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool isUse<comment="使用する">;
    FSeek(p + 4); FlayerEscapeShotSequenceTable table[8]<comment="table",optimize=false>;

    FSeek(p + 68);
} FlayerEscapeShotSequenceTableData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;
    FSeek(p + 4); FlayerEscapeShotSequenceTableData sequence[16]<comment="攻撃シーケンス",optimize=false>;

    FSeek(p + 1092);
} MiniBossFlyerLevelBand;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   MiniBossFlyerCommonParam commonParam<comment="共通パラメータ">;
    FSeek(p + 560); MiniBossFlyerLevelParam levelParams[5]<comment="レベル線形補間パラメータ",optimize=false>;
    FSeek(p + 840); MiniBossFlyerLevelBand levelBand[5]<comment="レベル帯別パラメータ",optimize=false>;

    FSeek(p + 6304);
} MiniBossFlyerConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
MiniBossFlyerConfig miniBossFlyerConfig;
