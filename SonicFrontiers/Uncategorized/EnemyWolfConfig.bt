local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float suckedTime;
    FSeek(p + 4);  float launchAngle;
    FSeek(p + 8);  float launchMaxSpeed;
    FSeek(p + 12); float launchMinSpeed;
    FSeek(p + 16); float randomRangeMin;
    FSeek(p + 20); float randomRangeMax;
    FSeek(p + 24); float lifeTime;

    FSeek(p + 28);
} RingParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float rotateSpeedMin;
    FSeek(p + 4);  float rotateSpeedMax;
    FSeek(p + 8);  float rotateSpeedMaxSpeedMin;
    FSeek(p + 12); float rotateSpeedMinSpeedMax;

    FSeek(p + 16);
} WolfMovementParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float distance;
    FSeek(p + 4); float angle;

    FSeek(p + 8);
} WolfEyesightParam;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef byte sint8;

enum<sint8> WolfVolumeShape
{
    SPHERE = 0,
    BOX = 1,
    CYLINDER = 2,
    CAPSULE = 3,
    NUM = 4,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 volumeSize;
    FSeek(p + 16); vector3 volumeOffset;
    FSeek(p + 32); vector3 volumeRotation;

    FSeek(p + 48);
} WolfVolumeInfo;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring tagName;
    FSeek(p + 16); sint8 pieceNum;
    FSeek(p + 20); float pieceFuncFactor;
    FSeek(p + 24); WolfVolumeShape volumeShape;
    FSeek(p + 32); cstring wolfNodeName;
    FSeek(p + 48); WolfVolumeInfo wolfVolume;
    FSeek(p + 96); bool effectActive;
    FSeek(p + 97); bool debugDraw;
    FSeek(p + 98); bool debugDrawVolumeAxis;
    FSeek(p + 99); bool debugDrawAxis;

    FSeek(p + 112);
} WolfMappingPairInfo;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  RingParameter ringParam;
    FSeek(p + 28); WolfMovementParam movement;
    FSeek(p + 44); WolfEyesightParam eyesight;
    FSeek(p + 52); float killWaitTime;
    FSeek(p + 56); float blockColliderRadius;
    FSeek(p + 60); float blockColliderHeight;
    FSeek(p + 64); float damageColliderRadius;
    FSeek(p + 68); float damageColliderHeight;
    FSeek(p + 72); float eyesightDistance;
    FSeek(p + 80); vector3 cursorOffset;
    FSeek(p + 96); WolfMappingPairInfo mappingPairInfo[32]<optimize=false>;

    FSeek(p + 3680);
} EnemyWolfCommonParam;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint;
    FSeek(p + 4);  float attackRate;
    FSeek(p + 8);  uint16 expItemNum;
    FSeek(p + 10); uint16 exp;

    FSeek(p + 12);
} EnemyWolfCommonLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level;
    FSeek(p + 4); EnemyWolfCommonLevelParam common;

    FSeek(p + 16);
} EnemyWolfLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level;

    FSeek(p + 4);
} EnemyWolfLevelBand;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    EnemyWolfCommonParam commonParam;
    FSeek(p + 3680); EnemyWolfLevelParam levelParams[5]<optimize=false>;
    FSeek(p + 3760); EnemyWolfLevelBand levelBand[5]<optimize=false>;

    FSeek(p + 3792);
} EnemyWolfConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyWolfConfig enemyWolfConfig;
