local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float suckedTime<comment="リング回収までの時間">;
    FSeek(p + 4);  float launchAngle<comment="噴出角度">;
    FSeek(p + 8);  float launchMaxSpeed<comment="噴出最高速度">;
    FSeek(p + 12); float launchMinSpeed<comment="噴出最低速度">;
    FSeek(p + 16); float randomRangeMin<comment="出現地点の幅(最小)">;
    FSeek(p + 20); float randomRangeMax<comment="出現地点の幅(最大)">;
    FSeek(p + 24); float lifeTime<comment="消えるまでの時間(負数でデフォルト)">;

    FSeek(p + 28);
} RingParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float rotateSpeedMin<comment="最小旋回力">;
    FSeek(p + 4);  float rotateSpeedMax<comment="最大旋回力">;
    FSeek(p + 8);  float rotateSpeedMaxSpeedMin<comment="最大旋回力になる最小速度">;
    FSeek(p + 12); float rotateSpeedMinSpeedMax<comment="最小旋回力になる最大速度">;

    FSeek(p + 16);
} WolfMovementParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float distance<comment="距離">;
    FSeek(p + 4); float angle<comment="画角">;

    FSeek(p + 8);
} WolfEyesightParam;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef byte sint8;

enum<sint8> WolfVolumeShape
{
    SPHERE = 0,
    BOX = 1,
    CYLINDER = 2,
    CAPSULE = 3,
    NUM = 4,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 volumeSize<comment="サイズ">;
    FSeek(p + 16); vector3 volumeOffset<comment="オフセット[モデルノード座標系]">;
    FSeek(p + 32); vector3 volumeRotation<comment="ローテーション[ボリューム座標系ZYX]">;

    FSeek(p + 48);
} WolfVolumeInfo;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  cstring tagName<comment="タグ名">;
    FSeek(p + 16); sint8 pieceNum<comment="生成ピース数">;
    FSeek(p + 20); float pieceFuncFactor<comment="ピース速度最小タイミング">;
    FSeek(p + 24); WolfVolumeShape volumeShape<comment="ボリューム形状">;
    FSeek(p + 32); cstring wolfNodeName<comment="狼型ノード名">;
    FSeek(p + 48); WolfVolumeInfo wolfVolume<comment="狼型ボリューム">;
    FSeek(p + 96); bool effectActive<comment="エフェクト付ける">;
    FSeek(p + 97); bool debugDraw<comment="[DEBUG]ボリューム描画">;
    FSeek(p + 98); bool debugDrawVolumeAxis<comment="[DEBUG]ボリューム軸描画">;
    FSeek(p + 99); bool debugDrawAxis<comment="[DEBUG]ノード軸描画">;

    FSeek(p + 112);
} WolfMappingPairInfo;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  RingParameter ringParam<comment="ドロップリング">;
    FSeek(p + 28); WolfMovementParam movement<comment="移動">;
    FSeek(p + 44); WolfEyesightParam eyesight<comment="視野">;
    FSeek(p + 52); float killWaitTime<comment="Killされるまでの待ち時間">;
    FSeek(p + 56); float blockColliderRadius<comment="本体剛体円柱コリジョン半径">;
    FSeek(p + 60); float blockColliderHeight<comment="本体剛体円柱コリジョン高さ">;
    FSeek(p + 64); float damageColliderRadius<comment="本体攻撃円柱コリジョン半径">;
    FSeek(p + 68); float damageColliderHeight<comment="本体攻撃円柱コリジョン高さ">;
    FSeek(p + 72); float eyesightDistance<comment="視野距離">;
    FSeek(p + 80); vector3 cursorOffset<comment="ターゲットカーソルオフセット">;
    FSeek(p + 96); WolfMappingPairInfo mappingPairInfo[32]<comment="[変形]ノードマッピング情報",optimize=false>;

    FSeek(p + 3680);
} EnemyWolfCommonParam;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint<comment="体力">;
    FSeek(p + 4);  float attackRate<comment="攻撃倍率">;
    FSeek(p + 8);  uint16 expItemNum<comment="経験値アイテムドロップ数">;
    FSeek(p + 10); uint16 exp<comment="合計経験値">;

    FSeek(p + 12);
} EnemyWolfCommonLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;
    FSeek(p + 4); EnemyWolfCommonLevelParam common<comment="共通設定">;

    FSeek(p + 16);
} EnemyWolfLevelParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 level<comment="レベル">;

    FSeek(p + 4);
} EnemyWolfLevelBand;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    EnemyWolfCommonParam commonParam<comment="共通パラメータ">;
    FSeek(p + 3680); EnemyWolfLevelParam levelParams[5]<comment="レベル線形補間パラメータ",optimize=false>;
    FSeek(p + 3760); EnemyWolfLevelBand levelBand[5]<comment="レベル帯別パラメータ",optimize=false>;

    FSeek(p + 3792);
} EnemyWolfConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyWolfConfig enemyWolfConfig;
