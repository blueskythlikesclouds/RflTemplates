local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef int32 sint32;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float timeLimitSeconds<comment="制限時間(秒)">;
    FSeek(p + 4);  float cautionTime<comment="Cautionアニメ開始残り時間(秒)">;
    FSeek(p + 8);  float warningTime<comment="(Cautionの後に再生する)Warningアニメ開始残り時間(秒)">;
    FSeek(p + 12); bool useCautionAnimation<comment="Cautionアニメを使うか">;
    FSeek(p + 13); bool useWarningAnimation<comment="Warningアニメを使うか">;

    FSeek(p + 16);
} QuestDarumaTimerParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 applicableFailedCount<comment="このデータを使う失敗数">;
    FSeek(p + 4);  float collectionColliderRadius<comment="中断コリジョン半径">;
    FSeek(p + 8);  float collectionColliderHeight<comment="中断コリジョン高さ">;
    FSeek(p + 12); QuestDarumaTimerParameter timerParam<comment="タイマー">;

    FSeek(p + 28);
} QuestDarumaBattleParameterElement;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); QuestDarumaBattleParameterElement element[3]<comment="ダルマ戦",optimize=false>;

    FSeek(p + 84);
} QuestDarumaBattleParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
QuestDarumaBattleParameter questDarumaBattleParameter;
