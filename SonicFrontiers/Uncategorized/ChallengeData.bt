local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef ubyte uint8;

typedef byte sint8;

enum<sint8> Status
{
    STATUS_ZERO_FILL = 0,
    STATUS_INITIALIZED = 1,
};

enum<sint8> Sequence
{
    Island1 = 0,
    Island2 = 1,
    Island3 = 2,
    Island4 = 3,
    Island5 = 4,
    FinalBossBefore = 5,
    FinalBossAfter = 6,
};

enum<sint8> SaveDataIcon
{
    IconNoData = 0,
    IconIsland1 = 1,
    IconIsland2 = 2,
    IconIsland3 = 3,
    IconIsland4 = 4,
    IconIsland5 = 5,
    IconLastBoss = 6,
};

enum<uint8> AppVersion
{
    AppVersion_1_10 = 0,
    AppVersion_1_20 = 1,
    AppVersion_1_30 = 2,
    AppVersion_1_40 = 3,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 signature<comment="シグニチャ">;
    FSeek(p + 4);  uint8 version<comment="バージョン">;
    FSeek(p + 5);  Status status<comment="ステータス">;
    FSeek(p + 6);  uint8 config<comment="コンフィグ">;
    FSeek(p + 7);  Sequence sequence<comment="シーケンス">;
    FSeek(p + 8);  uint32 playTime<comment="プレイ時間">;
    FSeek(p + 12); SaveDataIcon icon<comment="セーブデータアイコン">;
    FSeek(p + 13); AppVersion appVersion<comment="アプリバージョン">;
    FSeek(p + 14); uint16 reserved1<comment="reserved1">;
    FSeek(p + 16); uint32 saveDate<comment="保存日時">;
    FSeek(p + 20); uint8 index<comment="index">;
    FSeek(p + 24); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 40);
} HeaderData;

enum<sint8> Value
{
    S = 0,
    A = 1,
    B = 2,
    C = 3,
    D = 4,
    Num = 5,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint16 flags<comment="ビットフラグ">;
    FSeek(p + 4); uint32 bestTime<comment="ベストタイム">;
    FSeek(p + 8); uint32 reserved[4]<comment="reserved",optimize=false>;

    FSeek(p + 24);
} CyberStageData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); CyberStageData actStages[32]<comment="電脳空間ステージ情報",optimize=false>;

    FSeek(p + 768);
} CyberStageContainerData;

typedef int32 sint32;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   uint32 status<comment="ステータス">;
    FSeek(p + 4);   uint32 totalBestTime<comment="ベストタイム">;
    FSeek(p + 8);   Value totalBestRank<comment="ベストランク">;
    FSeek(p + 12);  CyberStageContainerData stages<comment="電脳空間ステージコンテナ">;
    FSeek(p + 780); sint32 stageNos[32]<comment="クリア順のステージ番号",optimize=false>;

    FSeek(p + 908);
} ChallengeCyberStageData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); ChallengeCyberStageData stages[5]<comment="ステージ",optimize=false>;

    FSeek(p + 4540);
} ChallengeCyberStageContainerData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  uint32 bestTime<comment="ベストタイム">;
    FSeek(p + 4);  uint32 reserved0<comment="reserved0">;
    FSeek(p + 8);  uint32 reserved1<comment="reserved1">;
    FSeek(p + 12); uint32 reserved2<comment="reserved2">;
    FSeek(p + 16); uint32 reserved3<comment="reserved3">;

    FSeek(p + 20);
} ChallengeBattleRushScoreData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint32 status<comment="ステータス">;
    FSeek(p + 4); ChallengeBattleRushScoreData scores[16]<comment="フェイズスコア",optimize=false>;

    FSeek(p + 324);
} ChallengeBattleRushData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); ChallengeBattleRushData stages[4]<comment="ステージ",optimize=false>;

    FSeek(p + 1296);
} ChallengeBattleRushContainerData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    HeaderData header<comment="ヘッダ">;
    FSeek(p + 40);   uint32 status<comment="ステータス">;
    FSeek(p + 44);   ChallengeCyberStageContainerData cyberStage<comment="電脳チャレンジ">;
    FSeek(p + 4584); ChallengeBattleRushContainerData battleRush<comment="バトルラッシュ">;
    FSeek(p + 5880); ChallengeBattleRushContainerData battleRushAll<comment="バトルラッシュ全島">;
    FSeek(p + 7176); uint32 reserved0<comment="reserved0">;
    FSeek(p + 7180); uint32 reserved1<comment="reserved1">;
    FSeek(p + 7184); uint32 reserved2<comment="reserved2">;
    FSeek(p + 7188); uint32 reserved3<comment="reserved3">;

    FSeek(p + 7192);
} ChallengeData;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
ChallengeData challengeData;
