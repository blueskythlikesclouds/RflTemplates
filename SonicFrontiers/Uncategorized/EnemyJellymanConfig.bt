local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float rotateSpeedMin<comment="最小旋回力">;
    FSeek(p + 4);  float rotateSpeedMax<comment="最大旋回力">;
    FSeek(p + 8);  float rotateSpeedMaxSpeedMin<comment="最大旋回力になる最小速度">;
    FSeek(p + 12); float rotateSpeedMinSpeedMax<comment="最小旋回力になる最大速度">;

    FSeek(p + 16);
} Movement;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float distance<comment="距離">;
    FSeek(p + 4); float angle<comment="画角">;

    FSeek(p + 8);
} Eyesight;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float attackRange<comment="攻撃可能距離">;
    FSeek(p + 4); float attackAngle<comment="攻撃可能角度">;
    FSeek(p + 8); float attackSpeed<comment="攻撃ヒット時に与える速度">;

    FSeek(p + 12);
} Fight;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Movement movement<comment="移動">;
    FSeek(p + 16); Eyesight eyesight<comment="視野">;
    FSeek(p + 24); Fight fight<comment="戦闘">;
    FSeek(p + 36); float transformRate<comment="変形確率">;

    FSeek(p + 40);
} EnemyJellymanModeConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  EnemyJellymanModeConfig common<comment="common">;
    FSeek(p + 40); float actionDistance[5]<comment="攻撃開始距離",optimize=false>;

    FSeek(p + 60);
} JellymanHumanCommonConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float suckedTime<comment="リング回収までの時間">;
    FSeek(p + 4);  float launchAngle<comment="噴出角度">;
    FSeek(p + 8);  float launchMaxSpeed<comment="噴出最高速度">;
    FSeek(p + 12); float launchMinSpeed<comment="噴出最低速度">;
    FSeek(p + 16); float randomRangeMin<comment="出現地点の幅(最小)">;
    FSeek(p + 20); float randomRangeMax<comment="出現地点の幅(最大)">;
    FSeek(p + 24); float lifeTime<comment="消えるまでの時間(負数でデフォルト)">;

    FSeek(p + 28);
} RingParameter;

typedef int32 sint32;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef byte sint8;

enum<sint8> VolumeShape
{
    SPHERE = 0,
    BOX = 1,
    CYLINDER = 2,
    CAPSULE = 3,
    NUM = 4,
};

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 volumeSize<comment="サイズ">;
    FSeek(p + 16); vector3 volumeOffset<comment="オフセット[モデルノード座標系]">;
    FSeek(p + 32); vector3 volumeRotation<comment="ローテーション[ボリューム座標系ZYX]">;

    FSeek(p + 48);
} VolumeInfo;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   cstring tagName<comment="タグ名">;
    FSeek(p + 16);  sint8 pieceNum<comment="生成ピース数">;
    FSeek(p + 20);  float pieceFuncFactor<comment="ピース速度最小タイミング">;
    FSeek(p + 24);  VolumeShape volumeShape<comment="ボリューム形状">;
    FSeek(p + 32);  cstring humanNodeName<comment="人型ノード名">;
    FSeek(p + 48);  VolumeInfo humanVolume<comment="人型ボリューム">;
    FSeek(p + 96);  cstring eggNodeName<comment="卵型ノード名">;
    FSeek(p + 112); VolumeInfo eggVolume<comment="卵型ボリューム">;
    FSeek(p + 160); bool effectActive<comment="エフェクト付ける">;
    FSeek(p + 161); bool debugDraw<comment="[DEBUG]ボリューム描画">;
    FSeek(p + 162); bool debugDrawVolumeAxis<comment="[DEBUG]ボリューム軸描画">;
    FSeek(p + 163); bool debugDrawAxis<comment="[DEBUG]ノード軸描画">;

    FSeek(p + 176);
} MappingPairInfo;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   JellymanHumanCommonConfig human<comment="人型設定">;
    FSeek(p + 60);  RingParameter ringParam<comment="ドロップリング">;
    FSeek(p + 88);  sint32 codeDropNumMin<comment="[コード]最小ドロップ数">;
    FSeek(p + 92);  sint32 codeDropNumMax<comment="[コード]最大ドロップ数">;
    FSeek(p + 96);  sint32 codeXDropNumMin<comment="[コードX]最大ドロップ数">;
    FSeek(p + 100); sint32 codeXDropNumMax<comment="[コードX]最大ドロップ数">;
    FSeek(p + 112); MappingPairInfo mappingPairInfo[32]<comment="[変形]ノードマッピング情報",optimize=false>;

    FSeek(p + 5744);
} EnemyCommonConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 maxHealthPoint<comment="体力">;
    FSeek(p + 4);  float maxStunPoint[3]<comment="スタン値",optimize=false>;
    FSeek(p + 16); float stunDecreaseStartTime<comment="スタン値減少開始時間">;
    FSeek(p + 20); float stunDecreaseSpeed<comment="スタン値減少速度">;
    FSeek(p + 24); float maxStaggerPoint[3]<comment="怯み値",optimize=false>;
    FSeek(p + 36); float staggerDecreaseStartTime<comment="怯み値減少開始時間">;
    FSeek(p + 40); float staggerDecreaseSpeed<comment="怯み値減少速度">;
    FSeek(p + 44); float stunTime<comment="スタン時間">;
    FSeek(p + 48); float attackRate<comment="攻撃倍率">;
    FSeek(p + 52); float attackMotionSpeed<comment="攻撃モーション速度">;
    FSeek(p + 56); uint16 expItemNum<comment="経験値アイテムドロップ数">;
    FSeek(p + 58); uint16 exp<comment="合計経験値">;

    FSeek(p + 60);
} JellymanCommonLevelConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float wallTime<comment="壁の持続時間">;
    FSeek(p + 4);  sint32 wallLife<comment="壁の体力">;
    FSeek(p + 8);  float guardTime<comment="ガードの持続時間">;
    FSeek(p + 12); float guardCoolTime<comment="ガードのクールタイム">;

    FSeek(p + 16);
} JellymanHumanLevelConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 level<comment="レベル">;
    FSeek(p + 4);  JellymanCommonLevelConfig common<comment="共通設定">;
    FSeek(p + 64); JellymanHumanLevelConfig human<comment="人型設定">;

    FSeek(p + 80);
} EnemyLevelConfig;

enum<sint8> SuperArmorType
{
    None = 0,
    Attack = 1,
    Always = 2,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); SuperArmorType superArmor<comment="スーパーアーマー">;
    FSeek(p + 1); bool isTransform<comment="変形するか">;
    FSeek(p + 4); float downTime<comment="ダウン時間">;

    FSeek(p + 8);
} JellymanCommonActionConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float actionRate[5]<comment="行動確率",optimize=false>;

    FSeek(p + 20);
} JellymanHumanActionRate;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   JellymanHumanActionRate rateTable[4]<comment="行動確率テーブル",optimize=false>;
    FSeek(p + 80);  float coolTime[5]<comment="行動別クールタイム",optimize=false>;
    FSeek(p + 100); float attackCoolTime<comment="行動後待機時間">;
    FSeek(p + 104); float nearRange<comment="近距離とみなす距離">;
    FSeek(p + 108); sint32 nearRateId<comment="近距離時確率テーブルID">;
    FSeek(p + 112); sint32 farRateId<comment="遠距離時確率テーブルID">;
    FSeek(p + 116); bool isCounterGuard<comment="HAに反応してガードするか">;
    FSeek(p + 117); bool isCounterWall<comment="HAに反応して壁を作るか">;
    FSeek(p + 118); bool isSpikeWall<comment="トゲ付き壁か">;
    FSeek(p + 120); sint32 waveNum<comment="ウェーブ数">;
    FSeek(p + 124); float waveUpTime<comment="ウェーブ上昇時間">;
    FSeek(p + 128); float waveLifeTime<comment="全ウェーブ上昇後の維持時間">;
    FSeek(p + 132); float waveDownTime<comment="ウェーブ下降時間">;
    FSeek(p + 136); float waveRadius<comment="ウェーブ初回半径">;
    FSeek(p + 140); float waveAddRadius<comment="ウェーブ２つ目以降増加半径">;
    FSeek(p + 144); float waveSpawnTime<comment="ウェーブ２つ目以降生成間隔時間">;
    FSeek(p + 148); float waveKeepRadius<comment="ウェーブダメージ発生幅[m]">;
    FSeek(p + 152); float waveHeight<comment="ウェーブコリジョンの高さ">;
    FSeek(p + 156); sint32 rushNum<comment="連撃数">;

    FSeek(p + 160);
} JellymanHumanActionConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 level<comment="レベル">;
    FSeek(p + 4);  JellymanCommonActionConfig common<comment="共通設定">;
    FSeek(p + 12); JellymanHumanActionConfig human<comment="人型設定">;

    FSeek(p + 172);
} EnemyLevelBandConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  sint32 level<comment="平均レベル">;
    FSeek(p + 4);  sint32 maxActionCount<comment="同時攻撃最大数">;
    FSeek(p + 8);  float spAttackWaitTime<comment="大技クールタイム[現状ウェーブ攻撃のみ]">;
    FSeek(p + 12); sint32 humanMaxActionCount[5]<comment="人型同一行動最大数",optimize=false>;

    FSeek(p + 32);
} EnemySquadAvarageLevelConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); EnemySquadAvarageLevelConfig averageLevelConfig[5]<comment="平均レベル基準パラメータ",optimize=false>;

    FSeek(p + 160);
} EnemySquadConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    EnemyCommonConfig commonParams<comment="共通パラメータ">;
    FSeek(p + 5744); EnemyLevelConfig levelParams[8]<comment="レベル線形補間パラメータ",optimize=false>;
    FSeek(p + 6384); EnemyLevelBandConfig levelBands[5]<comment="レベル帯別パラメータ",optimize=false>;
    FSeek(p + 7244); EnemySquadConfig squadParams<comment="集団戦用パラメータ">;

    FSeek(p + 7408);
} EnemyJellymanConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyJellymanConfig enemyJellymanConfig;
