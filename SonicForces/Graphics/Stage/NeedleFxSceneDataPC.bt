//----------------------------------------//
// This file was auto-generated by Skyth. //
//----------------------------------------//

enum<byte> BloomRenderTargetSize {
	RTSIZE_ONE_FOURTH    = 0,
	RTSIZE_ONE_EIGHTH    = 1,
	RTSIZE_ONE_SIXTEENTH = 2,
};

enum<int> DOFRenderTargetSize {
	RTSIZE_FULL_SCALE    = 0,
	RTSIZE_HALF_SCALE    = 1,
	RTSIZE_QUARTER_SCALE = 2,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  BloomRenderTargetSize bloomRenderTargetScale;
	FSeek(p + 4);  DOFRenderTargetSize dofRenderTargetScale;
	FSeek(p + 8);  int shadowMapWidth;
	FSeek(p + 12); int shadowMapHeight;

	FSeek(p + 16);
} FxRenderTargetSetting;

enum<byte> AntiAliasingType {
	AATYPE_NONE = 0,
	AATYPE_TAA  = 1,
	AATYPE_FXAA = 2,
	AATYPE_LAST = 3,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); AntiAliasingType aaType;

	FSeek(p + 1);
} FxAntiAliasing;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  FxRenderTargetSetting rendertarget;
	FSeek(p + 16); FxAntiAliasing antialiasing;

	FSeek(p + 20);
} NeedleFxSceneConfig;

enum<byte> ToneMapType {
	TONEMAPTYPE_MANUAL_EXPOSURE = 0,
	TONEMAPTYPE_AUTO            = 1,
};

enum<byte> ExposureMode {
	FXEXPOSUREMODE_DISNEY = 0,
	FXEXPOSUREMODE_FILMIC = 1,
};

enum<byte> bool { False = 0, True = 1 };

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); bool enable;
	FSeek(p + 1); ubyte padding;

	FSeek(p + 2);
} FxHDROption;

enum<byte> DebugViewType {
	DEBUG_VIEW_DEFAULT              = 0,
	DEBUG_VIEW_DIR_DIFFUSE          = 1,
	DEBUG_VIEW_DIR_SPECULAR         = 2,
	DEBUG_VIEW_AMB_DIFFUSE          = 3,
	DEBUG_VIEW_AMB_SPECULAR         = 4,
	DEBUG_VIEW_ONLY_IBL             = 5,
	DEBUG_VIEW_ONLY_IBL_SURF_NORMAL = 6,
	DEBUG_VIEW_SHADOW               = 7,
	DEBUG_VIEW_WHITE_ALBEDO         = 8,
	DEBUG_VIEW_USER0                = 9,
	DEBUG_VIEW_USER1                = 10,
	DEBUG_VIEW_USER2                = 11,
	DEBUG_VIEW_USER3                = 12,
	DEBUG_VIEW_ALBEDO               = 13,
	DEBUG_VIEW_ALBEDO_CHECK_OUTLIER = 14,
	DEBUG_VIEW_OPACITY              = 15,
	DEBUG_VIEW_NORMAL               = 16,
	DEBUG_VIEW_ROUGHNESS            = 17,
	DEBUG_VIEW_AMBIENT              = 18,
	DEBUG_VIEW_CAVITY               = 19,
	DEBUG_VIEW_REFLECTANCE          = 20,
	DEBUG_VIEW_METALLIC             = 21,
	DEBUG_VIEW_LOCAL_LIGHT          = 22,
	DEBUG_VIEW_SCATTERING_FEX       = 23,
	DEBUG_VIEW_SCATTERING_LIN       = 24,
	DEBUG_VIEW_SSAO                 = 25,
	DEBUG_VIEW_RLR                  = 26,
	DEBUG_VIEW_IBL_DIFFUSE          = 27,
	DEBUG_VIEW_IBL_SPECULAR         = 28,
	DEBUG_VIEW_ENV_BRDF             = 29,
	DEBUG_VIEW_WORLD_POSITION       = 30,
	DEBUG_VIEW_SHADING_MODEL_ID     = 31,
	DEBUG_VIEW_IBL_CAPTURE          = 32,
	DEBUG_VIEW_IBL_SKY_TERRAIN      = 33,
	DEBUG_VIEW_WRITE_DEPTH_TO_ALPHA = 34,
};

enum<byte> LocalLightCullingType {
	LOCAL_LIGHT_CULLING_TYPE_NONE     = 0,
	LOCAL_LIGHT_CULLING_TYPE_CPU_TILE = 1,
	LOCAL_LIGHT_CULLING_TYPE_GPU_TILE = 2,
};

enum<byte> TextureViewType {
	TEXTURE_VIEW_NONE                   = 0,
	TEXTURE_VIEW_DEPTH                  = 1,
	TEXTURE_VIEW_BLOOM_POWER            = 2,
	TEXTURE_VIEW_BLOOM_BRIGHT           = 3,
	TEXTURE_VIEW_BLOOM_FINAL            = 4,
	TEXTURE_VIEW_GLARE                  = 5,
	TEXTURE_VIEW_LUMINANCE              = 6,
	TEXTURE_VIEW_DOF_BOKEH              = 7,
	TEXTURE_VIEW_DOF_BOKEH_NEAR         = 8,
	TEXTURE_VIEW_SSAO_SOURCE            = 9,
	TEXTURE_VIEW_DOWNSAMPLE             = 10,
	TEXTURE_VIEW_CASCADED_SHADOW_MAPS_0 = 11,
	TEXTURE_VIEW_CASCADED_SHADOW_MAPS_1 = 12,
	TEXTURE_VIEW_CASCADED_SHADOW_MAPS_2 = 13,
	TEXTURE_VIEW_CASCADED_SHADOW_MAPS_3 = 14,
};

enum<byte> AmbientSpecularType {
	AMBIENT_SPECULAR_NONE  = 0,
	AMBIENT_SPECULAR_SG    = 1,
	AMBIENT_SPECULAR_IBL   = 2,
	AMBIENT_SPECULAR_BLEND = 3,
};

enum<byte> DebugScreenView {
	DEBUG_SCREEN_VIEW_DEFAULT     = 0,
	DEBUG_SCREEN_VIEW_ALL_ENABLE  = 1,
	DEBUG_SCREEN_VIEW_ALL_DISABLE = 2,
};

enum<byte> ViewMode {
	VIEWMODE_RGB = 0,
	VIEWMODE_RRR = 1,
	VIEWMODE_GGG = 2,
	VIEWMODE_BBB = 3,
	VIEWMODE_AAA = 4,
};

enum<byte> DebugScreenType {
	DEBUG_SCREEN_GBUFFER0    = 0,
	DEBUG_SCREEN_GBUFFER1    = 1,
	DEBUG_SCREEN_GBUFFER2    = 2,
	DEBUG_SCREEN_GBUFFER3    = 3,
	DEBUG_SCREEN_DEPTHBUFFER = 4,
	DEBUG_SCREEN_CSM0        = 5,
	DEBUG_SCREEN_CSM1        = 6,
	DEBUG_SCREEN_CSM2        = 7,
	DEBUG_SCREEN_CSM3        = 8,
	DEBUG_SCREEN_HDR         = 9,
	DEBUG_SCREEN_BLOOM       = 10,
	DEBUG_SCREEN_RLR         = 11,
	DEBUG_SCREEN_GODRAY      = 12,
	DEBUG_SCREEN_SSAO        = 13,
	DEBUG_SCREEN_CUSTOM0     = 14,
	DEBUG_SCREEN_CUSTOM1     = 15,
	DEBUG_SCREEN_CUSTOM2     = 16,
	DEBUG_SCREEN_CUSTOM3     = 17,
};

enum<byte> ErrorCheckType {
	ERROR_CHECK_NONE   = 0,
	ERROR_CHECK_NAN    = 1,
	ERROR_CHECK_ALBEDO = 2,
	ERROR_CHECK_NORMAL = 3,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); bool enable;
	FSeek(p + 1); bool fullScreen;
	FSeek(p + 2); ViewMode viewMode;
	FSeek(p + 4); float exposure;
	FSeek(p + 8); DebugScreenType screenType;
	FSeek(p + 9); ErrorCheckType errorCheck;

	FSeek(p + 12);
} FxDebugScreenOption;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);   DebugViewType debugViewType;
	FSeek(p + 1);   bool clearRenderTarget;
	FSeek(p + 4);   int maxCubeProbe;
	FSeek(p + 8);   bool enableDrawCubeProbe;
	FSeek(p + 9);   bool enableDirectionalLight;
	FSeek(p + 10);  bool enablePointLight;
	FSeek(p + 11);  bool enableEffectDeformation;
	FSeek(p + 12);  bool enableReverseDepth;
	FSeek(p + 16);  float cullingTooSmallThrehold;
	FSeek(p + 20);  LocalLightCullingType localLightCullingType;
	FSeek(p + 24);  float localLightScale;
	FSeek(p + 28);  bool debugEnableDrawLocalLight;
	FSeek(p + 29);  TextureViewType debugTextureViewType;
	FSeek(p + 30);  bool debugEnableOutputTextureView;
	FSeek(p + 32);  float debugViewDepthNear;
	FSeek(p + 36);  float debugViewDepthFar;
	FSeek(p + 40);  AmbientSpecularType debugAmbientSpecularType;
	FSeek(p + 41);  bool debugIBLPlusDirectionalSpecular;
	FSeek(p + 42);  bool debugEnableSGGIVer2nd;
	FSeek(p + 43);  bool debugEnableOcclusionCullingView;
	FSeek(p + 44);  int debugOccluderVertThreshold;
	FSeek(p + 48);  FxDebugScreenOption debugScreen[16]<optimize=false>;
	FSeek(p + 240); DebugScreenView debugScreenView;

	FSeek(p + 244);
} FxRenderOption;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); float sgStartSmoothness;
	FSeek(p + 4); float sgEndSmoothness;

	FSeek(p + 8);
} FxSGGIParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 4);  float num;
	FSeek(p + 8);  float travelFadeStart;
	FSeek(p + 12); float travelFadeEnd;
	FSeek(p + 16); float borderFadeStart;
	FSeek(p + 20); float borderFadeEnd;
	FSeek(p + 24); float overrideRatio;
	FSeek(p + 28); float maxRoughness;
	FSeek(p + 32); float hizStartLevel;

	FSeek(p + 36);
} FxRLRParameter;

enum<byte> GlareType {
	GLARE_DISABLE                      = 0,
	GLARE_CAMERA                       = 1,
	GLARE_NATURAL                      = 2,
	GLARE_CHEAP_LENS                   = 3,
	GLARE_FILTER_CROSS_SCREEN          = 4,
	GLARE_FILTER_CROSS_SCREEN_SPECTRAL = 5,
	GLARE_FILTER_SNOW_CROSS            = 6,
	GLARE_FILTER_SNOW_CROSS_SPECTRAL   = 7,
	GLARE_FILTER_SUNNY_CROSS           = 8,
	GLARE_FILTER_SUNNY_CROSS_SPECTRAL  = 9,
	GLARE_CINECAM_VERTICAL_SLITS       = 10,
	GLARE_CINECAM_HORIZONTAL_SLITS     = 11,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 4);  float bloomThreshold;
	FSeek(p + 8);  float bloomMax;
	FSeek(p + 12); float bloomScale;
	FSeek(p + 16); float starScale;
	FSeek(p + 20); int ghostCount;
	FSeek(p + 24); float ghostScale;
	FSeek(p + 28); float haloScale;
	FSeek(p + 32); float sampleRadiusScale;
	FSeek(p + 36); int blurQuality;
	FSeek(p + 40); GlareType glareType;

	FSeek(p + 44);
} FxBloomParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  float middleGray;
	FSeek(p + 4);  float lumMax;
	FSeek(p + 8);  float lumMin;
	FSeek(p + 12); float adaptedRatio;

	FSeek(p + 16);
} FxToneMapParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); float exposureValue;

	FSeek(p + 4);
} FxExposureParameter;

enum<int> LutIndex {
	LUT_INDEX_DEFAULT = 0,
	LUT_INDEX_WB      = 1,
	LUT_INDEX_USER_0  = 2,
	LUT_INDEX_USER_1  = 3,
	LUT_INDEX_USER_2  = 4,
	LUT_INDEX_USER_3  = 5,
	LUT_INDEX_USER_4  = 6,
	LUT_INDEX_USER_5  = 7,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 4);  float contrast;
	FSeek(p + 8);  float dynamicRange;
	FSeek(p + 12); float crushShadows;
	FSeek(p + 16); float crushHilights;
	FSeek(p + 20); bool useLut;
	FSeek(p + 24); LutIndex lutIndex0;
	FSeek(p + 28); LutIndex lutIndex1;
	FSeek(p + 32); float blendRatio;
	FSeek(p + 36); float minContrast;
	FSeek(p + 40); bool useHlsCorrection;
	FSeek(p + 44); float hlsHueOffset;
	FSeek(p + 48); float hlsLightnessOffset;
	FSeek(p + 52); float hlsSaturationOffset;
	FSeek(p + 56); int hlsColorOffset[3]<optimize=false>;
	FSeek(p + 68); ubyte padding;

	FSeek(p + 72);
} FxColorContrastParameter;

typedef struct { float x; float y; float z; float w<hidden=true>; } Vector3;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 16); Vector3 color;
	FSeek(p + 32); float depthScale;
	FSeek(p + 36); float inScatteringScale;
	FSeek(p + 40); float rayleigh;
	FSeek(p + 44); float mie;
	FSeek(p + 48); float g;
	FSeek(p + 52); float znear;
	FSeek(p + 56); float zfar;

	FSeek(p + 64);
} FxLightScatteringParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 1);  bool useFocusLookAt;
	FSeek(p + 4);  float foregroundBokehMaxDepth;
	FSeek(p + 8);  float foregroundBokehStartDepth;
	FSeek(p + 12); float backgroundBokehStartDepth;
	FSeek(p + 16); float backgroundBokehMaxDepth;
	FSeek(p + 20); bool enableCircleDOF;
	FSeek(p + 24); float cocMaxRadius;
	FSeek(p + 28); float bokehRadiusScale;
	FSeek(p + 32); int bokehSampleCount;
	FSeek(p + 36); float skyFocusDistance;
	FSeek(p + 40); float bokehBias;
	FSeek(p + 44); bool drawFocalPlane;
	FSeek(p + 45); bool enableSWA;
	FSeek(p + 48); float swaFocus;
	FSeek(p + 52); float swaFocusRange;
	FSeek(p + 56); float swaNear;
	FSeek(p + 60); float swaFar;

	FSeek(p + 64);
} FxDOFParameter;

typedef struct { float data[16]; } Matrix4x4;

enum<byte> ShadowFilter {
	SHADOW_FILTER_POINT        = 0,
	SHADOW_FILTER_PCF          = 1,
	SHADOW_FILTER_ESM          = 2,
	SHADOW_FILTER_MSM          = 3,
	SHADOW_FILTER_VSM_POINT    = 4,
	SHADOW_FILTER_VSM_LINEAR   = 5,
	SHADOW_FILTER_VSM_ANISO_2  = 6,
	SHADOW_FILTER_VSM_ANISO_4  = 7,
	SHADOW_FILTER_VSM_ANISO_8  = 8,
	SHADOW_FILTER_VSM_ANISO_16 = 9,
};

enum<byte> ShadowRangeType {
	SHADOW_RANGE_TYPE_CAMERA_LOOKAT   = 0,
	SHADOW_RANGE_TYPE_POSITION_MANUAL = 1,
	SHADOW_RANGE_TYPE_FULL_MANUAL     = 2,
};

enum<byte> FitProjection {
	FIT_PROJECTION_TO_CASCADES = 0,
	FIT_PROJECTION_TO_SCENE    = 1,
};

enum<byte> FitNearFar {
	FIT_NEARFAR_ZERO_ONE   = 0,
	FIT_NEARFAR_AABB       = 1,
	FIT_NEARFAR_SCENE_AABB = 2,
};

enum<byte> CascadeSelection {
	CASCADE_SELECTION_MAP      = 0,
	CASCADE_SELECTION_INTERVAL = 1,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);   bool enable;
	FSeek(p + 1);   ShadowFilter shadowFilter;
	FSeek(p + 2);   ShadowRangeType shadowRangeType;
	FSeek(p + 3);   FitProjection fitProjection;
	FSeek(p + 4);   FitNearFar fitNearFar;
	FSeek(p + 5);   CascadeSelection cascadeSelection;
	FSeek(p + 8);   float sceneRange;
	FSeek(p + 12);  float sceneCenter[3]<optimize=false>;
	FSeek(p + 24);  float manualLightPos[3]<optimize=false>;
	FSeek(p + 36);  int cascadeLevel;
	FSeek(p + 40);  float cascadeSplits[4]<optimize=false>;
	FSeek(p + 56);  int blurQuality;
	FSeek(p + 60);  int blurSize;
	FSeek(p + 64);  float bias;
	FSeek(p + 68);  float fadeoutDistance;
	FSeek(p + 80);  Matrix4x4 shadowCameraViewMatrix;
	FSeek(p + 144); Matrix4x4 shadowCameraProjectionMatrix;
	FSeek(p + 208); float shadowCameraNearDepth;
	FSeek(p + 212); float shadowCameraFarDepth;
	FSeek(p + 216); float shadowCameraLookAtDepth;
	FSeek(p + 220); bool enableShadowCamera;
	FSeek(p + 221); bool enableMoveLightTexelSize;
	FSeek(p + 222); bool enableDrawSceneAABB;
	FSeek(p + 223); bool enableDrawShadowFrustum;
	FSeek(p + 224); bool enableDrawCascade;
	FSeek(p + 225); bool enableDrawCameraFrustum;
	FSeek(p + 226); bool enablePauseCamera;

	FSeek(p + 240);
} FxShadowMapParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 4);  float intensity;
	FSeek(p + 8);  float radius;
	FSeek(p + 12); float fadeoutDistance;
	FSeek(p + 16); float fadeoutRadius;
	FSeek(p + 20); float power;
	FSeek(p + 24); float bias;
	FSeek(p + 28); float occlusionDistance;
	FSeek(p + 32); int renderTargetSizeEnumIndex;

	FSeek(p + 36);
} FxSSAOParameter;

enum<byte> ScalingType {
	SCALING_PHOTOSHOP_FILETER = 2,
	SCALING_NONE              = 3,
	SCALING_IGNORE_DATA       = 4,
};

enum<byte> DebugDrawType {
	DEBUG_DRAW_TYPE_NONE   = 0,
	DEBUG_DRAW_TYPE_LOOKAT = 1,
	DEBUG_DRAW_TYPE_NODE   = 2,
};

enum<byte> DebugColorType {
	DEBUG_COLOR_TYPE_COLOR     = 0,
	DEBUG_COLOR_TYPE_SHADOW    = 1,
	DEBUG_COLOR_TYPE_LUMINANCE = 2,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);   ScalingType saturationScalingType;
	FSeek(p + 4);   float saturationScalingRate;
	FSeek(p + 8);   float luminanceScalingRate;
	FSeek(p + 12);  bool forceUpdate;
	FSeek(p + 13);  bool ignoreData;
	FSeek(p + 14);  bool ignoreFinalLightColorAdjestment;
	FSeek(p + 16);  float intensityThreshold;
	FSeek(p + 20);  float intensityBias;
	FSeek(p + 24);  float luminanceMax;
	FSeek(p + 28);  float luminanceMin;
	FSeek(p + 32);  float luminanceCenter;
	FSeek(p + 48);  Vector3 defaultColorUp;
	FSeek(p + 64);  Vector3 defaultColorDown;
	FSeek(p + 80);  Vector3 offsetColorUp;
	FSeek(p + 96);  Vector3 offsetColorDown;
	FSeek(p + 112); DebugDrawType debugDrawType;
	FSeek(p + 113); DebugColorType debugColorType;
	FSeek(p + 116); int drawNodeStart;
	FSeek(p + 120); int drawNodeCount;
	FSeek(p + 124); float debugColorScale;
	FSeek(p + 128); float debugBoxScale;
	FSeek(p + 132); float debugLookAtRange;
	FSeek(p + 136); bool lockLookAt;

	FSeek(p + 144);
} FxLightFieldParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); bool enable;
	FSeek(p + 1); DebugDrawType debugDrawType;
	FSeek(p + 2); bool showSkyVisibility;

	FSeek(p + 3);
} FxSHLightFieldParameter;

enum<byte> BlurType {
	BLURTYPE_PREV_SURFACE = 0,
	BLURTYPE_RADIAL       = 1,
	BLURTYPE_CAMERA       = 2,
};

enum<byte> FocusType {
	FOCUSTYPE_CENTER       = 0,
	FOCUSTYPE_LOOKAT       = 1,
	FOCUSTYPE_USER_SETTING = 2,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 1);  BlurType blurType;
	FSeek(p + 4);  float blurPower;
	FSeek(p + 8);  FocusType focusType;
	FSeek(p + 16); Vector3 focusPosition;
	FSeek(p + 32); float focusRange;
	FSeek(p + 36); float alphaSlope;
	FSeek(p + 40); int sampleNum;

	FSeek(p + 48);
} FxScreenBlurParameter;

typedef struct { ubyte a; ubyte r; ubyte g; ubyte b; } Color8;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);   bool enable;
	FSeek(p + 1);   bool enableOcclusion;
	FSeek(p + 2);   Color8 occlusionColor;
	FSeek(p + 8);   float occlusionPower;
	FSeek(p + 12);  bool enableSpecularOcclusion;
	FSeek(p + 16);  float specularOcclusionPower;
	FSeek(p + 20);  float specularOcclusionConeAngle;
	FSeek(p + 24);  bool enableShadow;
	FSeek(p + 25);  Color8 shadowColor;
	FSeek(p + 32);  float shadowPower;
	FSeek(p + 36);  float shadowConeAngle;
	FSeek(p + 40);  float cullingDistance;
	FSeek(p + 44);  bool enableManualLight;
	FSeek(p + 48);  int manualLightCount;
	FSeek(p + 64);  Vector3 manualLightPos[4]<optimize=false>;
	FSeek(p + 128); bool debugDraw;

	FSeek(p + 144);
} FxOcclusionCapsuleParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  float lightFieldColorCoefficient;
	FSeek(p + 16); Vector3 shadowColor;
	FSeek(p + 32); Vector3 directionalLightOverwrite;
	FSeek(p + 48); float directionalLightIntensityOverwrite;
	FSeek(p + 52); bool overwriteDirectionalLight;
	FSeek(p + 53); bool renderWireframe;

	FSeek(p + 64);
} FxEffectParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 4);  float num;
	FSeek(p + 8);  float density;
	FSeek(p + 12); float decay;
	FSeek(p + 16); float threshold;
	FSeek(p + 20); float lumMax;
	FSeek(p + 24); float intensity;
	FSeek(p + 28); bool enableDither;

	FSeek(p + 32);
} FxScreenSpaceGodrayParameter;

typedef struct { float data[12]; int padding[4]<hidden=true>; } Matrix3x4;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 16); Matrix3x4 box;
	FSeek(p + 80); Vector3 color;
	FSeek(p + 96); float num;

	FSeek(p + 112);
} FxGodrayParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  bool enable;
	FSeek(p + 4);  float speed;
	FSeek(p + 8);  float scale;
	FSeek(p + 12); float cycle;
	FSeek(p + 16); float nearDepth;
	FSeek(p + 20); float farDepth;
	FSeek(p + 24); float maxHeight;
	FSeek(p + 28); float parallaxCorrectFactor;

	FSeek(p + 32);
} FxHeatHazeParameter;

typedef struct { float x; float y; float z; float w; } Vector4;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  float wind_rotation_y;
	FSeek(p + 4);  float wind_strength;
	FSeek(p + 8);  float wind_noise;
	FSeek(p + 12); float wind_amplitude;
	FSeek(p + 16); float wind_frequencies[4]<optimize=false>;
	FSeek(p + 32); Vector4 grass_lod_distance;
	FSeek(p + 48); bool enable_tread_grass;
	FSeek(p + 49); bool enableHighLight;
	FSeek(p + 52); float highLightThreshold;
	FSeek(p + 56); float highLightObjectAmbientScale;
	FSeek(p + 60); float highLightObjectAlbedoHeighten;
	FSeek(p + 64); float highLightCharaAmbientScale;
	FSeek(p + 68); float highLightCharaAlbedoHeighten;
	FSeek(p + 72); float highLightCharaFalloffScale;

	FSeek(p + 80);
} FxSceneEnvironmentParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); float blendRatio;
	FSeek(p + 4); float sharpnessPower;

	FSeek(p + 8);
} FxTAAParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);    FxHDROption hdrOption;
	FSeek(p + 4);    FxRenderOption renderOption;
	FSeek(p + 248);  FxSGGIParameter sggi;
	FSeek(p + 256);  FxRLRParameter rlr;
	FSeek(p + 292);  FxBloomParameter bloom;
	FSeek(p + 336);  ToneMapType tonemapType;
	FSeek(p + 337);  ExposureMode exposureMode;
	FSeek(p + 340);  FxToneMapParameter tonemap;
	FSeek(p + 356);  FxExposureParameter exposure;
	FSeek(p + 360);  FxColorContrastParameter colorContrast;
	FSeek(p + 432);  FxLightScatteringParameter lightscattering;
	FSeek(p + 496);  FxDOFParameter dof;
	FSeek(p + 560);  FxShadowMapParameter shadowmap;
	FSeek(p + 800);  FxSSAOParameter ssao;
	FSeek(p + 848);  FxLightFieldParameter lightfield;
	FSeek(p + 992);  FxSHLightFieldParameter shlightfield;
	FSeek(p + 1008); FxScreenBlurParameter blur;
	FSeek(p + 1056); FxOcclusionCapsuleParameter occlusionCapsule;
	FSeek(p + 1200); FxEffectParameter effect;
	FSeek(p + 1264); FxScreenSpaceGodrayParameter ssGodray;
	FSeek(p + 1296); FxGodrayParameter godray;
	FSeek(p + 1408); FxHeatHazeParameter heatHaze;
	FSeek(p + 1440); FxSceneEnvironmentParameter sceneEnv;
	FSeek(p + 1520); FxTAAParameter taa;

	FSeek(p + 1536);
} NeedleFxParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); float deadline;

	FSeek(p + 4);
} StageCommonParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); float zNear;
	FSeek(p + 4); float zFar;
	FSeek(p + 8); float fovy;

	FSeek(p + 12);
} StageCameraParameter;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); StageCommonParameter common;
	FSeek(p + 4); StageCameraParameter camera;

	FSeek(p + 16);
} StageConfig;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);     NeedleFxSceneConfig config;
	FSeek(p + 32);    NeedleFxParameter items[16]<optimize=false>;
	FSeek(p + 24608); StageConfig stageConfig;

	FSeek(p + 24624);
} NeedleFxSceneData;

FSeek(0x40);
NeedleFxSceneData data;