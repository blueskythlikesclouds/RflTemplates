//----------------------------------------//
// This file was auto-generated by Skyth. //
//----------------------------------------//

typedef struct {
	uint64 offset<hidden=true>;
	uint64 padding<hidden=true>;
} StringPtr<read=StringRead>;

string StringRead(StringPtr &ptr) {
	if (ptr.offset > 0) {
		return ReadString(ptr.offset + 0x40);
	}
	return "";
}

enum<byte> RankType {
	RANK_S     = 0,
	RANK_A     = 1,
	RANK_B     = 2,
	RANK_C     = 3,
	RANK_NONE  = 4,
	RANK_DEBUG = 5,
	NUM_RANKS  = 6,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  StringPtr stagecode;
	FSeek(p + 16); int totalPlays;
	FSeek(p + 20); int totalClears;
	FSeek(p + 24); int totalMisses;
	FSeek(p + 28); int totalWBoost;
	FSeek(p + 32); int totalWBoostSuccess;
	FSeek(p + 36); RankType highRank;
	FSeek(p + 40); int highTime;
	FSeek(p + 44); int highScore;

	FSeek(p + 48);
} StageStats;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0); StageStats stageStats;

	FSeek(p + 32);
} StageStatsAll;

enum<byte> GadgetType {
	GADGET_NONE      = -1,
	GADGET_ASTEROID  = 0,
	GADGET_LIGHTNING = 1,
	GADGET_CUBE      = 2,
	GADGET_DRILL     = 3,
	GADGET_BURST     = 4,
	GADGET_VOID      = 5,
	GADGET_HOVER     = 6,
	NUM_GADGETS      = 7,
};

enum<byte> GadgetSkillType {
	SKILL_NONE         = 0,
	ACCELE_GRIND       = 1,
	ACCELE_RING        = 2,
	REDUCE_DAMAGE      = 3,
	RESTORE_RING       = 4,
	HIGH_GRIP          = 5,
	TAKE_BARRIER       = 6,
	DROP_RING          = 7,
	RING_INVINCIBLE    = 8,
	RING_BONUS         = 9,
	INLET_RING         = 10,
	POWER_RESTART      = 11,
	LANDING_DASH       = 12,
	BALANCE            = 13,
	CANCEL_DASH        = 14,
	SKIMMER            = 15,
	RING_UP            = 16,
	HA_TURBO           = 17,
	BRAKE_GUARD        = 18,
	HOMING_BLOW        = 19,
	CHAIN_RING         = 20,
	COMBO_ENEMY        = 21,
	DAMAGED_INVINCIBLE = 22,
	DOUBLE_JUMP        = 23,
	HA_STABILITY       = 24,
	HUNDRED_BONUS      = 25,
	NUM_GADGET_SKILLS  = 26,
};

typedef struct { float x; float y; float z; float w<hidden=true>; } Vector3;

enum<byte> PlayType {
	PLAY_NONE     = 0,
	START         = 1,
	RETRY         = 2,
	RESTART       = 3,
	PASS_MARKER   = 4,
	DEAD          = 5,
	CLEAR         = 6,
	DEBUG         = 7,
	PAUSE_RESTART = 8,
	PAUSE_GIVEUP  = 9,
};

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  StringPtr user;
	FSeek(p + 16); StringPtr stagecode;
	FSeek(p + 32); PlayType play;
	FSeek(p + 40); StringPtr option;
	FSeek(p + 64); Vector3 position;
	FSeek(p + 80); int time;

	FSeek(p + 96);
} PlayLog;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);   StringPtr user;
	FSeek(p + 16);  StringPtr stagecode;
	FSeek(p + 32);  GadgetType gadgetType;
	FSeek(p + 33);  GadgetSkillType skill0;
	FSeek(p + 34);  GadgetSkillType skill1;
	FSeek(p + 35);  GadgetSkillType skill2;
	FSeek(p + 36);  RankType rank;
	FSeek(p + 40);  int time;
	FSeek(p + 44);  int score;
	FSeek(p + 48);  int getRings;
	FSeek(p + 52);  int takeRings;
	FSeek(p + 56);  int enemies;
	FSeek(p + 60);  int damages;
	FSeek(p + 64);  int misses;
	FSeek(p + 68);  int retry;
	FSeek(p + 72);  int restart;
	FSeek(p + 76);  int passMarkers;
	FSeek(p + 80);  int jump;
	FSeek(p + 84);  int jumpDouble;
	FSeek(p + 88);  int homing;
	FSeek(p + 92);  int boost;
	FSeek(p + 96);  int quickstep;
	FSeek(p + 100); int grindstep;
	FSeek(p + 104); int stomping;
	FSeek(p + 108); int sliding;
	FSeek(p + 112); int gadget;
	FSeek(p + 116); int gadgetSpOn;
	FSeek(p + 120); int gadgetSp;
	FSeek(p + 124); int gadgetSpY;
	FSeek(p + 128); int gadgetSpAuto;
	FSeek(p + 132); int wboost;
	FSeek(p + 136); int wboostSuccess;
	FSeek(p + 144); PlayLog logs;

	FSeek(p + 176);
} StagePlayData;

typedef struct {
	local uint64 p<hidden=true> = FTell();

	FSeek(p + 0);  StageStatsAll stageStatsAll;
	FSeek(p + 32); StagePlayData stagePlays;

	FSeek(p + 64);
} PlayStats;

FSeek(0x40);
PlayStats data;