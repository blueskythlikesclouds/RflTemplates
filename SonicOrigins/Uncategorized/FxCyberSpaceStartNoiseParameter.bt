local uint64 BASE_OFFSET_VALUE<hidden=true>;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float blockLNoiseSizeX<comment="低周波ブロックノイズサイズX">;
    FSeek(p + 4);  float blockLNoiseSizeY<comment="低周波ブロックノイズサイズY">;
    FSeek(p + 8);  float blockHNoiseSizeX<comment="高周波ブロックノイズサイズX">;
    FSeek(p + 12); float blockHNoiseSizeY<comment="高周波ブロックノイズサイズY">;
    FSeek(p + 16); float bNoiseHighRate<comment="高周波の出やすさ">;
    FSeek(p + 20); float intensity<comment="UVシフトの強さ">;
    FSeek(p + 24); float pixelShiftIntensity<comment="ピクセル単位のUVシフトの強さ">;

    FSeek(p + 28);
} UVShift;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float blockLNoiseSize<comment="低周波ブロックノイズサイズ">;
    FSeek(p + 4);  float blockHNoiseSize<comment="高周波ブロックノイズサイズ">;
    FSeek(p + 8);  float bNoiseHighRate<comment="高周波の出やすさ">;
    FSeek(p + 12); float intensity<comment="カラーシフトの強さ">;

    FSeek(p + 16);
} ColorShift;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float blockLNoiseSize<comment="低周波ブロックノイズサイズ">;
    FSeek(p + 4);  float blockHNoiseSize<comment="高周波ブロックノイズサイズ">;
    FSeek(p + 8);  float bNoiseHighRate<comment="高周波の出やすさ">;
    FSeek(p + 12); float intensity<comment="インターレース出現率">;
    FSeek(p + 16); float dropout<comment="インターレース線の途切れやすさ">;

    FSeek(p + 20);
} InterlaceNoise;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float blockLNoiseSizeX<comment="低周波ブロックノイズサイズX">;
    FSeek(p + 4);  float blockLNoiseSizeY<comment="低周波ブロックノイズサイズY">;
    FSeek(p + 8);  float blockHNoiseSizeX<comment="高周波ブロックノイズサイズX">;
    FSeek(p + 12); float blockHNoiseSizeY<comment="高周波ブロックノイズサイズY">;
    FSeek(p + 16); float bNoiseHighRate<comment="高周波の出やすさ">;
    FSeek(p + 20); float intensity<comment="色減算の強さ">;

    FSeek(p + 24);
} ColorDropout;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float blockLNoiseSizeX<comment="低周波ブロックノイズサイズX">;
    FSeek(p + 4);  float blockLNoiseSizeY<comment="低周波ブロックノイズサイズY">;
    FSeek(p + 8);  float blockHNoiseSizeX<comment="高周波ブロックノイズサイズX">;
    FSeek(p + 12); float blockHNoiseSizeY<comment="高周波ブロックノイズサイズY">;
    FSeek(p + 16); float bNoiseHighRate<comment="高周波の出やすさ">;
    FSeek(p + 20); float intensity<comment="色が反転する確率">;
    FSeek(p + 24); float invertAllRate<comment="画面全体で色が反転する確率">;

    FSeek(p + 28);
} InvertColor;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float blockLNoiseSizeX<comment="低周波ブロックノイズサイズX">;
    FSeek(p + 4);  float blockLNoiseSizeY<comment="低周波ブロックノイズサイズY">;
    FSeek(p + 8);  float blockHNoiseSizeX<comment="高周波ブロックノイズサイズX">;
    FSeek(p + 12); float blockHNoiseSizeY<comment="高周波ブロックノイズサイズY">;
    FSeek(p + 16); float bNoiseHighRate<comment="高周波の出やすさ">;
    FSeek(p + 20); float intensity<comment="ブロックレベルでモノクロになる確率">;
    FSeek(p + 24); float invertAllRate<comment="画面全体でモノクロ化する確率">;

    FSeek(p + 28);
} GlayScaleColor;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enable<comment="有効">;
    FSeek(p + 4);   UVShift uvShift<comment="UVシフト">;
    FSeek(p + 32);  ColorShift colorShift<comment="RGBずれ">;
    FSeek(p + 48);  InterlaceNoise interlaceNoise<comment="インターレースノイズ">;
    FSeek(p + 68);  ColorDropout colorDrop<comment="色落ち">;
    FSeek(p + 92);  InvertColor invertColor<comment="色反転">;
    FSeek(p + 120); GlayScaleColor glayscaleColor<comment="モノクロ化">;
    FSeek(p + 148); float noiseSpeed<comment="ノイズの更新速度">;
    FSeek(p + 152); float noiseBias<comment="出現量バイアス">;
    FSeek(p + 156); float noiseWaveAmplitude<comment="出現量の変化の振れ幅">;
    FSeek(p + 160); float noiseWaveCycle<comment="出現量変化の周期">;

    FSeek(p + 164);
} FxCyberSpaceStartNoiseParameter;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
FxCyberSpaceStartNoiseParameter fxCyberSpaceStartNoiseParameter;
