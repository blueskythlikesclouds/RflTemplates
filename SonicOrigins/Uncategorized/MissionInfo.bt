local uint64 BASE_OFFSET_VALUE<hidden=true>;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef byte sint8;

enum<sint8> TitleKind
{
    TITLEKIND_SONIC1 = 0,
    TITLEKIND_SONIC2 = 1,
    TITLEKIND_SONIC3K = 2,
    TITLEKIND_SONICCD = 3,
    TITLEKIND_NUM = 4,
    TITLEKIND_HITE = 4,
    TITLEKIND_NUM_ADDHITE = 5
};

typedef int32 sint32;

enum<sint32> FinishType
{
    NONE = 0,
    GOAL = 1,
    TIME_LIMIT = 2
};

enum<sint32> Type
{
    NOP = 0,
    RING_COUNT = 1,
    OBJECT_COUNT = 2,
    DAMAGE_COUNT = 3,
    SCORE_COUNT = 4,
    ANIMAL_BOX_COUNT = 5,
    TIME_WARP_COUNT = 6,
    PAST_COUNT = 7,
    FUTURE_COUNT = 8
};

enum<sint32> OpCode
{
    OpCode_NONE = 0,
    EQUAL = 1,
    GREATER_EQUAL = 2
};

enum<sint8> EnemyType
{
    ENEMYTYPE_NONE = -1,
    ENEMYTYPE_NAR = 0,
    ENEMYTYPE_MELEON = 1,
    ENEMYTYPE_MOTRA = 2,
    ENEMYTYPE_GANIGANI_AND_BASARAN = 3,
    ENEMYTYPE_STINGER = 4,
    ENEMYTYPE_ANIMALBOX = 5,
    ENEMYTYPE_OCTOR = 6,
    ENEMYTYPE_CYCLONE = 7,
    ENEMYTYPE_HALOGEN = 8,
    ENEMYTYPE_ANIMALCAPSULE = 9,
    ENEMYTYPE_CHULIPPON_AND_CYCLONE = 10,
    ENEMYTYPE_TEFTEF = 11,
    ENEMYTYPE_KECKO = 12,
    ENEMYTYPE_BALLOON = 13,
    ENEMYTYPE_TAGATAGA = 14,
    ENEMYTYPE_KAMAKAMA = 15,
    ENEMYTYPE_SWAP = 16,
    ENEMYTYPE_FUTURE = 17,
    ENEMYTYPE_PAST = 18,
    ENEMYTYPE_BEETON = 19,
    ENEMYTYPE_BASARAN_AND_NAR = 20,
    ENEMYTYPE_KEROPPO = 21,
    ENEMYTYPE_MEBE = 22,
    ENEMYTYPE_NUM = 23
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Type m_type<comment="Type:タイプ">;
    FSeek(p + 4);  sint32 m_value<comment="m_value">;
    FSeek(p + 8);  OpCode m_opCode<comment="m_opCode">;
    FSeek(p + 12); sint32 m_objectEntityIndex<comment="オブジェクト番号">;
    FSeek(p + 16); EnemyType m_hintEnemyType<comment="ヒント表示するエネミー種類">;
    FSeek(p + 17); bool m_isAlways<comment="常に条件を満たすか[満たさないと失敗]">;

    FSeek(p + 20);
} MissionCondition;

enum<sint8> LevelType
{
    LEVELTYPE_NONE = 0,
    LEVELTYPE_1 = 1,
    LEVELTYPE_2 = 2,
    LEVELTYPE_3 = 3,
    LEVELTYPE_4 = 4,
    LEVELTYPE_5 = 5,
    LEVELTYPE_NUM = 6
};

enum<sint8> StageKind
{
    STAGEKIND_NONE = 0,
    STAGEKIND_SONIC1_START = 1,
    STAGEKIND_GREEN_HILL_ZONE_ACT_1 = 1,
    STAGEKIND_GREEN_HILL_ZONE_ACT_2 = 2,
    STAGEKIND_GREEN_HILL_ZONE_ACT_3 = 3,
    STAGEKIND_MARBLE_ZONE_ACT_1 = 4,
    STAGEKIND_MARBLE_ZONE_ACT_2 = 5,
    STAGEKIND_MARBLE_ZONE_ACT_3 = 6,
    STAGEKIND_SPRING_YARD_ZONE_ACT_1 = 7,
    STAGEKIND_SPRING_YARD_ZONE_ACT_2 = 8,
    STAGEKIND_SPRING_YARD_ZONE_ACT_3 = 9,
    STAGEKIND_LABYRINTH_ZONE_ACT_1 = 10,
    STAGEKIND_LABYRINTH_ZONE_ACT_2 = 11,
    STAGEKIND_LABYRINTH_ZONE_ACT_3 = 12,
    STAGEKIND_STAR_LIGHT_ZONE_ACT_1 = 13,
    STAGEKIND_STAR_LIGHT_ZONE_ACT_2 = 14,
    STAGEKIND_STAR_LIGHT_ZONE_ACT_3 = 15,
    STAGEKIND_SCRAP_BRAIN_ZONE_ACT_1 = 16,
    STAGEKIND_SCRAP_BRAIN_ZONE_ACT_2 = 17,
    STAGEKIND_SCRAP_BRAIN_ZONE_ACT_3 = 18,
    STAGEKIND_FINAL_ZONE = 19,
    STAGEKIND_SONIC1_SPECIAL_STAGE_1 = 20,
    STAGEKIND_SONIC1_SPECIAL_STAGE_2 = 21,
    STAGEKIND_SONIC1_SPECIAL_STAGE_3 = 22,
    STAGEKIND_SONIC1_SPECIAL_STAGE_4 = 23,
    STAGEKIND_SONIC1_SPECIAL_STAGE_5 = 24,
    STAGEKIND_SONIC1_SPECIAL_STAGE_6 = 25,
    STAGEKIND_SONIC1_ALL_STAGE = 26,
    STAGEKIND_SONIC1_END = 27,
    STAGEKIND_SONIC2_START = 27,
    STAGEKIND_EMERALD_HILL_ZONE_ACT_1 = 27,
    STAGEKIND_EMERALD_HILL_ZONE_ACT_2 = 28,
    STAGEKIND_CHEMICAL_PLANT_ZONE_ACT_1 = 29,
    STAGEKIND_CHEMICAL_PLANT_ZONE_ACT_2 = 30,
    STAGEKIND_AQUATIC_RUIN_ZONE_ACT_1 = 31,
    STAGEKIND_AQUATIC_RUIN_ZONE_ACT_2 = 32,
    STAGEKIND_CASINO_NIGHT_ZONE_ACT_1 = 33,
    STAGEKIND_CASINO_NIGHT_ZONE_ACT_2 = 34,
    STAGEKIND_HILL_TOP_ZONE_ACT_1 = 35,
    STAGEKIND_HILL_TOP_ZONE_ACT_2 = 36,
    STAGEKIND_MYSTIC_CAVE_ZONE_ACT_1 = 37,
    STAGEKIND_MYSTIC_CAVE_ZONE_ACT_2 = 38,
    STAGEKIND_OIL_OCEAN_ZONE_ACT_1 = 39,
    STAGEKIND_OIL_OCEAN_ZONE_ACT_2 = 40,
    STAGEKIND_METROPOLIS_ZONE_ACT_1 = 41,
    STAGEKIND_METROPOLIS_ZONE_ACT_2 = 42,
    STAGEKIND_METROPOLIS_ZONE_ACT_3 = 43,
    STAGEKIND_SKY_CHASE_ZONE = 44,
    STAGEKIND_WING_FORTRESS_ZONE = 45,
    STAGEKIND_DEATH_EGG_ZONE = 46,
    STAGEKIND_SONIC2_SPECIAL_STAGE_1 = 47,
    STAGEKIND_SONIC2_SPECIAL_STAGE_2 = 48,
    STAGEKIND_SONIC2_SPECIAL_STAGE_3 = 49,
    STAGEKIND_SONIC2_SPECIAL_STAGE_4 = 50,
    STAGEKIND_SONIC2_SPECIAL_STAGE_5 = 51,
    STAGEKIND_SONIC2_SPECIAL_STAGE_6 = 52,
    STAGEKIND_SONIC2_SPECIAL_STAGE_7 = 53,
    STAGEKIND_SONIC2_ALL_STAGE = 54,
    STAGEKIND_SONIC2_END = 55,
    STAGEKIND_SONIC3K_START = 55,
    STAGEKIND_ANGEL_ISLAND_ZONE_ACT_1 = 55,
    STAGEKIND_ANGEL_ISLAND_ZONE_ACT_2 = 56,
    STAGEKIND_HYDROCITY_ZONE_ACT_1 = 57,
    STAGEKIND_HYDROCITY_ZONE_ACT_2 = 58,
    STAGEKIND_MARBLE_GARDEN_ZONE_ACT_1 = 59,
    STAGEKIND_MARBLE_GARDEN_ZONE_ACT_2 = 60,
    STAGEKIND_CARNIVAL_NIGHT_ZONE_ACT_1 = 61,
    STAGEKIND_CARNIVAL_NIGHT_ZONE_ACT_2 = 62,
    STAGEKIND_ICE_CAP_ZONE_ACT_1 = 63,
    STAGEKIND_ICE_CAP_ZONE_ACT_2 = 64,
    STAGEKIND_LAUNCH_BASE_ZONE_ACT_1 = 65,
    STAGEKIND_LAUNCH_BASE_ZONE_ACT_2 = 66,
    STAGEKIND_MUSHROOM_HILL_ZONE_ACT_1 = 67,
    STAGEKIND_MUSHROOM_HILL_ZONE_ACT_2 = 68,
    STAGEKIND_FLYING_BATTERY_ZONE_ACT_1 = 69,
    STAGEKIND_FLYING_BATTERY_ZONE_ACT_2 = 70,
    STAGEKIND_SANDOPOLIS_ZONE_ACT_1 = 71,
    STAGEKIND_SANDOPOLIS_ZONE_ACT_2 = 72,
    STAGEKIND_LAVA_REEF_ZONE_ACT_1 = 73,
    STAGEKIND_LAVA_REEF_ZONE_ACT_2 = 74,
    STAGEKIND_HIDDEN_PALACE_ZONE = 75,
    STAGEKIND_SKY_SANCTUARY_ZONE_ACT_1 = 76,
    STAGEKIND_SKY_SANCTUARY_ZONE_ACT_2 = 77,
    STAGEKIND_DEATH_EGG_ZONE_ACT_1 = 78,
    STAGEKIND_DEATH_EGG_ZONE_ACT_2 = 79,
    STAGEKIND_THE_DOOMSDAY_ZONE = 80,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_1 = 81,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_2 = 82,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_3 = 83,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_4 = 84,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_5 = 85,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_6 = 86,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_7 = 87,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_8 = 88,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_9 = 89,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_10 = 90,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_11 = 91,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_12 = 92,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_13 = 93,
    STAGEKIND_SONIC3K_SPECIAL_STAGE_14 = 94,
    STAGEKIND_SONIC3K_ALL_STAGE = 95,
    STAGEKIND_SONIC3K_END = 96,
    STAGEKIND_SONICCD_START = 96,
    STAGEKIND_PALMTREE_PANIC_ZONE1 = 96,
    STAGEKIND_PALMTREE_PANIC_ZONE2 = 97,
    STAGEKIND_PALMTREE_PANIC_ZONE3 = 98,
    STAGEKIND_COLLISION_CHAOS_ZONE1 = 99,
    STAGEKIND_COLLISION_CHAOS_ZONE2 = 100,
    STAGEKIND_COLLISION_CHAOS_ZONE3 = 101,
    STAGEKIND_TIDAL_TEMPEST_ZONE1 = 102,
    STAGEKIND_TIDAL_TEMPEST_ZONE2 = 103,
    STAGEKIND_TIDAL_TEMPEST_ZONE3 = 104,
    STAGEKIND_QUARTZ_QUADRANT_ZONE1 = 105,
    STAGEKIND_QUARTZ_QUADRANT_ZONE2 = 106,
    STAGEKIND_QUARTZ_QUADRANT_ZONE3 = 107,
    STAGEKIND_WACKY_WORKBENCH_ZONE1 = 108,
    STAGEKIND_WACKY_WORKBENCH_ZONE2 = 109,
    STAGEKIND_WACKY_WORKBENCH_ZONE3 = 110,
    STAGEKIND_STARDUST_SPEEDWAY_ZONE1 = 111,
    STAGEKIND_STARDUST_SPEEDWAY_ZONE2 = 112,
    STAGEKIND_STARDUST_SPEEDWAY_ZONE3 = 113,
    STAGEKIND_METALLIC_MADNESS_ZONE1 = 114,
    STAGEKIND_METALLIC_MADNESS_ZONE2 = 115,
    STAGEKIND_METALLIC_MADNESS_ZONE3 = 116,
    STAGEKIND_SONICCD_SPECIAL_STAGE_1 = 117,
    STAGEKIND_SONICCD_SPECIAL_STAGE_2 = 118,
    STAGEKIND_SONICCD_SPECIAL_STAGE_3 = 119,
    STAGEKIND_SONICCD_SPECIAL_STAGE_4 = 120,
    STAGEKIND_SONICCD_SPECIAL_STAGE_5 = 121,
    STAGEKIND_SONICCD_SPECIAL_STAGE_6 = 122,
    STAGEKIND_SONICCD_SPECIAL_STAGE_7 = 123,
    STAGEKIND_SONICCD_ALL_STAGE = 124,
    STAGEKIND_SONICCD_END = 125,
    STAGEKIND_NUM = 125,
    STAGEKIND_SONIC1_NUM = 26,
    STAGEKIND_SONIC2_NUM = 28,
    STAGEKIND_SONIC3K_NUM = 41,
    STAGEKIND_SONICCD_NUM = 29,
    STAGEKIND_ALL_START = 1,
    STAGEKIND_ALL_END = 125,
    STAGEKIND_STORY_END = 80
};

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

enum<sint8> PlayerType
{
    SONIC = 0,
    TAILS = 1,
    KNUCKLES = 2
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool m_enableMission<comment="有効ミッションか">;
    FSeek(p + 1);   TitleKind m_title<comment="起動タイトル">;
    FSeek(p + 4);   sint32 m_stageListPos<comment="RSDK Editorでのステージ番号">;
    FSeek(p + 8);   FinishType m_finishType<comment="終了条件">;
    FSeek(p + 12);  sint32 m_timeLimitSec<comment="制限時間[秒]">;
    FSeek(p + 16);  MissionCondition m_conditions[3]<comment="クリア条件",optimize=false>;
    FSeek(p + 76);  uint32 m_rankTimes[4]<comment="ランク判定条件[TIME]",optimize=false>;
    FSeek(p + 92);  sint32 m_rankRings[4]<comment="ランク判定条件[RING]",optimize=false>;
    FSeek(p + 108); LevelType m_levelType<comment="LevelType:難易度">;
    FSeek(p + 109); StageKind m_dispStageKind<comment="表示するステージ">;
    FSeek(p + 112); cstring m_debugDescription<comment="Debug用記述">;
    FSeek(p + 128); bool m_enableTails<comment="テイルスを追加する">;
    FSeek(p + 129); bool m_isMirroring<comment="ミラーリングする">;
    FSeek(p + 130); PlayerType m_playerType<comment="プレイヤーキャラ">;
    FSeek(p + 131); bool m_enableAttackChain<comment="10秒ごとに敵を倒す">;

    FSeek(p + 136);
} MissionData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); sint32 m_coinCounts[4]<comment="もらえるコインの数",optimize=false>;

    FSeek(p + 16);
} MissionReward;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  MissionReward m_rewards[6]<comment="ミッション報酬",optimize=false>;
    FSeek(p + 96); sint32 m_firstClearBonus<comment="初回クリアボーナス">;

    FSeek(p + 100);
} MissionRewardData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);     MissionData m_missionData[112]<comment="ミッションデータ",optimize=false>;
    FSeek(p + 15232); MissionRewardData m_missionRewardData<comment="ミッション報酬データ">;

    FSeek(p + 15336);
} MissionInfo;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
MissionInfo missionInfo;
