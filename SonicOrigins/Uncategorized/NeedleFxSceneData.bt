local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef int32 sint32;

enum<sint32> DOFRenderTargetSize
{
    DOF_RTSIZE_FULL_SCALE = 0,
    DOF_RTSIZE_HALF_SCALE = 1,
    DOF_RTSIZE_QUARTER_SCALE = 2,
    DOF_RTSIZE_COUNT = 3,
    DOF_RTSIZE_INVALID = 3
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); DOFRenderTargetSize dofRenderTargetScale<comment="DOF解像度スケール">;
    FSeek(p + 4); sint32 shadowMapWidth<comment="シャドウマップの幅">;
    FSeek(p + 8); sint32 shadowMapHeight<comment="シャドウマップの高さ">;

    FSeek(p + 12);
} FxRenderTargetSetting;

typedef byte sint8;

enum<sint8> AntiAliasingType
{
    AATYPE_NONE = 0,
    AATYPE_TAA = 1,
    AATYPE_FXAA = 2,
    AATYPE_SMAA = 3,
    AATYPE_LAST = 4
};

enum<sint8> UpscaleType
{
    USTYPE_LINEAR = 0,
    USTYPE_FSR = 1,
    USTYPE_FSR_FAST = 2,
    USTYPE_FSR_EASU = 3,
    USTYPE_FSR_RCAS = 4
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); AntiAliasingType aaType<comment="アンチエイリアスタイプ">;
    FSeek(p + 1); UpscaleType usType<comment="アップスケールタイプ">;

    FSeek(p + 2);
} FxAntiAliasing;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float illuminanceScale<comment="輝度スケール">;

    FSeek(p + 4);
} StageCommonAtmosphereParameter;

enum<byte> bool {
    False = 0,
    True = 1,
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool enableDebugDrawLayerRange<comment="デバッグ表示">;
    FSeek(p + 4); float layerRange[32]<comment="レイヤー範囲[m]",optimize=false>;

    FSeek(p + 132);
} FxLODParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float detailDistance<comment="Detailmapが消える距離[m]">;
    FSeek(p + 4); float detailFadeRange<comment="切り替え時のぼかしの強さ">;

    FSeek(p + 8);
} FxDetailParameter;

enum<sint8> Mode
{
    DISABLE = 0,
    ENABLE = 1,
    FIXED_RESOLUTION = 2
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Mode mode<comment="動的解像度モード">;
    FSeek(p + 4);  float fixedResolutionRatio<comment="解像度：固定解像度モードのみ有効">;
    FSeek(p + 8);  float minResolutionRatio<comment="最小解像度比">;
    FSeek(p + 12); float minTargetTimeDifference<comment="拡大用の目標時間との差">;
    FSeek(p + 16); float maxTargetTimeDifference<comment="縮小用の目標時間との差">;
    FSeek(p + 20); float increaseRate<comment="解像度の拡大率">;
    FSeek(p + 24); float decreaseRate<comment="解像度の縮小率">;
    FSeek(p + 28); float increaseMaxScaleDelta<comment="解像度の拡大最大変化率">;
    FSeek(p + 32); float decreaseMaxScaleDelta<comment="解像度の縮小最大変化率">;
    FSeek(p + 36); bool debugSineFluctuation<comment="チェック用:強制的に時間経過に応じて解像度変化させる">;

    FSeek(p + 40);
} FxDynamicResolutionParameter;

typedef ubyte uint8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); uint8 hour<comment="時">;
    FSeek(p + 1); uint8 minute<comment="分">;

    FSeek(p + 2);
} HourMinuteData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); HourMinuteData beginTime<comment="開始時刻">;
    FSeek(p + 2); HourMinuteData endTime<comment="終了時刻">;

    FSeek(p + 4);
} TimeIntervalData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); TimeIntervalData timeIntervalData;
    FSeek(p + 4); float hourlyTime<comment="1時間あたりの秒数">;

    FSeek(p + 8);
} ProgressTimePairData;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enable<comment="有効">;
    FSeek(p + 4);   float solarRadiusScale<comment="太陽の大きさ">;
    FSeek(p + 8);   float azimuthAngle<comment="方位角補正">;
    FSeek(p + 12);  float latitude<comment="緯度">;
    FSeek(p + 16);  float longitude<comment="経度">;
    FSeek(p + 20);  sint32 month<comment="月">;
    FSeek(p + 24);  sint32 day<comment="日">;
    FSeek(p + 28);  float time<comment="時">;
    FSeek(p + 32);  float hourlyTime<comment="基本時刻進行速度/1時間あたりの秒数">;
    FSeek(p + 36);  ProgressTimePairData overrideSpeeds[8]<comment="上書き時刻進行速度",optimize=false>;
    FSeek(p + 100); TimeIntervalData night<comment="夜時間区間">;

    FSeek(p + 104);
} StageCommonTimeProgressParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool enableDrawGrid<comment="地形グリッド描画">;

    FSeek(p + 1);
} FxTerrainParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool zprepass<comment="ZPrePass Enable">;

    FSeek(p + 1);
} FxModelParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   FxRenderTargetSetting rendertarget<comment="RenderTargetの大きさ">;
    FSeek(p + 12);  FxAntiAliasing antialiasing<comment="アンチエイリアス">;
    FSeek(p + 16);  StageCommonAtmosphereParameter atmosphere<comment="大気光学設定">;
    FSeek(p + 20);  FxLODParameter lod<comment="LOD設定">;
    FSeek(p + 152); FxDetailParameter detail<comment="DetailMap設定">;
    FSeek(p + 160); FxDynamicResolutionParameter dynamicResolution<comment="動的解像度設定">;
    FSeek(p + 200); StageCommonTimeProgressParameter timeProgress<comment="時制変化設定">;
    FSeek(p + 304); FxTerrainParameter terrain<comment="ハイトマップ地形設定">;
    FSeek(p + 305); FxModelParameter modelParam<comment="モデル設定">;

    FSeek(p + 308);
} NeedleFxSceneConfig;

enum<sint8> DebugViewType
{
    DEBUG_VIEW_DEFAULT = 0,
    DEBUG_VIEW_DIR_DIFFUSE = 1,
    DEBUG_VIEW_DIR_SPECULAR = 2,
    DEBUG_VIEW_AMB_DIFFUSE = 3,
    DEBUG_VIEW_AMB_SPECULAR = 4,
    DEBUG_VIEW_ONLY_IBL = 5,
    DEBUG_VIEW_ONLY_IBL_SURF_NORMAL = 6,
    DEBUG_VIEW_SHADOW = 7,
    DEBUG_VIEW_WHITE_ALBEDO = 8,
    DEBUG_VIEW_WHITE_ALBEDO_NO_AO = 9,
    DEBUG_VIEW_USER0 = 10,
    DEBUG_VIEW_USER1 = 11,
    DEBUG_VIEW_USER2 = 12,
    DEBUG_VIEW_USER3 = 13,
    DEBUG_VIEW_ALBEDO = 14,
    DEBUG_VIEW_ALBEDO_CHECK_OUTLIER = 15,
    DEBUG_VIEW_OPACITY = 16,
    DEBUG_VIEW_NORMAL = 17,
    DEBUG_VIEW_ROUGHNESS = 18,
    DEBUG_VIEW_AMBIENT = 19,
    DEBUG_VIEW_CAVITY = 20,
    DEBUG_VIEW_REFLECTANCE = 21,
    DEBUG_VIEW_METALLIC = 22,
    DEBUG_VIEW_LOCAL_LIGHT = 23,
    DEBUG_VIEW_SCATTERING_FEX = 24,
    DEBUG_VIEW_SCATTERING_LIN = 25,
    DEBUG_VIEW_SSAO = 26,
    DEBUG_VIEW_RLR = 27,
    DEBUG_VIEW_IBL_DIFFUSE = 28,
    DEBUG_VIEW_IBL_SPECULAR = 29,
    DEBUG_VIEW_ENV_BRDF = 30,
    DEBUG_VIEW_WORLD_POSITION = 31,
    DEBUG_VIEW_SHADING_MODEL_ID = 32,
    DEBUG_VIEW_IBL_CAPTURE = 33,
    DEBUG_VIEW_IBL_SKY_TERRAIN = 34,
    DEBUG_VIEW_WRITE_DEPTH_TO_ALPHA = 35,
    DEBUG_VIEW_SMOOTHNESS = 36,
    DEBUG_VIEW_OCCLUSION_CAPSULE = 37,
    DEBUG_VIEW_PROBE = 38,
    DEBUG_VIEW_COUNT = 39,
    DEBUG_VIEW_INVALID = 39
};

enum<sint8> LocalLightCullingType
{
    LOCAL_LIGHT_CULLING_TYPE_NONE = 0,
    LOCAL_LIGHT_CULLING_TYPE_CPU_TILE = 1,
    LOCAL_LIGHT_CULLING_TYPE_GPU_TILE = 2,
    LOCAL_LIGHT_CULLING_TYPE_GPU_CLUSTER = 3,
    LOCAL_LIGHT_CULLING_TYPE_COUNT = 4,
    LOCAL_LIGHT_CULLING_TYPE_DEFAULT = 0
};

enum<sint8> TextureViewType
{
    TEXTURE_VIEW_NONE = 0,
    TEXTURE_VIEW_DEPTH = 1,
    TEXTURE_VIEW_LUMINANCE = 2,
    TEXTURE_VIEW_DOF_BOKEH = 3,
    TEXTURE_VIEW_DOF_BOKEH_NEAR = 4,
    TEXTURE_VIEW_SSAO_SOURCE = 5,
    TEXTURE_VIEW_DOWNSAMPLE = 6,
    TEXTURE_VIEW_COUNT = 7
};

enum<sint8> AmbientSpecularType
{
    AMBIENT_SPECULAR_NONE = 0,
    AMBIENT_SPECULAR_SG = 1,
    AMBIENT_SPECULAR_IBL = 2,
    AMBIENT_SPECULAR_BLEND = 3
};

enum<sint8> ChannelMode
{
    CHANNELMODE_RGB = 0,
    CHANNELMODE_RRR = 1,
    CHANNELMODE_GGG = 2,
    CHANNELMODE_BBB = 3,
    CHANNELMODE_AAA = 4,
    CHANNELMODE_RG = 5,
    CHANNELMODE_BA = 6
};

enum<sint8> DebugScreenType
{
    DEBUG_SCREEN_GBUFFER0 = 0,
    DEBUG_SCREEN_GBUFFER1 = 1,
    DEBUG_SCREEN_GBUFFER2 = 2,
    DEBUG_SCREEN_GBUFFER3 = 3,
    DEBUG_SCREEN_DEPTHBUFFER = 4,
    DEBUG_SCREEN_CSM0 = 5,
    DEBUG_SCREEN_CSM1 = 6,
    DEBUG_SCREEN_CSM2 = 7,
    DEBUG_SCREEN_CSM3 = 8,
    DEBUG_SCREEN_HDR = 9,
    DEBUG_SCREEN_BLOOM = 10,
    DEBUG_SCREEN_RLR = 11,
    DEBUG_SCREEN_GODRAY = 12,
    DEBUG_SCREEN_SSAO = 13,
    DEBUG_SCREEN_CSM_CACHE0 = 14,
    DEBUG_SCREEN_CSM_CACHE1 = 15,
    DEBUG_SCREEN_CSM_CACHE2 = 16,
    DEBUG_SCREEN_CSM_CACHE3 = 17,
    DEBUG_SCREEN_CSM_CACHE4 = 18,
    DEBUG_SCREEN_CSM_CACHE5 = 19,
    DEBUG_SCREEN_CUSTOM0 = 20,
    DEBUG_SCREEN_CUSTOM1 = 21,
    DEBUG_SCREEN_CUSTOM2 = 22,
    DEBUG_SCREEN_CUSTOM3 = 23
};

enum<sint8> ErrorCheckType
{
    ERROR_CHECK_NONE = 0,
    ERROR_CHECK_NAN = 1,
    ERROR_CHECK_ALBEDO = 2,
    ERROR_CHECK_NORMAL = 3
};

enum<sint8> VisualizeMode
{
    DEFAULT = 0,
    HEATMAP_TYPE0 = 1,
    HEATMAP_TYPE1 = 2,
    HEATMAP_TYPE2 = 3,
    VECTOR2D_TYPE0 = 4,
    VECTOR2D_TYPE1 = 5,
    VECTOR2D_TYPE2 = 6
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="enable">;
    FSeek(p + 1);  bool fullScreen<comment="フルスクリーン">;
    FSeek(p + 2);  ChannelMode channelMode<comment="カラーチャンネルタイプ">;
    FSeek(p + 4);  float min<comment="最小">;
    FSeek(p + 8);  float max<comment="最大">;
    FSeek(p + 12); sint32 renderTargetType<comment="renderTargetType">;
    FSeek(p + 16); sint32 depthTargetType<comment="depthTargetType">;
    FSeek(p + 20); DebugScreenType screenType<comment="スクリーンタイプ">;
    FSeek(p + 21); ErrorCheckType errorCheck<comment="エラーチェック">;
    FSeek(p + 22); VisualizeMode visualizeMode<comment="可視化モード">;

    FSeek(p + 24);
} DebugScreenOption;

enum<sint8> DebugScreenView
{
    DEBUG_SCREEN_VIEW_DEFAULT = 0,
    DEBUG_SCREEN_VIEW_ALL_ENABLE = 1,
    DEBUG_SCREEN_VIEW_ALL_DISABLE = 2
};

typedef struct {
    float x;
    float y;
    float z;
    float w;
} vector4;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="enable">;
    FSeek(p + 16); vector4 value<comment="value">;

    FSeek(p + 32);
} GlobalUserParamOption;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   DebugViewType debugViewType<comment="デバッグ表示">;
    FSeek(p + 1);   bool clearRenderTarget<comment="RenderTargetをクリア">;
    FSeek(p + 2);   bool enableDrawCubeProbe<comment="IBLProbeのBoxを表示する">;
    FSeek(p + 3);   bool enableDirectionalLight<comment="平行光源有効">;
    FSeek(p + 4);   bool enablePointLight<comment="点光源有効">;
    FSeek(p + 5);   bool enableEffectDeformation<comment="歪みエフェクトを使うか">;
    FSeek(p + 6);   bool enableLitePostEffect<comment="軽量ポストエフェクトを使うか">;
    FSeek(p + 7);   LocalLightCullingType localLightCullingType<comment="LocalLightCullingType">;
    FSeek(p + 8);   float localLightScale<comment="LocalLightの輝度スケール">;
    FSeek(p + 12);  float shadowIBLAttenuation<comment="影内IBL減衰度">;
    FSeek(p + 16);  sint32 maxCubeProbe<comment="描画に使うIBLProbeの最大数">;
    FSeek(p + 20);  bool debugEnableDrawLocalLight<comment="[DEBUG] LocalLight表示">;
    FSeek(p + 21);  TextureViewType debugTextureViewType<comment="[DEBUG] バッファ表示">;
    FSeek(p + 22);  bool debugEnableOutputTextureView<comment="[DEBUG] バッファ表示を出力">;
    FSeek(p + 24);  sint32 debugScreenshotResolutionHeight<comment="debugScreenshotResolutionHeight">;
    FSeek(p + 28);  float debugScreenshotDepthNear<comment="[DEBUG]デプス出力時の near">;
    FSeek(p + 32);  float debugScreenshotDepthFar<comment="[DEBUG]デプス出力時の far">;
    FSeek(p + 36);  AmbientSpecularType debugAmbientSpecularType<comment="[DEBUG] 影内スペキュラタイプ">;
    FSeek(p + 37);  bool debugEnableSGGIVer2nd<comment="[DEBUG] SG GITexture V2を使う">;
    FSeek(p + 38);  bool debugEnableAOGI<comment="[DEBUG] AO GITexture テスト">;
    FSeek(p + 40);  DebugScreenOption debugScreen[16]<comment="[DEBUG] DebugScreen",optimize=false>;
    FSeek(p + 424); DebugScreenView debugScreenView<comment="[DEBUG] DebugScreen表示">;
    FSeek(p + 425); bool enableMSAA<comment="enableMSAA">;
    FSeek(p + 426); bool debugEnableDrawFrustumCullFrustum<comment="[FrustumCulling] Frustum表示">;
    FSeek(p + 427); bool debugEnableFixFrustumCullFrustum<comment="[FrustumCulling] Frustum位置固定">;
    FSeek(p + 428); sint32 debugDrawFrustumCullGroupSettingIndex<comment="[FrustumCulling] 表示グループインデックス">;
    FSeek(p + 432); bool debugEnableOcclusionCullingView<comment="[OcclusionCulling] Occluder表示">;
    FSeek(p + 436); sint32 debugOccluderVertThreshold<comment="[OcclusionCulling] Occluderの最大頂点数">;
    FSeek(p + 448); GlobalUserParamOption globalUserParam[4]<comment="[DEBUG]ユーザーパラメータ",optimize=false>;

    FSeek(p + 576);
} FxRenderOption;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float sgStartSmoothness<comment="SGブレンド開始Smoothness">;
    FSeek(p + 4);  float sgEndSmoothness<comment="SGブレンド終了Smoothness">;
    FSeek(p + 8);  float doStartSmoothness<comment="DOブレンド開始Smoothness">;
    FSeek(p + 12); float doEndSmoothness<comment="DOブレンド終了Smoothness">;
    FSeek(p + 16); float doOffset<comment="DOオフセット">;
    FSeek(p + 20); float aoOffset<comment="AOオフセット">;

    FSeek(p + 24);
} FxSGGIParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="Enable">;
    FSeek(p + 1);  bool traceSky<comment="天球をトレース">;
    FSeek(p + 2);  bool useTrans<comment="半透明に適用">;
    FSeek(p + 3);  bool usePenet<comment="貫通">;
    FSeek(p + 4);  bool useQuat<comment="1/4サイズ">;
    FSeek(p + 5);  bool useNormal<comment="Gバッファノーマルを使用する">;
    FSeek(p + 8);  float rayMarchingCount<comment="レイマーチ数">;
    FSeek(p + 12); float planeNormalDist<comment="面法線距離">;
    FSeek(p + 16); float traceThreshold<comment="トレース閾値">;
    FSeek(p + 20); float resolveReproj<comment="リプロジェクション強度">;
    FSeek(p + 24); float overrideRatio<comment="IBLとのブレンド率">;
    FSeek(p + 28); float maxRoughness<comment="RLRが表示される最大Roughness">;
    FSeek(p + 32); float roughnessLevel<comment="Roughnessでのボケ具合">;
    FSeek(p + 36); float uvOffsetScale<comment="最終UVのオフセット強度">;

    FSeek(p + 40);
} FxRLRParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 16); vector4 plane<comment="平面">;
    FSeek(p + 32); uint32 width<comment="解像度:幅">;
    FSeek(p + 36); uint32 height<comment="解像度:高さ">;

    FSeek(p + 48);
} FxPlanarReflectionParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="ブルームを有効">;
    FSeek(p + 4);  float bloomScale<comment="ブルームの強さ">;
    FSeek(p + 8);  float sampleRadiusScale<comment="サンプル半径スケール">;
    FSeek(p + 12); sint32 blurQuality<comment="ブラー品質">;

    FSeek(p + 16);
} FxBloomParameter;

enum<sint8> Exposure
{
    EXPOSURE_MANUAL = 0,
    EXPOSURE_AUTO = 1
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float exposureValue<comment="露光値">;

    FSeek(p + 4);
} FxManualExposureParameter;

enum<sint8> LUMINANCE_RANGE
{
    LUMINANCE_RANGE_CLAMP = 0,
    LUMINANCE_RANGE_CUTOFF = 1,
    LUMINANCE_RANGE_CUTOFF_PCT_RATE = 2,
    LUMINANCE_RANGE_CUTOFF_PCT_AREA = 3
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float middleGray<comment="ミドルグレイ">;
    FSeek(p + 4);  float lumMax<comment="最大輝度">;
    FSeek(p + 8);  float lumMin<comment="最小輝度">;
    FSeek(p + 12); float cutMax<comment="最大カットオフ輝度">;
    FSeek(p + 16); float cutMin<comment="最小カットオフ輝度">;
    FSeek(p + 20); float pctMax<comment="最大カットオフパーセント">;
    FSeek(p + 24); float pctMin<comment="最小カットオフパーセント">;
    FSeek(p + 28); float adaptedRatio<comment="順応時間割合">;
    FSeek(p + 32); LUMINANCE_RANGE luminanceRangeType<comment="輝度レンジ">;

    FSeek(p + 36);
} FxAutoExposureParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); Exposure exposureType<comment="露出方法">;
    FSeek(p + 4); FxManualExposureParameter manualExposure<comment="手動露出">;
    FSeek(p + 8); FxAutoExposureParameter autoExposure<comment="自動露出">;

    FSeek(p + 44);
} FxCameraControlParameter;

enum<sint8> Tonemap
{
    TONEMAP_DISNEY = 0,
    TONEMAP_FILMIC = 1,
    TONEMAP_ACES = 2,
    TONEMAP_GT = 3
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float whitePoint<comment="ホワイトポイント">;
    FSeek(p + 4);  float toeStrength<comment="暗い部分の強さ">;
    FSeek(p + 8);  float linearAngle<comment="中間区間の角度">;
    FSeek(p + 12); float linearStrength<comment="中間区間の強さ">;
    FSeek(p + 16); float shoulderStrength<comment="明るい部分の強さ">;

    FSeek(p + 20);
} FxToneMapParameterFilmic;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float maxDisplayBrightness<comment="モニター最大輝度">;
    FSeek(p + 4);  float contrast<comment="コントラスト">;
    FSeek(p + 8);  float linearSectionStart<comment="線形区間の始まり">;
    FSeek(p + 12); float linearSectionLength<comment="線形区間の長さ">;
    FSeek(p + 16); float black<comment="黒の締り">;

    FSeek(p + 20);
} FxToneMapParameterGT;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  Tonemap tonemapType<comment="トーンマップタイプ">;
    FSeek(p + 4);  FxToneMapParameterFilmic tonemapParamFilmic<comment="Filmic">;
    FSeek(p + 24); FxToneMapParameterGT tonemapParamGT<comment="GT">;
    FSeek(p + 44); bool updateLuminance<comment="輝度を更新する">;

    FSeek(p + 48);
} FxToneMapParameter;

enum<sint32> LutIndex
{
    LUT_INDEX_DEFAULT = 0,
    LUT_INDEX_WB = 1,
    LUT_INDEX_USER_0 = 2,
    LUT_INDEX_USER_1 = 3,
    LUT_INDEX_USER_2 = 4,
    LUT_INDEX_USER_3 = 5,
    LUT_INDEX_USER_4 = 6,
    LUT_INDEX_USER_5 = 7,
    LUT_INDEX_COUNT = 8
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="色補正を有効">;
    FSeek(p + 4);  float contrast<comment="コントラスト">;
    FSeek(p + 8);  float dynamicRange<comment="ダイナミックレンジ">;
    FSeek(p + 12); float crushShadows<comment="暗部コントラスト">;
    FSeek(p + 16); float crushHilights<comment="明部コントラスト">;
    FSeek(p + 20); bool useLut<comment="LUTを有効">;
    FSeek(p + 24); LutIndex lutIndex0<comment="LUT0">;
    FSeek(p + 28); LutIndex lutIndex1<comment="LUT1">;
    FSeek(p + 32); float blendRatio<comment="ブレンド率">;
    FSeek(p + 36); float lutRatio<comment="LUT反映率">;
    FSeek(p + 40); bool useHlsCorrection<comment="HLSを有効">;
    FSeek(p + 44); float hlsHueOffset<comment="[HLS]色相オフセット値[°]">;
    FSeek(p + 48); float hlsLightnessOffset<comment="[HLS]明度オフセット値[%]">;
    FSeek(p + 52); float hlsSaturationOffset<comment="[HLS]彩度オフセット値[%]">;
    FSeek(p + 56); sint32 hlsColorOffset[3]<comment="[HLS]RGBオフセット値",optimize=false>;
    FSeek(p + 68); float hlsColorizeRate<comment="[HLS]色彩の統一反映率[%]">;
    FSeek(p + 72); float hlsColorizeHue<comment="[HLS]色彩の統一：色相[°]">;

    FSeek(p + 76);
} FxColorContrastParameter;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="Enable">;
    FSeek(p + 16); vector3 color<comment="平行光の色スケール">;
    FSeek(p + 32); float inScatteringScale<comment="平行光の強さ">;
    FSeek(p + 48); vector3 betaRayleigh<comment="Rayleigh">;
    FSeek(p + 64); float betaMie<comment="Mie">;
    FSeek(p + 68); float g<comment="Mie Power">;
    FSeek(p + 72); float znear<comment="Near">;
    FSeek(p + 76); float zfar<comment="Far">;
    FSeek(p + 80); float depthScale<comment="Depth Scale">;

    FSeek(p + 96);
} FxLightScatteringParameter;

enum<sint32> RenderTargetSize
{
    RTSIZE_FULL_SCALE = 0,
    RTSIZE_HALF_SCALE = 1,
    RTSIZE_QUARTER_SCALE = 2,
    RTSIZE_COUNT = 3,
    RTSIZE_INVALID = 3
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="DOFを有効">;
    FSeek(p + 1);  bool useFocusLookAt<comment="LookAt位置でピント">;
    FSeek(p + 4);  float foregroundBokehMaxDepth<comment="前ボケ最大深度(近)">;
    FSeek(p + 8);  float foregroundBokehStartDepth<comment="前ボケ最小深度">;
    FSeek(p + 12); float backgroundBokehStartDepth<comment="後ボケ最小深度">;
    FSeek(p + 16); float backgroundBokehMaxDepth<comment="後ボケ最大深度(遠)">;
    FSeek(p + 20); bool enableCircleDOF<comment="錯乱円を使うか">;
    FSeek(p + 24); float cocMaxRadius<comment="錯乱円の最大半径">;
    FSeek(p + 28); float bokehRadiusScale<comment="ボケの錯乱円のスケール">;
    FSeek(p + 32); sint32 bokehSampleCount<comment="ボケのサンプル数">;
    FSeek(p + 36); float skyFocusDistance<comment="天球のピント距離[0.0だとボケる]">;
    FSeek(p + 40); float bokehBias<comment="MAXボケの比率[0.0だとボケない]">;
    FSeek(p + 44); bool drawFocalPlane<comment="ピントが合う位置の表示">;
    FSeek(p + 48); RenderTargetSize rtScale<comment="解像度スケール">;
    FSeek(p + 52); bool enableSWA<comment="enableSWA">;
    FSeek(p + 56); float swaFocus<comment="swaFocus">;
    FSeek(p + 60); float swaFocusRange<comment="swaFocusRange">;
    FSeek(p + 64); float swaNear<comment="swaNear">;
    FSeek(p + 68); float swaFar<comment="swaFar">;
    FSeek(p + 72); bool enableEnhancedForeBokeh<comment="前ボケを強調する">;
    FSeek(p + 76); float foreBokehScale<comment="前ボケスケール">;
    FSeek(p + 80); float foreBokehMaxLuminance<comment="前ボケ強調時の最大輝度">;

    FSeek(p + 84);
} FxDOFParameter;

enum<sint8> ShadowRenderingType
{
    SHADOW_RENDERING_TYPE_SHADOW_MAP = 0,
    SHADOW_RENDERING_TYPE_PLANAR_PROJECTION = 1,
    SHADOW_RENDERING_TYPE_PLANAR_PROJECTION_SHADOW_MAP = 2,
    SHADOW_RENDERING_TYPE_MULTI_SHADOW_MAP = 3,
    SHADOW_RENDERING_TYPE_COUNT = 4
};

enum<sint8> ShadowFilter
{
    SHADOW_FILTER_POINT = 0,
    SHADOW_FILTER_PCF = 1,
    SHADOW_FILTER_PCSS = 2,
    SHADOW_FILTER_ESM = 3,
    SHADOW_FILTER_MSM = 4,
    SHADOW_FILTER_VSM_POINT = 5,
    SHADOW_FILTER_VSM_LINEAR = 6,
    SHADOW_FILTER_VSM_ANISO_2 = 7,
    SHADOW_FILTER_VSM_ANISO_4 = 8,
    SHADOW_FILTER_VSM_ANISO_8 = 9,
    SHADOW_FILTER_VSM_ANISO_16 = 10,
    SHADOW_FILTER_COUNT = 11,
    SHADOW_FILTER_VSM_FIRST = 5,
    SHADOW_FILTER_VSM_LAST = 10
};

enum<sint8> ShadowRangeType
{
    SHADOW_RANGE_TYPE_CAMERA_LOOKAT = 0,
    SHADOW_RANGE_TYPE_POSITION_MANUAL = 1,
    SHADOW_RANGE_TYPE_FULL_MANUAL = 2,
    SHADOW_RANGE_TYPE_COUNT = 3,
    SHADOW_RANGE_TYPE_DEFAULT = 0
};

enum<sint8> FitProjection
{
    FIT_PROJECTION_TO_CASCADES = 0,
    FIT_PROJECTION_TO_SCENE = 1
};

enum<sint8> FitNearFar
{
    FIT_NEARFAR_ZERO_ONE = 0,
    FIT_NEARFAR_AABB = 1,
    FIT_NEARFAR_SCENE_AABB = 2
};

enum<sint8> PartitionType
{
    PARTITION_PSSM = 0,
    PARTITION_MANUAL = 1
};

typedef struct {
    float m[4 * 4];
} matrix44;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   ShadowRenderingType renderingType<comment="renderingType">;
    FSeek(p + 1);   bool enable<comment="シャドウマップを有効にする">;
    FSeek(p + 2);   ShadowFilter shadowFilter<comment="シャドウマップフィルター">;
    FSeek(p + 3);   ShadowRangeType shadowRangeType<comment="shadowRangeType">;
    FSeek(p + 4);   FitProjection fitProjection<comment="fitProjection">;
    FSeek(p + 5);   FitNearFar fitNearFar<comment="fitNearFar">;
    FSeek(p + 6);   PartitionType partitionType<comment="カスケード分割">;
    FSeek(p + 8);   float sceneRange<comment="シーンレンジ">;
    FSeek(p + 12);  float sceneCenter[3]<comment="シーン中心",optimize=false>;
    FSeek(p + 24);  float manualLightPos[3]<comment="manualLightPos",optimize=false>;
    FSeek(p + 36);  float pssmLambda<comment="pssmLambda">;
    FSeek(p + 40);  float cascadeOffset<comment="カスケードのNearPlaneからのオフセット">;
    FSeek(p + 44);  sint32 cascadeLevel<comment="カスケードレベル">;
    FSeek(p + 48);  float cascadeSplits[4]<comment="カスケード分割割合",optimize=false>;
    FSeek(p + 64);  float cascadeBias[4]<comment="カスケードごとのバイアス値",optimize=false>;
    FSeek(p + 80);  float bias<comment="バイアス">;
    FSeek(p + 84);  float offset<comment="オフセット">;
    FSeek(p + 88);  float normalBias<comment="法線バイアス">;
    FSeek(p + 92);  sint32 width<comment="シャドウマップの幅">;
    FSeek(p + 96);  sint32 height<comment="シャドウマップの高さ">;
    FSeek(p + 100); sint32 blurQuality<comment="ブラー品質">;
    FSeek(p + 104); sint32 blurSize<comment="blurSize">;
    FSeek(p + 108); float fadeoutDistance<comment="フェードアウト距離">;
    FSeek(p + 112); float cascadeTransitionfadeDistance<comment="カスケード間の遷移距離">;
    FSeek(p + 116); bool enableCSMCache<comment="enableCSMCache">;
    FSeek(p + 120); float csmCacheMaxHeight<comment="csmCacheMaxHeight">;
    FSeek(p + 124); float csmCacheMinHeight<comment="csmCacheMinHeight">;
    FSeek(p + 128); sint32 csmCacheMaxRenderPass<comment="CSMキャッシュ フレーム毎の最大更新パス数">;
    FSeek(p + 132); float csmCacheFixedFovy<comment="CSMキャッシュ 固定画角">;
    FSeek(p + 136); float csmCacheLightDirectionThreshold<comment="CSMキャッシュ 更新しきい値[deg]">;
    FSeek(p + 140); bool csmCacheParallaxCorrectionEnabled<comment="CSMキャッシュ 視差補正">;
    FSeek(p + 144); float csmCacheParallaxCorrectionHorizontalBias<comment="CSMキャッシュ 視差補正水平バイアス">;
    FSeek(p + 148); float csmCacheParallaxCorrectionVerticalBias<comment="CSMキャッシュ 視差補正垂直バイアス">;
    FSeek(p + 152); sint32 csmCacheFramesToRender[3]<comment="CSMキャッシュ カスケードの分割更新フレーム数",optimize=false>;
    FSeek(p + 164); float csmCacheFadeLightElevationAngle<comment="CSMキャッシュ 光源仰角によるフェード範囲[deg]">;
    FSeek(p + 168); float csmCacheMinLightElevationAngle<comment="CSMキャッシュ 光源仰角の最小値[deg]">;
    FSeek(p + 176); matrix44 shadowCameraViewMatrix<comment="シャドウカメラViewMatrix">;
    FSeek(p + 240); matrix44 shadowCameraProjectionMatrix<comment="シャドウカメラProjectionMatrix">;
    FSeek(p + 304); float shadowCameraNearDepth<comment="シャドウカメラNearDepth">;
    FSeek(p + 308); float shadowCameraFarDepth<comment="シャドウカメラFarDepth">;
    FSeek(p + 312); float shadowCameraLookAtDepth<comment="シャドウカメラLookAtDepth">;
    FSeek(p + 316); bool enableBackFaceShadow<comment="裏面シャドウ">;
    FSeek(p + 317); bool enableShadowCamera<comment="フラスタムの計算をシャドウカメラで行う">;
    FSeek(p + 318); bool enableDrawSceneAABB<comment="enableDrawSceneAABB">;
    FSeek(p + 319); bool enableDrawShadowFrustum<comment="影のフラスタムを表示する">;
    FSeek(p + 320); bool enableDrawCascade<comment="enableDrawCascade">;
    FSeek(p + 321); bool enableDrawCameraFrustum<comment="enableDrawCameraFrustum">;
    FSeek(p + 322); bool enableDrawCSMCache<comment="enableDrawCSMCache">;
    FSeek(p + 323); bool enableClearOnCSMCacheIsInvalidated<comment="enableClearOnCSMCacheIsInvalidated">;
    FSeek(p + 324); bool enablePauseCamera<comment="enablePauseCamera">;

    FSeek(p + 336);
} FxShadowMapParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 4);  float bias<comment="バイアス">;
    FSeek(p + 8);  float distanceFalloff<comment="距離によるフォールオフ">;
    FSeek(p + 12); float heightFalloffMinHeight<comment="高さによるフォールオフ 最小高さ">;
    FSeek(p + 16); float heightFalloffDistance<comment="高さによるフォールオフ ボケ足">;

    FSeek(p + 20);
} FxShadowHeightMapParameter;

enum<sint8> SSAOType
{
    SSAO = 0,
    HBAO = 1,
    HBAO_SSS = 2,
    SSS = 3,
    TYPE_COUNT = 4
};

enum<sint8> FxSSAOParameter_RenderTargetSize
{
    RTSIZE_SAME_AS_FRAMEBUFFER = 0,
    RTSIZE_ONE_SECOND = 1,
    RTSIZE_ONE_FORTH = 2,
    FxSSAOParameter_RenderTargetSize_RTSIZE_COUNT = 3
};

enum<sint8> BLURType
{
    None = 1,
    Gauss2x2 = 2,
    Gauss3x3 = 3,
    Gauss4x4 = 4,
    Gauss5x5 = 5,
    Gauss6x6 = 6,
    Gauss7x7 = 7,
    Gauss8x8 = 8,
    Gauss9x9 = 9,
    Bilateral = 10,
    BLUR_COUNT = 11
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float intensity<comment="強さ">;
    FSeek(p + 4);  float radius<comment="半径">;
    FSeek(p + 8);  float fadeoutDistance<comment="フェードアウト終了距離">;
    FSeek(p + 12); float fadeoutRadius<comment="フェードアウト開始距離">;
    FSeek(p + 16); float power<comment="計算された暗色化効果の強度">;
    FSeek(p + 20); float bias<comment="バイアス">;
    FSeek(p + 24); float occlusionDistance<comment="AOが発生するオブジェクト間の距離">;
    FSeek(p + 28); float directLightingInfluence<comment="直接光への影響度">;

    FSeek(p + 32);
} FxSSAO_Parameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float hbaoPower<comment="HBAO_強度">;
    FSeek(p + 4);  float hbaoBias<comment="HBAO_角度バイアス">;
    FSeek(p + 8);  float hbaoRadius<comment="HBAO_サンプリング半径">;
    FSeek(p + 12); float hbaoFalloff<comment="HBAO_距離減衰">;
    FSeek(p + 16); float hbaoSteps<comment="HBAO_ステップ数">;
    FSeek(p + 20); float hbaoGitter<comment="HBAO_Gitter">;
    FSeek(p + 24); sint8 hbaoRaycount<comment="HBAO_Ray数">;
    FSeek(p + 25); bool hbaoGiMaskEnable<comment="HBAO_gi_maskを有効">;

    FSeek(p + 28);
} FxHBAO_Parameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float sssRayLength<comment="SSS_1回の距離">;
    FSeek(p + 4);  sint8 sssRaycount<comment="SSS_計算回数">;
    FSeek(p + 8);  float sssBias<comment="SSS_影の鮮明度">;
    FSeek(p + 12); float sssIntensity<comment="SSS_強度">;
    FSeek(p + 16); float sssDepthMin<comment="SSS_減衰開始距離">;
    FSeek(p + 20); float sssDepthMax<comment="SSS_減衰終了距離">;
    FSeek(p + 24); float sssLightDistance<comment="SSS_ライト距離">;
    FSeek(p + 28); float sssThickness<comment="SSS_厚み">;
    FSeek(p + 32); bool sssGiMaskEnable<comment="SSS_gi_maskを有効">;
    FSeek(p + 36); float sssLimit<comment="SSS_距離制限">;
    FSeek(p + 40); bool sssDitherEnable<comment="SSS_ディザ有効">;

    FSeek(p + 44);
} FxSSS_Parameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="SSAOを有効">;
    FSeek(p + 1);  SSAOType postType<comment="SSAOの種類">;
    FSeek(p + 2);  FxSSAOParameter_RenderTargetSize renderTargetSize<comment="サイズ">;
    FSeek(p + 3);  BLURType blurStep<comment="Blurサイズ">;
    FSeek(p + 4);  float bilateralThreshold<comment="Bilateral閾値">;
    FSeek(p + 8);  FxSSAO_Parameter ssaoParam<comment="SSAO設定">;
    FSeek(p + 40); FxHBAO_Parameter hbaoParam<comment="HBAO設定">;
    FSeek(p + 68); FxSSS_Parameter sssParam<comment="SSS設定">;

    FSeek(p + 112);
} FxSSAOParameter;

enum<sint8> DebugDrawType
{
    DEBUG_DRAW_NONE = 0,
    DEBUG_DRAW_ONLY_ENABLED = 1,
    DEBUG_DRAW_ALL = 2
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool enable<comment="AOLFをマージする">;
    FSeek(p + 4); float blendRatio<comment="LF同士のブレンド率">;

    FSeek(p + 8);
} FxLightFieldMergeParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 1);  DebugDrawType debugDrawType<comment="デバッグ描画タイプ">;
    FSeek(p + 2);  bool showSkyVisibility<comment="デバッグ描画SkyVisibility表示">;
    FSeek(p + 4);  float debugProbeSize<comment="デバッグ描画プローブサイズ">;
    FSeek(p + 16); vector3 multiplyColorUp<comment="乗算カラー:上">;
    FSeek(p + 32); vector3 multiplyColorDown<comment="乗算カラー:下">;
    FSeek(p + 48); float normalBias<comment="法線方向オフセット">;
    FSeek(p + 52); FxLightFieldMergeParameter lfMerge<comment="AOLFのマージ設定">;

    FSeek(p + 64);
} FxSHLightFieldParameter;

enum<sint8> BlurType
{
    BLURTYPE_PREV_SURFACE = 0,
    BLURTYPE_RADIAL = 1,
    BLURTYPE_CAMERA = 2,
    BLURTYPE_COUNT = 3
};

enum<sint8> FocusType
{
    FOCUSTYPE_CENTER = 0,
    FOCUSTYPE_LOOKAT = 1,
    FOCUSTYPE_USER_SETTING = 2,
    FOCUSTYPE_COUNT = 3
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="画面ブラーを有効">;
    FSeek(p + 1);  BlurType blurType<comment="ブラータイプ">;
    FSeek(p + 4);  float blurPower<comment="ブラーの強さ">;
    FSeek(p + 8);  FocusType focusType<comment="フォーカス位置タイプ">;
    FSeek(p + 16); vector3 focusPosition<comment="ユーザー設定のフォーカス位置">;
    FSeek(p + 32); float focusRange<comment="ブラーがかからない範囲">;
    FSeek(p + 36); float alphaSlope<comment="ブラーのα値スケール">;
    FSeek(p + 40); sint32 sampleNum<comment="サンプル数">;
    FSeek(p + 44); bool singleDirectionOpt<comment="軽量カメラブラー">;

    FSeek(p + 48);
} FxScreenBlurParameter;

typedef struct {
    ubyte alpha;
    ubyte red;
    ubyte green;
    ubyte blue;
} color8;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enable<comment="Enable">;
    FSeek(p + 1);   bool enableOcclusion<comment="Occlusion有効">;
    FSeek(p + 4);   color8 occlusionColor<comment="Occlusionカラー">;
    FSeek(p + 8);   float occlusionPower<comment="Occlusion濃さ">;
    FSeek(p + 12);  bool enableSpecularOcclusion<comment="SpecularOcclusion有効">;
    FSeek(p + 16);  float specularOcclusionAlpha<comment="SpecularOcclusion透明度">;
    FSeek(p + 20);  float specularOcclusionPower<comment="SpecularOcclusion濃さ">;
    FSeek(p + 24);  float specularOcclusionConeAngle<comment="SpecularOcclusionコーン角度">;
    FSeek(p + 28);  bool enableShadow<comment="Shadow有効">;
    FSeek(p + 32);  color8 shadowColor<comment="Shadowカラー">;
    FSeek(p + 36);  float shadowPower<comment="Shadow濃さ">;
    FSeek(p + 40);  float shadowConeAngle<comment="Shadowコーン角度">;
    FSeek(p + 44);  float cullingDistance<comment="有効範囲">;
    FSeek(p + 48);  bool enableManualLight<comment="手動でのライト設定を有効にする">;
    FSeek(p + 52);  sint32 manualLightCount<comment="手動設定ライトの数">;
    FSeek(p + 64);  vector3 manualLightPos[4]<comment="手動設定ライト位置",optimize=false>;
    FSeek(p + 128); bool debugDraw<comment="デバッグ描画">;

    FSeek(p + 144);
} FxOcclusionCapsuleParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float lightFieldColorCoefficient<comment="LightFieldColor係数">;
    FSeek(p + 4);  float invTonemapCoefficient<comment="強度オフセット係数">;
    FSeek(p + 16); vector3 shadowColor<comment="影色">;
    FSeek(p + 32); vector3 directionalLightOverwrite<comment="並行光色">;
    FSeek(p + 48); float directionalLightIntensityOverwrite<comment="平行光Intensity">;
    FSeek(p + 52); bool overwriteDirectionalLight<comment="平行光色を上書きする">;
    FSeek(p + 56); float localLightIntensityScale<comment="ポイントライトの強度スケール">;
    FSeek(p + 60); float lodDistances[8]<comment="LOD距離",optimize=false>;
    FSeek(p + 92); bool enableVisualizeOverdraw<comment="オーバードローをデバッグスクリーンに出力する">;
    FSeek(p + 93); bool renderWireframe<comment="ワイヤーフレーム表示">;

    FSeek(p + 96);
} FxEffectParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="Enable">;
    FSeek(p + 4);  float rayMarchingCount<comment="サンプル数">;
    FSeek(p + 8);  float density<comment="光筋の長さ">;
    FSeek(p + 12); float decay<comment="減衰率">;
    FSeek(p + 16); float threshold<comment="しきい値">;
    FSeek(p + 20); float lumMax<comment="最大値">;
    FSeek(p + 24); float intensity<comment="強さ">;
    FSeek(p + 28); bool enableDither<comment="ディザ有効">;
    FSeek(p + 32); vector3 lightPos<comment="lightPos">;
    FSeek(p + 48); vector3 lightDir<comment="lightDir">;

    FSeek(p + 64);
} FxScreenSpaceGodrayParameter;

typedef struct {
    float m[4 * 4];
} matrix34;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enableVolumeTexture<comment="enableVolumeTexture">;
    FSeek(p + 4);  float uvScale<comment="ノイズテクスチャのスケール">;
    FSeek(p + 8);  float timeScale<comment="ノイズテクスチャのスクロール速度">;
    FSeek(p + 12); float animationAngle<comment="ノイズの流れる向き">;

    FSeek(p + 16);
} FxGodrayVolumeTexture;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enable<comment="Enable">;
    FSeek(p + 1);   bool isUseShadowmap<comment="シャドウマップの使用">;
    FSeek(p + 2);   bool isVariableStep<comment="可変レイマーチ">;
    FSeek(p + 16);  matrix44 shadow<comment="shadow">;
    FSeek(p + 80);  matrix34 box<comment="表示範囲">;
    FSeek(p + 144); vector3 color<comment="色スケール">;
    FSeek(p + 160); float density<comment="フォグの濃さ">;
    FSeek(p + 164); float anisotropy<comment="光の拡散具合">;
    FSeek(p + 168); float range<comment="有効範囲">;
    FSeek(p + 172); float rayMarchingCount<comment="レイマーチ数">;
    FSeek(p + 176); float rayMarchingStep<comment="rayMarchingStep">;
    FSeek(p + 180); float shadowEdge<comment="影のエッヂを強調">;
    FSeek(p + 184); bool isScanFromBack<comment="isScanFromBack">;
    FSeek(p + 188); sint32 boxCount<comment="boxCount">;
    FSeek(p + 192); bool isNewMode<comment="新方式(1/4)">;
    FSeek(p + 196); FxGodrayVolumeTexture volumeTexture<comment="ボリュームテクスチャ">;
    FSeek(p + 212); float transparency<comment="透過度合">;
    FSeek(p + 216); bool enable3d<comment="3Dテクスチャボリューメトリックライト">;
    FSeek(p + 220); float reProject3d<comment="3Dリプロジェクション強度">;
    FSeek(p + 224); float logNear3d<comment="3D対数係数">;

    FSeek(p + 240);
} FxGodrayParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="Enable">;
    FSeek(p + 4);  float speed<comment="スピード">;
    FSeek(p + 8);  float scale<comment="スケール">;
    FSeek(p + 12); float cycle<comment="周期">;
    FSeek(p + 16); float nearDepth<comment="かかり始める距離">;
    FSeek(p + 20); float farDepth<comment="最大になる距離">;
    FSeek(p + 24); float maxHeight<comment="高度制限">;
    FSeek(p + 28); float parallaxCorrectFactor<comment="視差補正係数">;

    FSeek(p + 32);
} FxHeatHazeParameter;

enum<sint8> SunPosType
{
    SUN_POS_TYPE_NONE = 0,
    SUN_POS_TYPE_ANGLE = 1,
    SUN_POS_TYPE_EARTH = 2
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float azimuthAngle<comment="方位角">;
    FSeek(p + 4); float elevationAngle<comment="仰角">;

    FSeek(p + 8);
} FxSunPosAngle;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float azimuthAngle<comment="方位角補正">;
    FSeek(p + 4);  float latitude<comment="緯度">;
    FSeek(p + 8);  float longitude<comment="経度">;
    FSeek(p + 12); sint32 month<comment="月">;
    FSeek(p + 16); sint32 day<comment="日">;
    FSeek(p + 20); float time<comment="時">;
    FSeek(p + 24); bool enableAnimation<comment="アニメーション有効化">;
    FSeek(p + 28); float animationSpeed<comment="時勢変化速度">;

    FSeek(p + 32);
} FxSunPosEarth;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float solarRadiusScale<comment="太陽の大きさ">;
    FSeek(p + 4);  SunPosType sunPosType<comment="太陽位置の指定方法">;
    FSeek(p + 8);  FxSunPosAngle posTypeAngle<comment="角度で設定">;
    FSeek(p + 16); FxSunPosEarth posTypeEarth<comment="日時で設定">;

    FSeek(p + 48);
} FxSun;

enum<sint8> MoonPosType
{
    MOON_POS_TYPE_NONE = 0,
    MOON_POS_TYPE_INV_SUN = 1,
    MOON_POS_TYPE_EARTH = 2
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); MoonPosType moonPosType<comment="位置の指定方法">;

    FSeek(p + 1);
} FxMoon;

enum<sint8> SkyModel
{
    BRUNETON = 0,
    SEBASTIEN = 1
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  SkyModel skyModel<comment="天球のタイプ">;
    FSeek(p + 4);  float illuminanceScale<comment="illuminanceScale">;
    FSeek(p + 8);  bool enableScattering<comment="スキャッタリング有効化">;
    FSeek(p + 12); float scatteringRatio<comment="スキャッタリング具合">;

    FSeek(p + 16);
} FxSkyCommon;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float lunarIntensityInSky<comment="天球上の月の明るさ">;
    FSeek(p + 4);  float starIntensityInSky<comment="天球上の星の明るさ">;
    FSeek(p + 8);  float lunarIntensityInCloud<comment="雲を照らすライトの強さ">;
    FSeek(p + 12); float lunarIntensity<comment="空と雲の輝度スケール">;
    FSeek(p + 16); float skyIntensity<comment="空の明るさ">;
    FSeek(p + 20); color8 lunarLightColor<comment="平行光の色味補正">;
    FSeek(p + 32); vector4 lunarLightColorOffset<comment="[オフセット]平行光の色味補正">;
    FSeek(p + 48); float lunarLightPower<comment="平行光の強さ補正">;

    FSeek(p + 64);
} FxBrunetonSkyNight;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float illuminanceScale<comment="illuminanceScale">;
    FSeek(p + 4);   color8 rayleighColor<comment="rayleighColor">;
    FSeek(p + 8);   color8 lightColorScale<comment="平行光の色味補正">;
    FSeek(p + 12);  float miePhaseFunctionG<comment="大気混濁度 指向性">;
    FSeek(p + 16);  color8 mieScatteringColor<comment="mie scattering color">;
    FSeek(p + 20);  float mieScatteringScale<comment="mie scattering scale">;
    FSeek(p + 24);  color8 mieAbsorptionColor<comment="mie absorption color">;
    FSeek(p + 28);  float mieAbsorptionScale<comment="mie absorption scale">;
    FSeek(p + 32);  color8 rayleighScatteringColor<comment="rayleigh scattering color">;
    FSeek(p + 36);  float rayleighScatteringScale<comment="rayleigh scattering scale">;
    FSeek(p + 40);  color8 groundAlbedo<comment="地面のアルベド">;
    FSeek(p + 44);  color8 groundIrradianceScale<comment="地面ライティング補正">;
    FSeek(p + 48);  color8 cubemapColorScale<comment="IBLへの乗算値">;
    FSeek(p + 52);  float cubemapColorAngleRatio<comment="IBL乗算値への適用具合">;
    FSeek(p + 56);  bool enableScattering<comment="スキャッタリング有効化">;
    FSeek(p + 60);  float scatteringRatio<comment="スキャッタリング具合">;
    FSeek(p + 64);  FxBrunetonSkyNight night<comment="夜の天球">;
    FSeek(p + 128); bool enableLimitY<comment="Y方向の追従制限">;
    FSeek(p + 132); float debugSkyCubeIntensity<comment="[debug] GBufferCubeの輝度スケール">;

    FSeek(p + 144);
} FxBrunetonSky;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   float miePhaseFunctionG<comment="大気混濁度 指向性">;
    FSeek(p + 4);   color8 mieScatteringColor<comment="mie scattering color">;
    FSeek(p + 16);  vector4 mieScatteringColorOffset<comment="[オフセット]mie scattering color">;
    FSeek(p + 32);  float mieScatteringScale<comment="mie scattering scale">;
    FSeek(p + 36);  color8 mieAbsorptionColor<comment="mie absorption color">;
    FSeek(p + 48);  vector4 mieAbsorptionColorOffset<comment="[オフセット]mie absorption color">;
    FSeek(p + 64);  float mieAbsorptionScale<comment="mie absorption scale">;
    FSeek(p + 68);  color8 rayleighScatteringColor<comment="rayleigh scattering color">;
    FSeek(p + 80);  vector4 rayleighScatteringColorOffset<comment="[オフセット]rayleigh scattering color">;
    FSeek(p + 96);  float rayleighScatteringScale<comment="rayleigh scattering scale">;
    FSeek(p + 100); color8 groundAlbedo<comment="地面のアルベド">;
    FSeek(p + 112); vector4 groundAlbedoOffset<comment="[オフセット]地面のアルベド">;
    FSeek(p + 128); bool enableGround<comment="仮想地面有効化">;
    FSeek(p + 132); sint32 numScatteringOrder<comment="numScatteringOrder">;
    FSeek(p + 136); bool enableScattering<comment="スキャッタリング有効化">;
    FSeek(p + 137); bool enableLimitY<comment="Y方向の追従制限">;

    FSeek(p + 144);
} FxSebastienSky;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 uvScale<comment="UVスケール">;
    FSeek(p + 16); vector3 colorGamma<comment="ガンマ">;
    FSeek(p + 32); vector3 colorScale<comment="カラースケール">;
    FSeek(p + 48); vector3 colorOffset<comment="カラーオフセット">;

    FSeek(p + 64);
} FxCloudProcedural;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="雲テクスチャの切り替え">;
    FSeek(p + 4);  float probability<comment="切り替わる確率">;
    FSeek(p + 8);  float cloudiness<comment="曇り具合[強制的に曇らせる]">;
    FSeek(p + 16); FxCloudProcedural proceduralCloud<comment="曇りの雲[procedural]">;

    FSeek(p + 80);
} FxCloudBlendParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enable<comment="雲描画有効化">;
    FSeek(p + 1);   bool enableAnimation<comment="アニメーション有効化">;
    FSeek(p + 4);   float animationFrame<comment="現在のフレーム数">;
    FSeek(p + 8);   float animationSpeed<comment="低層雲アニメーション速度">;
    FSeek(p + 12);  float animationAngle<comment="低層雲の流れる向き">;
    FSeek(p + 16);  float animationSpeedCirrus<comment="高高度雲アニメーション速度">;
    FSeek(p + 20);  float animationAngleCirrus<comment="高高度雲の流れる向き">;
    FSeek(p + 24);  float skyHorizonOffset<comment="水平線の位置">;
    FSeek(p + 28);  float cloudStartHeight<comment="雲の高さ">;
    FSeek(p + 32);  float cloudCoverageSpeed<comment="R:雲範囲変化速度">;
    FSeek(p + 36);  float cloudTypeSpeed<comment="G:雲厚み変化速度">;
    FSeek(p + 40);  float cloudWetnessSpeed<comment="B:雲の暗さ変化速度">;
    FSeek(p + 44);  float miePhaseFunctionG<comment="mie phase g">;
    FSeek(p + 48);  float silverIntensity<comment="silver intensity">;
    FSeek(p + 52);  float silverSpread<comment="silver spread">;
    FSeek(p + 56);  float scale<comment="UVScale">;
    FSeek(p + 60);  float density<comment="雲の密度">;
    FSeek(p + 64);  float densityThreshold<comment="雲の密度閾値">;
    FSeek(p + 68);  color8 cloudsExtinctionColor1<comment="日中の消失カラー">;
    FSeek(p + 80);  vector4 cloudsExtinctionColor1Offset<comment="[オフセット]日中の消失カラー">;
    FSeek(p + 96);  color8 cloudsExtinctionColor2<comment="夕方の消失カラー">;
    FSeek(p + 112); vector4 cloudsExtinctionColor2Offset<comment="[オフセット]夕方の消失カラー">;
    FSeek(p + 128); color8 cloudsExtinctionColor3<comment="夜中の消失カラー">;
    FSeek(p + 144); vector4 cloudsExtinctionColor3Offset<comment="[オフセット]夜中の消失カラー">;
    FSeek(p + 160); float cloudExtinctionBlend<comment="雲と空のブレンド率">;
    FSeek(p + 164); bool enableShadow<comment="雲影有効化">;
    FSeek(p + 168); sint32 shadowCoverage<comment="影を落とす範囲[m]">;
    FSeek(p + 172); float shadowValueMin<comment="雲の遮蔽最低値">;
    FSeek(p + 176); FxCloudBlendParameter blendParam<comment="雲の切り替え">;

    FSeek(p + 256);
} FxCloudParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="ゴッドレイ有効化">;
    FSeek(p + 4);  float density<comment="密度">;
    FSeek(p + 8);  float decay<comment="減衰率">;
    FSeek(p + 12); float weight<comment="重み">;

    FSeek(p + 16);
} FxCrepuscularRay;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  vector3 sunColor<comment="太陽カラー">;
    FSeek(p + 16); vector3 ambColor<comment="アンビエントカラー">;

    FSeek(p + 32);
} FxManualHeightFog;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="ハイトフォグ有効化">;
    FSeek(p + 1);  bool enableFogMap<comment="フォグマップの利用">;
    FSeek(p + 4);  float heightScale<comment="高さスケール">;
    FSeek(p + 8);  float distanceOffset<comment="距離オフセット">;
    FSeek(p + 12); float distanceScale<comment="距離スケール">;
    FSeek(p + 16); vector3 rayleighScale<comment="レイリー補正">;
    FSeek(p + 32); vector3 mieScale<comment="ミー補正">;
    FSeek(p + 48); float noiseBlend<comment="ノイズ乗算(-1)/加算選択(1)">;
    FSeek(p + 52); float noiseScale<comment="ノイズスケール">;
    FSeek(p + 56); float noiseDistance<comment="ノイズ最大距離">;
    FSeek(p + 60); float animationSpeed<comment="ノイズの流れる速度">;
    FSeek(p + 64); float animationAngle<comment="ノイズの流れる向き">;
    FSeek(p + 68); bool isAtmospheric<comment="大気と連動させる">;
    FSeek(p + 80); FxManualHeightFog manualFog<comment="連動しない場合">;

    FSeek(p + 112);
} FxHeightFog;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enable<comment="リアルタイム天球を有効">;
    FSeek(p + 4);   FxSun sunParam<comment="太陽">;
    FSeek(p + 52);  FxMoon moonParam<comment="月">;
    FSeek(p + 56);  FxSkyCommon commonSkyParam<comment="天球共通">;
    FSeek(p + 80);  FxBrunetonSky brunetonSkyParam<comment="BrunetonSky">;
    FSeek(p + 224); FxSebastienSky sebastienSkyParam<comment="SebastienSky">;
    FSeek(p + 368); FxCloudParameter cloudParam<comment="雲">;
    FSeek(p + 624); FxCrepuscularRay crepuscularRayParam<comment="ゴッドレイ">;
    FSeek(p + 640); FxHeightFog heightFogParam<comment="ハイトフォグ">;

    FSeek(p + 752);
} FxAtmosphereParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float heightThreshold<comment="ハイトマップ閾値">;
    FSeek(p + 4);  float slopeThreshold<comment="地面の傾き閾値">;
    FSeek(p + 8);  float noiseScaleXZ<comment="水たまりテクスチャのXZスケール">;
    FSeek(p + 12); float noiseScaleY<comment="水たまりテクスチャのYスケール">;
    FSeek(p + 16); float noiseThreshold<comment="水たまりテクスチャの閾値">;
    FSeek(p + 20); float noiseAttenuationRange<comment="水たまりテクスチャの減衰幅">;

    FSeek(p + 24);
} FxPuddleParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float wetness<comment="湿り具合">;
    FSeek(p + 4); FxPuddleParameter puddle<comment="水たまり">;

    FSeek(p + 28);
} FxWeatherParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float windRotationY<comment="風の方向:Z軸">;
    FSeek(p + 4);  float windStrength<comment="風の強さ">;
    FSeek(p + 8);  float windNoise<comment="風の複雑度">;
    FSeek(p + 12); float windAmplitude<comment="風の振幅">;
    FSeek(p + 16); float windFrequencies[4]<comment="風の周期",optimize=false>;
    FSeek(p + 32); bool enableTreadGrass<comment="草の押し倒し有効">;
    FSeek(p + 48); vector4 grassLodDistance<comment="草のLOD距離">;
    FSeek(p + 64); bool enableHighLight<comment="暗い時の目立たせ有効">;
    FSeek(p + 68); float highLightThreshold<comment="この値より暗い時に目立たせる">;
    FSeek(p + 72); float highLightObjectAmbientScale<comment="オブジェクト:覆い焼き">;
    FSeek(p + 76); float highLightObjectAlbedoHeighten<comment="オブジェクト:明るさ">;
    FSeek(p + 80); float highLightCharaAmbientScale<comment="キャラ:覆い焼き">;
    FSeek(p + 84); float highLightCharaAlbedoHeighten<comment="キャラ:明るさ">;
    FSeek(p + 88); float highLightCharaFalloffScale<comment="キャラ:Falloff強さ">;

    FSeek(p + 96);
} FxSceneEnvironmentParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enableUpscaling<comment="アップスケーリングを有効にする">;
    FSeek(p + 4);  float jitterScale<comment="ジッタースケール">;
    FSeek(p + 8);  float mipBias<comment="ミップバイアス">;
    FSeek(p + 12); float sharpnessPower<comment="シャープネスフィルタの強さ">;
    FSeek(p + 16); float baseWeight<comment="最新フレームの基準ウェイト">;
    FSeek(p + 20); float velocityVarianceBasedWeightBias<comment="速度分散に応じた最新フレームのウェイトバイアス">;
    FSeek(p + 24); float colorSpaceClippingScale<comment="色空間のスケール">;
    FSeek(p + 28); float colorSpaceClippingScaleForStatic<comment="色空間のスケール[静止物]">;
    FSeek(p + 32); float velocityVarianceMin<comment="エッジを改善する最小速度分散">;
    FSeek(p + 36); float velocityVarianceMax<comment="エッジを改善する最大速度分散">;
    FSeek(p + 40); bool debugVisualizeVelcotiyVariance<comment="速度分散を可視化する">;
    FSeek(p + 48); vector4 debug<comment="debug">;

    FSeek(p + 64);
} FxTAAParameter;

enum<sint8> PlacementType
{
    CirclePacking = 0,
    RandomPos = 1,
    PT_COUNT = 2
};

enum<sint8> ShadowCullingType
{
    Normal = 0,
    AabbUpScale2 = 1,
    ShadowFrustum = 2
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float lodRatio<comment="Lod切り替え割合">;
    FSeek(p + 4);  float lodRise<comment="Dither上昇率">;
    FSeek(p + 8);  float lodDecrease<comment="Dither減少率">;
    FSeek(p + 12); float lodThreshold<comment="Dither閾値(カメラ移動速度)">;

    FSeek(p + 16);
} FxDensityLodParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool underSelect<comment="デバッグ１">;
    FSeek(p + 4);   float factor<comment="Factor">;
    FSeek(p + 8);   float unit[32]<comment="表示間隔調整",optimize=false>;
    FSeek(p + 136); sint8 chunk[32]<comment="区間数調整",optimize=false>;
    FSeek(p + 168); float lodAddition<comment="LOD距離加算">;
    FSeek(p + 172); sint32 chunkAddition<comment="表示区間数加算">;
    FSeek(p + 176); float drawLimitLenght<comment="表示距離限界">;
    FSeek(p + 180); bool drawCallReduction<comment="DrawCall削減">;
    FSeek(p + 181); bool enableDither<comment="間引き機能">;
    FSeek(p + 184); sint32 ditherGrass<comment="草の間引き">;
    FSeek(p + 188); sint32 ditherOther<comment="草以外間引き">;
    FSeek(p + 192); sint32 ditherPreComputeGrass<comment="リソース配置の草の間引き">;
    FSeek(p + 196); sint32 ditherPreComputeOther<comment="リソース配置の草以外間引き">;

    FSeek(p + 200);
} FxDensityDebugParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="動的配置有効">;
    FSeek(p + 1);  bool precomputeEnable<comment="リソース配置有効">;
    FSeek(p + 2);  bool cameraUpdate<comment="カメラ有効">;
    FSeek(p + 3);  PlacementType placement<comment="配置の基本種別">;
    FSeek(p + 4);  float placementScale<comment="random時の位置調整">;
    FSeek(p + 8);  bool alphaEnable<comment="AlphaMap有効">;
    FSeek(p + 12); float alphaThreshold<comment="AlphaMapの閾値">;
    FSeek(p + 16); float alphaScale<comment="AlphaMapのスケール影響度">;
    FSeek(p + 20); bool complementEnable<comment="DensityMap補完有効">;
    FSeek(p + 21); bool disableCut<comment="草刈り無効">;
    FSeek(p + 22); ShadowCullingType shadowCulling<comment="影用のカリング処理">;
    FSeek(p + 23); bool occlusionCulling<comment="オクルージョンカリング処理">;
    FSeek(p + 24); float occlusionSize<comment="表示サイズによるカリング">;
    FSeek(p + 28); float occlusionShadowSize<comment="影モデルの表示サイズによるカリング">;
    FSeek(p + 32); float occlusionBias<comment="オクルージョンカリングのZBias">;
    FSeek(p + 36); FxDensityLodParameter lodParam<comment="LodDither設定">;
    FSeek(p + 52); FxDensityDebugParameter debugParam<comment="デバッグ機能">;

    FSeek(p + 252);
} FxDensityParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 4);  float offsetR<comment="変位R">;
    FSeek(p + 8);  float offsetG<comment="変位G">;
    FSeek(p + 12); float offsetB<comment="変位B">;
    FSeek(p + 16); float curve<comment="変位ガンマ">;
    FSeek(p + 20); float scaleX<comment="変位スケールX">;
    FSeek(p + 24); float scaleY<comment="変位スケールY">;
    FSeek(p + 28); float centerX<comment="中心位置X">;
    FSeek(p + 32); float centerY<comment="中心位置Y">;

    FSeek(p + 36);
} FxChromaticAberrationParameter;

enum<sint8> GradationMode
{
    GRADATION_MODE_CIRCLE = 0,
    GRADATION_MODE_LINE = 1
};

enum<sint8> BlendMode
{
    BLEND_MODE_ALPHA_BLEND = 0,
    BLEND_MODE_ADD = 1,
    BLEND_MODE_MUL = 2,
    BLEND_MODE_SCREEN = 3,
    BLEND_MODE_OVERLAY = 4
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float centerX<comment="中心点X">;
    FSeek(p + 4);  float centerY<comment="中心点Y">;
    FSeek(p + 8);  float scaleX<comment="スケールX">;
    FSeek(p + 12); float scaleY<comment="スケールY">;
    FSeek(p + 16); float scale<comment="スケール全体">;
    FSeek(p + 20); float rotation<comment="回転">;

    FSeek(p + 24);
} FxVfImageCircleParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float centerX<comment="中心点X">;
    FSeek(p + 4);  float centerY<comment="中心点Y">;
    FSeek(p + 8);  float directionX<comment="方向X">;
    FSeek(p + 12); float directionY<comment="方向Y">;
    FSeek(p + 16); float rotation<comment="回転">;

    FSeek(p + 20);
} FxVfLineParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 4);  float minPenumbraScale<comment="最小半影スケール">;
    FSeek(p + 8);  float maxPenumbraScale<comment="最大半影スケール">;
    FSeek(p + 12); float bokehScale<comment="ボケ領域スケール">;
    FSeek(p + 16); float minDofOpacityScale<comment="最小DOF透明度スケール">;
    FSeek(p + 20); float maxDofOpacityScale<comment="最大DOF透明度スケール">;
    FSeek(p + 24); float minOpacityScale<comment="最小透明度スケール">;
    FSeek(p + 28); float maxOpacityScale<comment="最大透明度スケール">;
    FSeek(p + 32); float minOpacityDist<comment="最小透明度距離">;
    FSeek(p + 36); float maxOpacityDist<comment="最大透明度距離">;

    FSeek(p + 40);
} FxVfDepthParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 1);  GradationMode gradationType<comment="グラデーションタイプ">;
    FSeek(p + 2);  BlendMode blendMode<comment="ブレンドモード">;
    FSeek(p + 16); vector3 color<comment="カラー">;
    FSeek(p + 32); float opacity<comment="不透明度">;
    FSeek(p + 36); FxVfImageCircleParameter imageCircle<comment="イメージサークル">;
    FSeek(p + 60); FxVfLineParameter line<comment="直線">;
    FSeek(p + 80); float penumbraScale<comment="半影スケール">;
    FSeek(p + 84); float intensity<comment="強度">;
    FSeek(p + 88); FxVfDepthParameter depth<comment="奥行き">;

    FSeek(p + 128);
} FxVignetteParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool debugEnable<comment="バッファ表示">;
    FSeek(p + 1);  bool debugSpace<comment="空間表示">;
    FSeek(p + 2);  bool debugGlobal<comment="グローバル風を空間に表示">;
    FSeek(p + 3);  bool debugGlobalMap<comment="GlobalWindMapを空間に表示">;
    FSeek(p + 4);  bool debugSpaceAll<comment="全空間表示">;
    FSeek(p + 8);  sint32 spaceIndex<comment="表示する空間の番号">;
    FSeek(p + 12); float spaceThreshold<comment="空間表示する風の閾値">;
    FSeek(p + 16); float min<comment="最小">;
    FSeek(p + 20); float max<comment="最大">;

    FSeek(p + 24);
} FxWindComputeDebugParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   bool enableAll<comment="全体の有効化">;
    FSeek(p + 1);   bool enableDynamicWind<comment="Dynamicwind・有効 (GlobalWindMap乱数連動)">;
    FSeek(p + 2);   bool enableGlobalWind<comment="Globalwind・有効 (GlobalWindMap乱数連動)">;
    FSeek(p + 4);   float timeScale<comment="DynamicWind・時間係数">;
    FSeek(p + 8);   float decreaseRate<comment="　　　　　　 減少率">;
    FSeek(p + 16);  vector3 globalWind<comment="直線風A・風向き(ベクトル表記)">;
    FSeek(p + 32);  float globalWindPower<comment="　　　 　風の強さ">;
    FSeek(p + 36);  float globalWindSpeed<comment="　　　 　風揺れの速さ">;
    FSeek(p + 40);  float globalWindOffset<comment="　　　 　風揺れ戻り量">;
    FSeek(p + 48);  vector3 globalSecondWind<comment="直線風B・風向き(ベクトル表記)">;
    FSeek(p + 64);  float globalSecondWindPower<comment="　　　 　風の強さ">;
    FSeek(p + 68);  float globalSecondWindSpeed<comment="　　　 　風揺れの速さ">;
    FSeek(p + 72);  float globalSecondWindOffset<comment="　　　 　風揺れ戻り量">;
    FSeek(p + 80);  vector3 globalWindMapSize<comment="GlobalWindMap・サイズ">;
    FSeek(p + 96);  vector3 globalWindMapCenter<comment="　　　　　　　 中心">;
    FSeek(p + 112); vector3 globalWindMapOffset<comment="　　　　　　　 オフセット">;
    FSeek(p + 128); float globalWindMapPower<comment="　　　　　　　 強さ">;
    FSeek(p + 132); float globalWindMapTimeScale<comment="　　　　　　　 揺れの速さ">;
    FSeek(p + 136); FxWindComputeDebugParameter debugParam<comment="debugParam">;

    FSeek(p + 160);
} FxWindComputeParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="ブレンドを有効">;
    FSeek(p + 4);  float blendPower<comment="ブレンドのコントラスト">;
    FSeek(p + 8);  float blendHightPower<comment="ハイトブレンドの影響率">;
    FSeek(p + 12); float cullingDistance<comment="カリング距離">;

    FSeek(p + 16);
} FxTerrainMaterialBlendingParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); bool enable<comment="衝突バッファ表示有効">;
    FSeek(p + 1); bool collisionEnable<comment="衝突空間表示有効">;
    FSeek(p + 4); float threshold<comment="空間表示する閾値">;

    FSeek(p + 8);
} FxInteractionDebugParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="衝突有効">;
    FSeek(p + 4);  float power<comment="強度係数">;
    FSeek(p + 8);  float decrease<comment="減少値">;
    FSeek(p + 12); float timeScale<comment="時間係数">;
    FSeek(p + 16); FxInteractionDebugParameter debug<comment="debug">;
    FSeek(p + 24); float tremorPower<comment="揺れの強さ係数">;
    FSeek(p + 28); float tremorSpeed<comment="揺れの速さ係数">;
    FSeek(p + 32); float tremorScaleCriterion<comment="物体の大きさによる揺れ幅軽減">;
    FSeek(p + 36); float tremorScaleReduce<comment="物体の大きさによる速さの軽減">;

    FSeek(p + 40);
} FxInteractionParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float grassDitherStart<comment="草葉のディザ深度開始">;
    FSeek(p + 4);  float grassDitherEnd<comment="草葉のディザ深度終了">;
    FSeek(p + 8);  FxInteractionParameter interaction<comment="衝突設定">;
    FSeek(p + 48); bool enableZoomBias<comment="Zoom時のLod補正">;
    FSeek(p + 52); float zoomBias<comment="草葉のディザ深度終了">;

    FSeek(p + 56);
} FxGpuEnvironmentParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 1);  bool enableDebugDisplay<comment="デバッグ表示">;
    FSeek(p + 4);  float waveDamping<comment="時間係数">;
    FSeek(p + 8);  float waveReduceRange<comment="減衰が始まる距離">;
    FSeek(p + 12); float waveSpeed<comment="波の速度">;
    FSeek(p + 16); float simurationScale<comment="シミュレーション範囲">;
    FSeek(p + 20); float playerMaxSpeed<comment="プレイヤーの最大2乗速度(m/フレーム)">;
    FSeek(p + 24); bool isInWaterDummy<comment="[現在未使用]入水判定ダミー">;

    FSeek(p + 28);
} FxInteractiveWaveParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 4);  float tileX<comment="タイルX">;
    FSeek(p + 8);  float tileY<comment="タイルY">;
    FSeek(p + 12); float tileScrollSpeed<comment="ノイズ有り無し切り替わり速度">;
    FSeek(p + 16); float noiseScrollSpeed<comment="ノイズの切り替わり速度">;
    FSeek(p + 20); float thresholdSpeed<comment="抜きの閾値の変化速度">;
    FSeek(p + 24); float thredholdMin<comment="抜きの閾値最小値">;
    FSeek(p + 28); float thredholdMax<comment="抜きの閾値最大値">;
    FSeek(p + 32); float selectRate<comment="ノイズ無しフレームが選ばれる確率">;
    FSeek(p + 36); float scanLineRSpeed<comment="走査線R速度">;
    FSeek(p + 40); float scanLineRBlend<comment="走査線Rブレンド率">;
    FSeek(p + 44); float scanLineGSpeed<comment="走査線G速度">;
    FSeek(p + 48); float scanLineGBlend<comment="走査線Gブレンド率">;
    FSeek(p + 52); float rgbLineScale<comment="RGB線スケール">;
    FSeek(p + 56); float rgbLineBlend<comment="RGB線ブレンド率">;

    FSeek(p + 60);
} FxCyberNoiseEffectParameter;

enum<sint8> ColorblinidSimulationType
{
    COLORBLIND_SIM_NONE = 0,
    COLORBLIND_SIM_PROTANOPIA = 1,
    COLORBLIND_SIM_DEUTERANOPIA = 2,
    COLORBLIND_SIM_TRITANOPIA = 3,
    COLORBLIND_SIM_ALL = 4
};

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool enable<comment="有効">;
    FSeek(p + 4);  float daltonizeFactor<comment="フィルタ強度">;
    FSeek(p + 8);  float protanopiaFactor<comment="1型色覚[赤]">;
    FSeek(p + 12); float deuteranopiaFactor<comment="2型色覚[緑]">;
    FSeek(p + 16); float tritanopiaFactor<comment="3型色覚[青]">;
    FSeek(p + 20); float brightness<comment="輝度">;
    FSeek(p + 24); float contrast<comment="コントラスト">;
    FSeek(p + 28); float maskIntensity[5]<comment="マスクテクスチャの影響度",optimize=false>;
    FSeek(p + 48); ColorblinidSimulationType simulationType<comment="[開発用]色覚シミュレーション">;

    FSeek(p + 52);
} FxColorAccessibilityFilterParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    FxRenderOption renderOption<comment="描画設定">;
    FSeek(p + 576);  FxSGGIParameter sggi<comment="SG">;
    FSeek(p + 600);  FxRLRParameter rlr<comment="ローカルリフレクション">;
    FSeek(p + 640);  FxPlanarReflectionParameter planarReflection<comment="プラナーリフレクション">;
    FSeek(p + 688);  FxBloomParameter bloom<comment="ブルーム">;
    FSeek(p + 704);  FxCameraControlParameter cameraControl<comment="カメラ露出">;
    FSeek(p + 748);  FxToneMapParameter tonemap<comment="トーンマップ">;
    FSeek(p + 796);  FxColorContrastParameter colorContrast<comment="色補正">;
    FSeek(p + 880);  FxLightScatteringParameter lightscattering<comment="ライトスキャッタリング">;
    FSeek(p + 976);  FxDOFParameter dof<comment="DOF">;
    FSeek(p + 1072); FxShadowMapParameter shadowmap<comment="シャドウマップ">;
    FSeek(p + 1408); FxShadowHeightMapParameter shadowHeightMap<comment="ハイトマップシャドウ">;
    FSeek(p + 1428); FxSSAOParameter ssao<comment="SSAO">;
    FSeek(p + 1552); FxSHLightFieldParameter shlightfield<comment="ライトフィールド">;
    FSeek(p + 1616); FxScreenBlurParameter blur<comment="画面ブラー">;
    FSeek(p + 1664); FxOcclusionCapsuleParameter occlusionCapsule<comment="オクルージョンカプセル">;
    FSeek(p + 1808); FxEffectParameter effect<comment="エフェクト">;
    FSeek(p + 1904); FxScreenSpaceGodrayParameter ssGodray<comment="スクリーンスペースゴッドレイ">;
    FSeek(p + 1968); FxGodrayParameter godray<comment="ボリューメトリックライト">;
    FSeek(p + 2208); FxHeatHazeParameter heatHaze<comment="陽炎">;
    FSeek(p + 2240); FxAtmosphereParameter atmosphere<comment="大気光学系">;
    FSeek(p + 2992); FxWeatherParameter weather<comment="天気">;
    FSeek(p + 3024); FxSceneEnvironmentParameter sceneEnv<comment="シーン環境">;
    FSeek(p + 3120); FxTAAParameter taa<comment="TAA">;
    FSeek(p + 3184); FxDensityParameter density<comment="植生マップ">;
    FSeek(p + 3436); FxChromaticAberrationParameter chromaticAberration<comment="色収差">;
    FSeek(p + 3472); FxVignetteParameter vignette<comment="ビネット">;
    FSeek(p + 3600); FxWindComputeParameter wind<comment="GPU_風">;
    FSeek(p + 3760); FxTerrainMaterialBlendingParameter terrainBlend<comment="地形マテリアルブレンド">;
    FSeek(p + 3776); FxGpuEnvironmentParameter gpuEnvironment<comment="GPU環境設定">;
    FSeek(p + 3832); FxInteractiveWaveParameter interactiveWave<comment="インタラクティブ波">;
    FSeek(p + 3860); FxCyberNoiseEffectParameter cyberNoise<comment="電脳空間ノイズエフェクト">;
    FSeek(p + 3920); FxColorAccessibilityFilterParameter colorAccessibility<comment="色覚フィルタ">;

    FSeek(p + 3984);
} NeedleFxParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);   FxSkyCommon commonSkyParam<comment="天球共通">;
    FSeek(p + 16);  FxBrunetonSky brunetonSkyParam<comment="天球[bruneton]">;
    FSeek(p + 160); FxSebastienSky sebastienSkyParam<comment="天球[sebastien]">;
    FSeek(p + 304); FxCloudParameter cloudParam<comment="雲">;
    FSeek(p + 560); FxCrepuscularRay crepuscularRayParam<comment="ゴッドレイ">;
    FSeek(p + 576); FxHeightFog heightFogParam<comment="ハイトフォグ">;

    FSeek(p + 688);
} TimeProgressAtmosphereParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);    bool enable<comment="有効">;
    FSeek(p + 4);    float time<comment="時">;
    FSeek(p + 8);    FxBloomParameter bloom<comment="ブルーム">;
    FSeek(p + 24);   FxCameraControlParameter cameraControl<comment="カメラ露出">;
    FSeek(p + 68);   FxCameraControlParameter cameraControlEvent<comment="カメラ露出[イベント]">;
    FSeek(p + 112);  FxToneMapParameter tonemap<comment="トーンマップ">;
    FSeek(p + 160);  FxColorContrastParameter colorContrast<comment="色補正">;
    FSeek(p + 240);  FxSHLightFieldParameter shlightfield<comment="ライトフィールド">;
    FSeek(p + 304);  FxLightScatteringParameter lightscattering<comment="ライトスキャッタリング">;
    FSeek(p + 400);  FxEffectParameter effect<comment="エフェクト">;
    FSeek(p + 496);  FxScreenSpaceGodrayParameter ssGodray<comment="スクリーンスペースゴッドレイ">;
    FSeek(p + 560);  FxGodrayParameter godray<comment="ボリューメトリックライト">;
    FSeek(p + 800);  FxHeatHazeParameter heatHaze<comment="陽炎">;
    FSeek(p + 832);  TimeProgressAtmosphereParameter atmosphere<comment="大気光学系">;
    FSeek(p + 1520); FxWeatherParameter weather<comment="天気">;

    FSeek(p + 1552);
} TimeProgressNeedleFxParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float deadline<comment="死亡高度">;
    FSeek(p + 4); float deadFallTime<comment="死亡落下時間">;

    FSeek(p + 8);
} StageCommonParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float zNear<comment="Near">;
    FSeek(p + 4); float zFar<comment="Far">;
    FSeek(p + 8); float fovy<comment="Fovy">;

    FSeek(p + 12);
} StageCameraParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0); float heightRange<comment="ハイトマップレンジ">;

    FSeek(p + 4);
} StageTerrainPrecisionParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  float uvScaleDetail<comment="DetailテクスチャのUVスケール">;
    FSeek(p + 4);  float uvScaleBase<comment="BaseテクスチャのUVスケール">;
    FSeek(p + 8);  float detailDistance<comment="Detailテクスチャが消える距離[m]">;
    FSeek(p + 12); float detailFadeRange<comment="切り替え時のぼかしの強さ">;

    FSeek(p + 16);
} StageTerrainMaterialParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  bool useHeightMapTerrain<comment="ハイトマップ地形">;
    FSeek(p + 1);  bool useHalfPrecision<comment="ハイトマップ精度16bit">;
    FSeek(p + 4);  StageTerrainPrecisionParameter precision<comment="16bit時のパラメータ">;
    FSeek(p + 8);  sint32 worldSize<comment="地形の大きさ[メートル]">;
    FSeek(p + 12); float heightScale<comment="ハイトマップ高さスケール">;
    FSeek(p + 16); float smallestCellSize<comment="メッシュ最小分割単位">;
    FSeek(p + 20); StageTerrainMaterialParameter material<comment="素材設定">;
    FSeek(p + 36); bool enableGbufferBlending<comment="配置物とハイトマップ地形のブレンド">;

    FSeek(p + 40);
} StageTerrainParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);  StageCommonParameter common<comment="基本設定">;
    FSeek(p + 8);  StageCameraParameter camera<comment="カメラ設定">;
    FSeek(p + 20); StageTerrainParameter terrain<comment="地形設定">;

    FSeek(p + 60);
} StageConfig;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0);      NeedleFxSceneConfig config<comment="共通設定">;
    FSeek(p + 320);    NeedleFxParameter items[16]<comment="パラメータリスト",optimize=false>;
    FSeek(p + 64064);  TimeProgressNeedleFxParam timeItems[24]<comment="時間変化パラメーターリスト",optimize=false>;
    FSeek(p + 101312); StageConfig stageConfig<comment="ステージ設定">;

    FSeek(p + 101376);
} NeedleFxSceneData;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
NeedleFxSceneData needleFxSceneData;
