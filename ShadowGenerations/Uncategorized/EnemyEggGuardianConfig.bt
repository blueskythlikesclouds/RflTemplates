local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef int32 sint32;

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); float collisionRadius<comment="半径">;
    FSeek(p + 0x04); float collisionHeight<comment="高さ">;
    FSeek(p + 0x10); vector3 collisionPosOffset<comment="位置オフセット">;

    FSeek(p + 0x20);
} EnemyBlockCollisionParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); EnemyBlockCollisionParam blockCollisionParam<comment="剛体コリジョン">;
    FSeek(p + 0x20); float damageCollisionRadiusOffset<comment="被ダメージコリジョンの半径オフセット">;
    FSeek(p + 0x24); float damageCollisionHeightOffset<comment="被ダメージコリジョンの高さオフセット">;
    FSeek(p + 0x30); vector3 damageCollisionPosOffset<comment="被ダメージコリジョンの位置オフセット">;
    FSeek(p + 0x40); float touchCollisionRadiusOffset<comment="接触与ダメージコリジョンの半径オフセット">;
    FSeek(p + 0x44); float touchCollisionHeightOffset<comment="接触与ダメージコリジョンの高さオフセット">;
    FSeek(p + 0x50); vector3 touchCollisionPosOffset<comment="接触与ダメージコリジョンの位置オフセット">;

    FSeek(p + 0x60);
} EnemyCollisionParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); float warpRadius<comment="瞬間移動半径">;
    FSeek(p + 0x04); float warpHeight<comment="瞬間移動高さ">;

    FSeek(p + 0x08);
} EnemyComboParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); float killWaitTime<comment="Killされるまでの待ち時間">;
    FSeek(p + 0x04); float rotateSpeed<comment="旋回速度">;
    FSeek(p + 0x08); float startShootRocketPunchWaitTime<comment="ロケットパンチ攻撃開始するまでの待ち時間">;
    FSeek(p + 0x0C); float rocketPunchSpeed<comment="ロケットパンチ速度">;
    FSeek(p + 0x10); float rocketPunchHomingAngularSpeed<comment="ロケットパンチホーミング角速度">;
    FSeek(p + 0x14); float rocketPunchHomingOnTime<comment="ロケットパンチホーミング時間">;
    FSeek(p + 0x18); float rocketPunchRicochetSpeed<comment="ロケットパンチ跳ね返され時速度[0:現状維持]">;
    FSeek(p + 0x1C); float rocketPunchLifeTime<comment="ロケットパンチ寿命">;
    FSeek(p + 0x20); float startShootVulcanWaitTime<comment="バルカン砲攻撃開始するまでの待ち時間">;
    FSeek(p + 0x24); float readyVulcanWaitTime<comment="バルカン砲発射までの待ち時間">;
    FSeek(p + 0x28); float vulcanSpeed<comment="バルカン砲速度">;
    FSeek(p + 0x2C); float vulcanIntervalTime<comment="バルカン砲発射間隔時間">;
    FSeek(p + 0x30); float vulcanRadius<comment="バルカン砲半径">;
    FSeek(p + 0x34); float vulcanRange<comment="バルカン砲射程距離">;
    FSeek(p + 0x38); float vulcanRotateSpeedRate<comment="バルカン砲回転速度倍率">;
    FSeek(p + 0x3C); sint32 vulcanRotateCount<comment="バルカン砲回転回数">;
    FSeek(p + 0x40); float revivalArmsWaitTime<comment="バルカン砲攻撃終了から両腕復活までの待ち時間">;
    FSeek(p + 0x44); float stunTime<comment="スタン時間">;
    FSeek(p + 0x50); EnemyCollisionParam collisionParam<comment="コリジョンパラメータ">;
    FSeek(p + 0xB0); EnemyComboParam comboParam<comment="コンボパラメータ">;

    FSeek(p + 0xC0);
} EnemyEggGuardianCommonParam;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); EnemyEggGuardianCommonParam commonParam<comment="共通パラメータ">;

    FSeek(p + 0xC0);
} EnemyEggGuardianConfig;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
EnemyEggGuardianConfig enemyEggGuardianConfig;
