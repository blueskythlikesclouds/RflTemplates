local uint64 BASE_OFFSET_VALUE<hidden=true>;

typedef struct {
    uint64 pointer;
} cstring<read=ReadCString>;

string ReadCString(cstring& str) {
    if (str.pointer > 0) return ReadString(BASE_OFFSET_VALUE + str.pointer);
    return "(null)";
}

typedef ubyte uint8;

enum<uint8> CameraType
{
    None = 0,
    Fixed = 1,
    Offset = 2,
    Follow = 3,
    Pan = 4,
    StaticPan = 5,
    PanUpByFront = 6
};

enum<uint8> CameraCoordType
{
    Orthgonal = 0,
    Spherical = 1
};

typedef struct {
    float x;
    float y;
    float z;
    float w<hidden=true>;
} vector3;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); CameraType type<comment="動作">;
    FSeek(p + 0x04); float time<comment="有効時間">;
    FSeek(p + 0x08); float easeinTime<comment="補間時間">;
    FSeek(p + 0x0C); CameraCoordType lookAtCoord<comment="注視点の座標系">;
    FSeek(p + 0x10); vector3 localLookAtOffset<comment="注視点のローカルオフセット">;
    FSeek(p + 0x20); vector3 worldLookAtOffset<comment="注視点のワールドオフセット">;
    FSeek(p + 0x30); CameraCoordType eyeCoord<comment="カメラ位置の座標系">;
    FSeek(p + 0x40); vector3 localEyeOffset<comment="カメラ位置のローカルオフセット">;
    FSeek(p + 0x50); vector3 worldEyeOffset<comment="カメラ位置のワールドオフセット">;
    FSeek(p + 0x60); float roll<comment="Roll">;

    FSeek(p + 0x70);
} PlayerCameraParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); cstring name<comment="名前">;
    FSeek(p + 0x10); float easeoutTime<comment="終了補間時間">;
    FSeek(p + 0x20); PlayerCameraParameter param[8]<comment="パラメータ",optimize=false>;

    FSeek(p + 0x3A0);
} PlayerCameraSetParameter;

typedef struct
{
    local uint64 p<hidden=true> = FTell();

    FSeek(p + 0x00); PlayerCameraSetParameter data[45]<comment="カメラパラメータ郡",optimize=false>;

    FSeek(p + 0xA320);
} PlayerCameraSetParameters;

LittleEndian();

uint32 signature<hidden=true>;

if (signature == 0x414E4942)
    BASE_OFFSET_VALUE = 0x40;

FSeek(BASE_OFFSET_VALUE);
PlayerCameraSetParameters playerCameraSetParameters;
